{"title":"当前明月的博客","description":"移动端，前端，后端，运维，全都会，如果你认为啥都会就等于啥都不会，那你就错了，哥不仅会还精通，你说气人不。","language":"","link":"http://example.com","pubDate":"Sun, 15 Sep 2019 09:00:30 GMT","lastBuildDate":"Sat, 05 Dec 2020 13:34:44 GMT","generator":"hexo-generator-json-feed","webMaster":"当前明月","items":[{"title":"swift 属性","link":"http://example.com/2019/09/15/swift-属性/","description":"swift 属性分为两大类: 实例属性和类型属性,.实例属性又分为:存储实例属性和计算实例属性, 类型属性分为: 存储类型属性和计算类型属性 一 实例存储属性123456789101112131415struct Point &#123; var x:Int var y:Int&#125;var p = Point(x:10,y:20)print(MemoryLayout.stride(ofValue: p))class Circle &#123; var x:Int var y:Int init(x:Int,y:Int) &#123; self.x = x self.y = y &#125;&#125; 相当于成员变量,属性存储在实例的内存中,只有结构体和类可以定义实例存储属性,枚举不可以定义存储属性. 1 枚举为什么不可以定义存储属性呢? 首先存储属性是存储在实例内存中的,而枚举实例值存储了case相关值标识,比如枚举原始值,只占1个字节,这里的枚举是无法存储你定义其它非case变量的","pubDate":"Sun, 15 Sep 2019 09:00:30 GMT","guid":"http://example.com/2019/09/15/swift-属性/","category":"swifts"},{"title":"swift 闭包","link":"http://example.com/2019/09/02/swift-闭包/","description":"一 闭包的定义1234567891011typealias Fn = (Int) -&gt; Intfunc getFn() -&gt;Fn &#123; var num = 0; func plus(_ i:Int) -&gt; Int&#123; num += i return num &#125; return plus&#125; // 返回的plus和num形成了闭包var fn1 = getFn()print(fn1(1)) //1 一个函数和它所捕获的变量或常量环境组合起来，称为 闭包 一般指定义在函数内部的函数 一般它捕获的是外层函数的局部变量或常量","pubDate":"Mon, 02 Sep 2019 07:04:23 GMT","guid":"http://example.com/2019/09/02/swift-闭包/","category":"swift"},{"title":"swift 结构体和类","link":"http://example.com/2019/09/01/swift-结构体和类/","description":"一 结构体12345678 struct Date &#123; var year: Int var month: Int var day: Int&#125;var date = Date(year: 2019, month: 6, day: 20)print(date.year,date.month,date.day)//2019 6 20//Program ended with exit code: 0 swift标准库中，绝大多数的公开类型都是结构体，枚举只占很小一部分，像，Bool, Int, Double, String, Array, Dictionary等常见类型都是结构体 二 结构体的初始化器 ❌错误改正图片中最后一个date4 要改成date5，提示是对的 所有的结构体都有一个编译器自动生成的初始化器（initializer） 编译器会根据情况，可能会为结构体生成多个初始化器，它要保证所有成员都有初始值 1234567891011struct Date &#123; var year: Int? var month: Int? var day: Int?&#125;var date = Date(year: 2019, month: 6, day: 20)var date2 = Date(year: 2019)var date3 = Date(month: 6)var date4 = Date(day: 20)var date5 = Date() 这个会报错么，能编译通过么？？ 不会报错，可选项都有个默认值nil，编译器会生成多个初始化方法，同时它也能保证所有变量都有初始值","pubDate":"Sun, 01 Sep 2019 02:40:23 GMT","guid":"http://example.com/2019/09/01/swift-结构体和类/","category":"swift"},{"title":"swift枚举","link":"http://example.com/2019/08/28/swift枚举/","description":"一 枚举的基本用法12345678910111213141516171819202122232425enum Direction &#123; case north case south case east case west&#125;var dir = Direction.westdir = .northprint(dir)enum Season &#123; case spring, summer,autumn, winter&#125;var season = Season.summerswitch season &#123;case .spring: print(\"spring\")case .summer: print(\"summer\")case .autumn: print(\"autumn\")case .winter: print(\"winter\")&#125; 对于有限固定值的定义成枚举比较合适,比如,季节,请求状态,物流流转状态,订单状态,等等 二 关联值1234567891011121314enum Score &#123; case points(Int) case grade(Character)&#125;var score = Score.points(96)score = .grade(\"A\")switch score &#123;case let .points(point): print(point)case .grade(var grade): grade = \"B\" print(grade)&#125;//B//Program ended with exit code: 0 可在.points前面整体定义 它定义什么类型，那三个变量就是什么类型，var 或let,也可以单独定义比如.grade关联值是存储在枚举变量内存里面的 123456789101112enum Password &#123; case number(Int,Int,Int,Int) case gesture(String)&#125;var pwd = Password.number(5, 9, 8, 6)pwd = .gesture(\"13456\")switch pwd &#123;case let .number(n1, n2, n3, n4): print(n1,n2,n3,n4)case .gesture(let gesture): print(gesture)&#125; 密码有数字密码和手势密码,这两种方式是固定的,对于有限固定值我们定义成枚举,但是每个人定义设定的数字和手势密码都不同,那我们就定义几个关联值,与这个枚举进行关联","pubDate":"Wed, 28 Aug 2019 02:45:49 GMT","guid":"http://example.com/2019/08/28/swift枚举/","category":"swift"},{"title":"swift 可选项(Optional)","link":"http://example.com/2019/08/21/swift-可选项-Optional/","description":"一 可选项定义12345678910111213141516171819var name:String? = \"Jack\"name = nilvar age:Int?age = 10age = nilvar array = [1,15,40,29]func get(_ index:Int) -&gt; Int? &#123; if index &lt; 0 || index &gt;= array.count &#123; return nil &#125; return array[index]&#125;print(get(1))print(get(-1))print(get(4))//Optional(15)//nil//nil 可选项,一般也叫可选类型,它允许将值设置为nil,在类型名称后面加个问号❓来定义一个可选项, 通过打印我们看到可选项打印出来是Optional(15),那么这个Optional(15)我们该怎么用呢 二 强制解包12345var age:Int? = 10var ageInt:Int = age!ageInt += 10print(ageInt)//20//Program ended with exit code: 0 如果要从可选项中取出被包装的数据,需要使用感叹号❕ 对值为nil的可选项进行强制解包,将会产生运行时错误 判断可选项是否包含值123456let number = Int(\"123\")if number != nil&#123; print(\"字符串转换整数成功:\\(number)\")&#125; else &#123; print(\"字符串转换整数失败\")&#125;//字符串转换整数成功:Optional(123)","pubDate":"Wed, 21 Aug 2019 11:32:28 GMT","guid":"http://example.com/2019/08/21/swift-可选项-Optional/","category":"swift"},{"title":"swift函数","link":"http://example.com/2019/08/15/swift函数/","description":"一 函数的定义12345678910111213141516171819//无参有返回值func pi() -&gt; Double &#123; return 3.1415926&#125;//有参有返回值func sum(v1:Int, v2:Int) -&gt; Int &#123; return v1 + v2&#125;//无参无返回值func sayHello() -&gt; Void &#123; print(\"hello\")&#125;//有参无返回值func sayWorld(v1:Int) &#123; print(v1)&#125; 形参默认是let,也只能是let 二 函数的文档注释返回多个值12345678910111213////// 返回两个数的和 差 平均值////// - Parameter v1: 第一个整数/// - Parameter v2: 第二个整数/// - Returns: sum:Int, difference:Int, average:Int////// - Note:通过一个元组实现多返回值func calculate(v1:Int, v2:Int) -&gt; (sum:Int, difference:Int, average:Int) &#123; let sum = v1 + v2 return (sum,v1-v2, sum &gt;&gt; 1)&#125;let result = calculate(v1: 20, v2: 10) 对着函数调用按住option键即可查看注释效果 更多注释规范 点此查看","pubDate":"Thu, 15 Aug 2019 10:59:24 GMT","guid":"http://example.com/2019/08/15/swift函数/","category":"swift"},{"title":"swift流程控制","link":"http://example.com/2019/08/10/swift流程控制/","description":"一 if else12345678let age = 30if age &gt;= 22 &#123; print(\"Get married\")&#125; else if age &gt;= 18 &#123; print(\"Being a adult\")&#125; else &#123; print(\"listening tu ta zi jiao huan\")&#125; if 后面的条件可以省略小括号条件后面的大括号不可以省略if 后面的条件只能是Bool类型 二 while12345678910var num = 5while num &gt; 0 &#123; print(\"num is \\(num)\") num -= 1&#125;var num2 = -1repeat &#123; print(\"num2 is \\(num2)\")&#125; while num2 &gt; 0 repeat-while相当于C语言中的do-while从Swift3开始,去除了自增(++),自减(–)运算符,为啥去除呢,可能为了更严谨吧. 123var number = 0let b = ++ number + number++print(b) //?? 你能快速算出b是几么? swift去除自增自减,也是为了更明确简洁吧.","pubDate":"Sat, 10 Aug 2019 09:15:16 GMT","guid":"http://example.com/2019/08/10/swift流程控制/","category":"swift"},{"title":"swift基础语法","link":"http://example.com/2019/07/30/swift基础语法/","description":"一 Hello World二 注释三 常量四 标识符五 常见数据类型六 字面量七 元组一 Hellow World1234func helloworld() &#123; print(\"hello world\")&#125;print(\"你好,世界\") 12output: 你好,世界Program ended with exit code: 0 1 不用像OC那样需要main函数,Swift会将全局内的首句可执行代码作为程序入口, 其实它还是有main函数的,底层做的,不需要我们手动写了 2 相比OC我们语句后面也不用写 “ ; ”了,但是多个语句在一行还是需要的. 12345678let a = 10var b = 20b = 100//a = 100 xxxprint(a,b)10 100Program ended with exit code: 0 1 用var 定义变量, 变量可修改值 2 用let 定义常量,值不可修改 有点像javasript常 变量的定义","pubDate":"Tue, 30 Jul 2019 05:42:31 GMT","guid":"http://example.com/2019/07/30/swift基础语法/","category":"swift"},{"title":"Swift简介","link":"http://example.com/2019/07/20/Swift简介/","description":"Swift是Apple在2014年6月WWDC发布的全新编程语言，中文名和LOGO是“雨燕” Swift之父Chris Lattner pClang编译器作者、LLVM项目的主要发起人 从Apple离职后，先后跳槽到Tesla、Google p目前在Google Brain从事AI研究 历时5年发展，从Swift1.x发展到了Swift5.x版本，经历了多次重大改变，ABI终于稳定 API(Application Programming Interface):应用程序编程接口 源代码和库之间的接口ABI(Application Binary Interface):应用程序二进制接口 应用程序与操作系统之间的底层接口涉及的内容有: 目标文件格式、数据类型的大小\\布局\\对齐、函数调用约定等等 随着ABI的稳定，Swift语法基本不会再有太大的变动,截止至2019年6月，目前最新版本:Swift5.1Swift完全开源: https://github.com/apple/swift，主要采用C++编写 一 swift 编译流程首先我们要知道编译器分为前端和后端：前端：词法分析后端：生成对应平台的二进制代码 Swift与OC和C的编译流程区别：C和OC编译器的前端是Clang，也就是以前的OC代码通过Clang这个编译器的前端进行处理，转交给LLVM这个编译器的后端，最后生成ARM的二进制代码。而Swift的编译器的前端是swiftc，通过swiftc进行词法分析和语法树处理，然后交给LLVM的后端编译器，最后生成ARM格式的二进制代码Swift代码–&gt;通过swiftc生成Swift AST(Swift语法树)–&gt;Raw Swift IL(Swift特有的中间代码)–&gt;Canonical Swift IL(更简洁的Swift代码)–&gt;转交给后端生成LLVM代码–&gt;Assembly(汇编代码)–&gt;Executable(二进制代码)每个阶段具体介绍","pubDate":"Sat, 20 Jul 2019 15:00:48 GMT","guid":"http://example.com/2019/07/20/Swift简介/","category":"swift"},{"title":"微信小程序小票打印功能（以及中文乱码的解决）","link":"http://example.com/2018/11/10/微信小程序小票打印功能（以及中文乱码的解决）/","description":"因为业务需求，需要实现微信小程序连接热敏打印机打印小票。首先我要先知道微信小程序有没有蓝牙操作相关的API，然后就是如何蓝牙连接打印机，发送打印指令了。 通过查看小程序文档)，我看到微信小程序是支持蓝牙操作的但是我看到它有两个，低功耗蓝牙，蓝牙。蓝牙我们知道，低功耗蓝牙是什么东西，网上查了下，解释如下：以前可能有蓝牙1.0、蓝牙2.0、蓝牙3.0、蓝牙4.0之类的以数字结尾的蓝牙版本号，而实际上，在最新的标准中，已经不再使用数字版本号作为蓝牙版本的区分了，取而代之的是经典蓝牙与低功耗蓝牙（BLE）这两种区别低功耗蓝牙（Bluetooth Low Energy，或称Bluetooth LE、BLE，旧商标Bluetooth Smart）也称低功耗蓝牙，是蓝牙技术联盟设计和销售的一种个人局域网技术，旨在用于医疗保健、运动健身、信标、安防、家庭娱乐等领域的新兴应用。相较经典蓝牙，低功耗蓝牙旨在保持同等通信范围的同时显著降低功耗和成本.","pubDate":"Sat, 10 Nov 2018 08:07:10 GMT","guid":"http://example.com/2018/11/10/微信小程序小票打印功能（以及中文乱码的解决）/","category":"微信小程序"},{"title":"我是如何快速上手微信小程序开发的","link":"http://example.com/2017/08/23/我是如何快速上手微信小程序开发的/","description":"一 如何创建一个微信小程序二 如何搭建小程序页面三 小程序如何获取数据，处理逻辑四 如何发布小程序应用 无论是前端开发，还是后端开发，时间长了，你总会能总结出它的一些规律的，对于前端开发主要就两条，页面展现，逻辑处理。如果是全流程开发的话，那就是，如何创建项目，页面如何实现，数据获取和逻辑处理如何实现，如何打包上线。移动端或者前端，基本开发流程就这个四个步骤。所以在在前端方面去学习新一门开发技术，只要你解决了这四个问题，那一切就OK了，下面我就讲一下，我在学习微信小程序开发，如何用这四步法快速上手开发的","pubDate":"Wed, 23 Aug 2017 10:00:00 GMT","guid":"http://example.com/2017/08/23/我是如何快速上手微信小程序开发的/","category":"微信小程序"}]}
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>当前明月的博客</title>
  <icon>https://www.gravatar.com/avatar/9e7532e63a39952521694767013536b7</icon>
  <subtitle>干啥啥不行，捣蛋第一名</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-01T12:45:41.502Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>当前明月</name>
    <email>face_book@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>swift 模式匹配</title>
    <link href="http://example.com/2019/12/10/swift-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>http://example.com/2019/12/10/swift-模式匹配/</id>
    <published>2019-12-10T10:51:13.000Z</published>
    <updated>2021-01-01T12:45:41.502Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-模式定义"><a href="#一-模式定义" class="headerlink" title="一 模式定义"></a>一 模式定义</h5><p>模式是用于匹配的规则,比如switch的case, 捕捉错误的catch, if\guard\while\for语句的条件等,swift中的模式有</p><ol><li><strong>通配符模式</strong></li><li><strong>标识符模式</strong></li><li><strong>值绑定模式</strong></li><li><strong>元组模式</strong></li><li><strong>枚举Case模式</strong></li><li><strong>可选模式</strong></li><li><strong>类型转换模式</strong></li><li><strong>表达式模式</strong></li></ol><p>下面让我们一一讲解这些模式<br><a id="more"></a></p><h5 id="二-通配符模式"><a href="#二-通配符模式" class="headerlink" title="二 通配符模式"></a>二 通配符模式</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">enum</span> <span class="selector-tag">Life</span> &#123;</span><br><span class="line">    <span class="selector-tag">case</span> <span class="selector-tag">human</span>(<span class="attribute">name</span>: String, <span class="attribute">age</span>: Int?)</span><br><span class="line">    <span class="selector-tag">case</span> <span class="selector-tag">animal</span>(<span class="attribute">name</span>: String, <span class="attribute">age</span>: Int?)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">check</span>(_ <span class="attribute">life</span>: Life) &#123;</span><br><span class="line">    <span class="selector-tag">switch</span> <span class="selector-tag">life</span> &#123;</span><br><span class="line">    <span class="selector-tag">case</span> <span class="selector-class">.human</span>(let name, _ ):</span><br><span class="line">        <span class="selector-tag">print</span>(<span class="string">"human"</span>, name)</span><br><span class="line">    <span class="selector-tag">case</span> <span class="selector-class">.animal</span>(let name, _?):</span><br><span class="line">        <span class="selector-tag">print</span>(<span class="string">"animal"</span>, name)</span><br><span class="line">    <span class="selector-tag">default</span>:</span><br><span class="line">        <span class="selector-tag">print</span>(<span class="string">"other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">check</span>(.human(<span class="attribute">name</span>: <span class="string">"Rose"</span>, <span class="attribute">age</span>: <span class="number">20</span>)) <span class="comment">//human Rose</span></span><br><span class="line"><span class="selector-tag">check</span>(.human(<span class="attribute">name</span>: <span class="string">"Jack"</span>, <span class="attribute">age</span>: nil))<span class="comment">//human Jack</span></span><br><span class="line"><span class="selector-tag">check</span>(.animal(<span class="attribute">name</span>: <span class="string">"Dog"</span>, <span class="attribute">age</span>: <span class="number">5</span>))  <span class="comment">//animal Dog</span></span><br><span class="line"><span class="selector-tag">check</span>(.animal(<span class="attribute">name</span>: <span class="string">"Cat"</span>, <span class="attribute">age</span>: nil))<span class="comment">//other</span></span><br></pre></td></tr></table></figure><p>_ 匹配任何值。_? 匹配非nil值</p><h5 id="三-标识符模式"><a href="#三-标识符模式" class="headerlink" title="三 标识符模式"></a>三 标识符模式</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="attr">age</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span> = <span class="string">"jack"</span></span><br></pre></td></tr></table></figure><p>给对应的变量,常量名赋值</p><h5 id="四-值绑定模式"><a href="#四-值绑定模式" class="headerlink" title="四 值绑定模式"></a>四 值绑定模式</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">point</span> = (<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">point</span> &#123;</span><br><span class="line"><span class="keyword">case</span> let(x, y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The point is at (\(x),\(y))."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> let(x, y), 绑定switch point里面的值</p><h5 id="五-元组模式"><a href="#五-元组模式" class="headerlink" title="五 元组模式"></a>五 元组模式</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let points = [(<span class="number">0</span>,<span class="number">0</span>), (<span class="number">1</span>,<span class="number">0</span>), (<span class="number">2</span>,<span class="number">0</span>)]</span><br><span class="line">for (x, _) in points &#123;</span><br><span class="line">    print(x)  <span class="comment">// 0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="type">String?</span> = <span class="string">"jack"</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> info:<span class="type">Any</span> = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">switch</span> (name, age, info) &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">_</span>?, <span class="number">_</span>, <span class="number">_</span> <span class="keyword">as</span> <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"case"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"default"</span>)</span><br><span class="line">&#125; <span class="comment">//default</span></span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">scores </span>= [<span class="string">"jack"</span> : <span class="number">98</span>,<span class="string">"rose"</span> : <span class="number">100</span>, <span class="string">"kate"</span> : <span class="number">86</span>]</span><br><span class="line">for (name,<span class="keyword">score) </span>in <span class="keyword">scores </span>&#123;</span><br><span class="line">    print(name,<span class="keyword">score)</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="六-枚举Case模式"><a href="#六-枚举Case模式" class="headerlink" title="六 枚举Case模式"></a>六 枚举Case模式</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//原来的写法</span></span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">9</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[0,9]"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举Case模式</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">case</span> <span class="number">0</span>...<span class="number">9</span> = age &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[0,9]"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">case</span> <span class="number">0</span>...<span class="number">9</span> = age <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"[0,9]"</span>)</span><br><span class="line">    <span class="comment">//等价于下面</span></span><br><span class="line">    <span class="keyword">switch</span> age &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>...<span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[0,9]"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">//[0,9]</span></span><br><span class="line"><span class="comment">//[0,9]</span></span><br><span class="line"><span class="comment">//[0,9]</span></span><br><span class="line"><span class="comment">//[0,9]</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ages:[<span class="type">Int?</span>] = [<span class="number">2</span>,<span class="number">3</span>,<span class="literal">nil</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="literal">nil</span> <span class="keyword">in</span> ages &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"有nil值"</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125; <span class="comment">//有nil值</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let ponits = [(<span class="number">1</span>,<span class="number">0</span>), (<span class="number">2</span>,<span class="number">1</span>), (<span class="number">3</span>,<span class="number">0</span>)]</span><br><span class="line">for case let (x,<span class="number">0</span>) in ponits &#123;</span><br><span class="line">    print(x)</span><br><span class="line">&#125; <span class="comment">// 1 3</span></span><br></pre></td></tr></table></figure><h5 id="七-可选模式"><a href="#七-可选模式" class="headerlink" title="七 可选模式"></a>七 可选模式</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="type">Int?</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> .some(<span class="keyword">let</span> x) = age &#123; <span class="built_in">print</span>(x)&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span>  x? = age &#123;<span class="built_in">print</span>(x)&#125;</span><br></pre></td></tr></table></figure><p>age不为空时打印它</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ages:[<span class="type">Int?</span>] = [<span class="literal">nil</span>, <span class="number">2</span> ,<span class="number">3</span>,<span class="literal">nil</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> age? <span class="keyword">in</span> ages &#123;</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ages &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> age = item &#123;</span><br><span class="line">        <span class="built_in">print</span>(age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把数组不为空的元素打印出来</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(<span class="number">_</span> num:Int?)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">switch</span> num &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>?:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"2"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>?:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"4"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>?:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"6"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">_</span>?:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"nil"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">_</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">check(<span class="number">4</span>)</span><br><span class="line">check(<span class="number">8</span>)</span><br><span class="line">check(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>?指定值非空</p><h5 id="八-类型转换模式"><a href="#八-类型转换模式" class="headerlink" title="八 类型转换模式"></a>八 类型转换模式</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">num</span>: Any = <span class="number">6</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">num</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">is</span> Int:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"is Int"</span>, <span class="built_in">num</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">num</span>: Any = <span class="number">6</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">num</span> &#123;</span><br><span class="line"><span class="keyword">case</span> let n <span class="keyword">as</span>  Int:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"is Int"</span>, <span class="built_in">num</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然都会打印is Int 6, 但是is 和as还是不一样的,as 后n 是int ,num类型始终是Any</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span>  &#123;</span><br><span class="line">        <span class="built_in">print</span>(type(of: <span class="keyword">self</span>), <span class="string">"eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span>  &#123;</span><br><span class="line">        <span class="built_in">print</span>(type(of: <span class="keyword">self</span>), <span class="string">"run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :<span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">()</span></span>  &#123;</span><br><span class="line">        <span class="built_in">print</span>(type(of: <span class="keyword">self</span>),<span class="string">"jump"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chech</span><span class="params">(<span class="number">_</span> animal:Animal)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">switch</span> animal &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> dog <span class="keyword">as</span> <span class="type">Dog</span>:</span><br><span class="line">        dog.eat()</span><br><span class="line">        dog.run()</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">Cat</span>:</span><br><span class="line">        animal.eat()</span><br><span class="line"><span class="comment">//        animal.jump()/无法调用 会报错</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="九-表达式模式"><a href="#九-表达式模式" class="headerlink" title="九 表达式模式"></a>九 表达式模式</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">point</span> = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">point</span> &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"(0, 0) is at the origin."</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">-2.</span>.<span class="number">.2</span>, <span class="number">-2.</span>.<span class="number">.2</span>):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"(\(point.0), \(point.1)) is near the origin."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"The point is at (\(point.0), \(point.1))."</span>)</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// (1, 2) is near the origin.</span></span><br></pre></td></tr></table></figure><p>判断一个点是否在矩形框内, 其实是调用的~=表达式, 并不是所有的都会调用~=表达式,复杂的会,简单的不会</p><h5 id="十-自定义表达式模式"><a href="#十-自定义表达式模式" class="headerlink" title="十 自定义表达式模式"></a>十 自定义表达式模式</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> score = <span class="number">0</span>, name = <span class="string">""</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ~= <span class="params">(pattern: Int, value:Student)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        value.score &gt;= pattern</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ~= <span class="params">(pattern:ClosedRange&lt;Int&gt;, value:Student)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        pattern.<span class="built_in">contains</span>(value.score)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ~= <span class="params">(pattern: Range&lt;Int&gt;, value: Student)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        pattern.<span class="built_in">contains</span>(value.score)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="type">Student</span>(score: <span class="number">75</span>, name: <span class="string">"Jack"</span>)</span><br><span class="line"><span class="keyword">switch</span> stu &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt;= 100"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt;= 90"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">80</span> ..&lt; <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[80, 90]"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">60</span> ... <span class="number">79</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[60,70]"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt;=0"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="number">60</span> = stu &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"&gt;=60"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过重载运算符,自定义表达式模式匹配规则,下面来个更复杂的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ~= <span class="params">(pattern:<span class="params">(String)</span></span></span> -&gt; <span class="type">Bool</span>, value:<span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        pattern(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasPrefix</span><span class="params">(<span class="number">_</span> <span class="keyword">prefix</span>: String)</span></span> -&gt; ((<span class="type">String</span>) -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line">   &#123; $<span class="number">0</span>.hasPrefix(<span class="keyword">prefix</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasSuffix</span><span class="params">(<span class="number">_</span> <span class="keyword">prefix</span>: String)</span></span> -&gt; ((<span class="type">String</span>) -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line">   &#123; $<span class="number">0</span>.hasSuffix(<span class="keyword">prefix</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"jack"</span></span><br><span class="line"><span class="keyword">switch</span> str &#123;</span><br><span class="line"><span class="keyword">case</span> hasPrefix(<span class="string">"j"</span>),hasSuffix(<span class="string">"k"</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"以j开头,以k结尾"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125; <span class="comment">//以j开头,以k结尾</span></span><br></pre></td></tr></table></figure><h5 id="十一-where"><a href="#十一-where" class="headerlink" title="十一 where"></a>十一 where</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = (<span class="number">10</span>, <span class="string">"Jack"</span>)</span><br><span class="line"><span class="keyword">switch</span> data &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (age, <span class="number">_</span>) <span class="keyword">where</span> age &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(data.<span class="number">1</span>, <span class="string">"age&gt;10"</span>) <span class="keyword">case</span> <span class="keyword">let</span> (age, <span class="number">_</span>) <span class="keyword">where</span> age &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(data.<span class="number">1</span>, <span class="string">"age&gt;0"</span>) <span class="keyword">default</span>: <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Stackable</span> </span>&#123; <span class="keyword">associatedtype</span> <span class="type">Element</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line"><span class="keyword">associatedtype</span> <span class="type">Stack</span> : <span class="type">Stackable</span> <span class="keyword">where</span> <span class="type">Stack</span>.<span class="type">Element</span> : <span class="type">Equatable</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">44</span>, <span class="number">23</span>, <span class="number">55</span>]</span><br><span class="line"><span class="keyword">for</span> age <span class="keyword">in</span> ages <span class="keyword">where</span> age &gt; <span class="number">30</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">&#125; <span class="comment">// 44 55</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">equal</span>&lt;S1: Stackable, S2: Stackable&gt;<span class="params">(<span class="number">_</span> s1: S1, <span class="number">_</span> s2: S2)</span></span> -&gt; <span class="type">Bool</span> <span class="keyword">where</span> <span class="type">S1</span>.<span class="type">Element</span> == <span class="type">S2</span>.<span class="type">Element</span>, <span class="type">S1</span>.<span class="type">Element</span> : <span class="type">Hashable</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Container</span> <span class="title">where</span> <span class="title">Self</span>.<span class="title">Stack</span>.<span class="title">Element</span> : <span class="title">Hashable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>可以使用where为模式匹配添加匹配条件</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-模式定义&quot;&gt;&lt;a href=&quot;#一-模式定义&quot; class=&quot;headerlink&quot; title=&quot;一 模式定义&quot;&gt;&lt;/a&gt;一 模式定义&lt;/h5&gt;&lt;p&gt;模式是用于匹配的规则,比如switch的case, 捕捉错误的catch, if\guard\while\for语句的条件等,swift中的模式有&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;通配符模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标识符模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;值绑定模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元组模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;枚举Case模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可选模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类型转换模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表达式模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面让我们一一讲解这些模式&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 字面量</title>
    <link href="http://example.com/2019/12/07/swift-%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    <id>http://example.com/2019/12/07/swift-字面量/</id>
    <published>2019-12-07T05:53:23.000Z</published>
    <updated>2021-01-01T10:50:30.570Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-字面量"><a href="#一-字面量" class="headerlink" title="一 字面量"></a>一 字面量</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> isBlue = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Lisa"</span></span><br></pre></td></tr></table></figure><p>上面的代码中的10,false,“Jack”就是字面量,那字面量它们都是属于什么类型呢,请接着往下看</p><h5 id="二-字面量类型"><a href="#二-字面量类型" class="headerlink" title="二 字面量类型"></a>二 字面量类型</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> Float32 = <span class="built_in">Float</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> Float64 = <span class="built_in">Double</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> IntegerLiteralType = <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> FloatLiteralType = <span class="built_in">Double</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> BooleanLiteralType = Bool</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> StringLiteralType = String</span><br></pre></td></tr></table></figure><p>swift 自带的绝大部分类型,都支持直接通过字面量进行初始化,比如: Bool, Int, Float, Double,String,Array, Dictionary,Set,Optional等, 我们可以通过typealias修改字面量的默认类型<br><a id="more"></a><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> FoatLiteraltype = <span class="built_in">Float</span></span><br><span class="line"><span class="keyword">typealias</span> IntegerLiteralType = UInt8</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> isBlue = <span class="literal">false</span></span><br><span class="line">print(type(of: age)) <span class="comment">//UInt8</span></span><br></pre></td></tr></table></figure></p><p>swift自带的类型为什么能够通过字面量进行初始化呢,那是因为它们遵守了对应的协议</p><h5 id="三-字面量协议"><a href="#三-字面量协议" class="headerlink" title="三 字面量协议"></a>三 字面量协议</h5><ol><li>Bool : ExpressibleByBooleanLiteral</li><li>Int : ExpressibleByIntegerLiteral</li><li>Float, Double : ExpressibleByIntegerLiteral, ExpressibleByFloatLiteral</li><li>Dictionary : ExpressibleByDictionaryLiteral</li><li>String : ExpressibleByStringLiteral</li><li>Array, Set : ExpressiblebyArrayLiteral</li><li>Option : ExpressibleByNilLiteral</li></ol><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b: <span class="keyword">Bool</span> = <span class="keyword">false</span> <span class="comment">// ExpressibleByBooleanLiteral</span></span><br><span class="line"><span class="keyword">var</span> i: <span class="keyword">Int</span> = <span class="number">10</span> <span class="comment">// ExpressibleByIntegerLiteral</span></span><br><span class="line"><span class="keyword">var</span> f0: <span class="keyword">Float</span> = <span class="number">10</span> <span class="comment">// ExpressibleByIntegerLiteral</span></span><br><span class="line"><span class="keyword">var</span> f1: <span class="keyword">Float</span> = <span class="number">10.0</span> <span class="comment">// ExpressibleByFloatLiteral</span></span><br><span class="line"><span class="keyword">var</span> d0: <span class="keyword">Double</span> = <span class="number">10</span> <span class="comment">// ExpressibleByIntegerLiteral</span></span><br><span class="line"><span class="keyword">var</span> d1: <span class="keyword">Double</span> = <span class="number">10.0</span> <span class="comment">// ExpressibleByFloatLiteral</span></span><br><span class="line"><span class="keyword">var</span> s: String = <span class="string">"jack"</span> <span class="comment">// ExpressibleByStringLiteral</span></span><br><span class="line"><span class="keyword">var</span> arr: <span class="keyword">Array</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// ExpressibleByArrayLiteral</span></span><br><span class="line"><span class="keyword">var</span> set: Set = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// ExpressibleByArrayLiteral</span></span><br><span class="line"><span class="keyword">var</span> dict: Dictionary = [<span class="string">"jack"</span> : <span class="number">60</span>] <span class="comment">// ExpressibleByDictionaryLiteral</span></span><br><span class="line"><span class="keyword">var</span> o: Optional&lt;<span class="keyword">Int</span>&gt; = nil <span class="comment">// ExpressibleByNilLiteral</span></span><br><span class="line">```  </span><br><span class="line">那么我们了解了相关类型遵守的协议,那么实际开发中有什么用呢,我们接着看</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 四 字面量协议的应用</span></span><br></pre></td></tr></table></figure><p>extension Int : ExpressibleByBooleanLiteral {<br>    public init(booleanLiteral value:Bool) {<br>        self = value ? 1 : 0<br>    }<br>}<br>var sexman:Int = true<br>print(sexman)<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开发中对于性别 男女,我们经常用<span class="number">0</span>,<span class="number">1</span>表示,那判断是不是男的呢,要么返回<span class="literal">true</span>,要么返回<span class="literal">false</span>,假如判断是个男的,即<span class="literal">true</span>,写入到数据库就是<span class="number">1</span> 如上.</span><br></pre></td></tr></table></figure></p><p>class Student: ExpressibleByIntegerLiteral,ExpressibleByFloatLiteral,ExpressibleByStringLiteral,CustomStringConvertible {<br>    var name:String = “”<br>    var score:Double = 0<br>    required init(floatLiteral value: Double) {<br>        self.score = value<br>    }<br>    required init(integerLiteral value: Int) {<br>        self.score = Double(value)<br>    }<br>    required init(stringLiteral value: String) {<br>        self.name = value<br>    }<br>    required init(unicodeScalarLiteral value: String) {<br>        self.name = value<br>    }<br>    required init(extendedGraphemeClusterLiteral value: String) {<br>        self.name = value<br>    }<br>    var description: String{<br>        “name=(name),score=(score)”<br>    }<br>}<br>var stu:Student = 90<br>print(stu)<br>stu = 98<br>stu = “Jack”<br>print(stu)<br>//name=,score=90.0<br>//name=Jack,score=0.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象实现协议的初始化器</span><br></pre></td></tr></table></figure></p><p>struct Point {<br>    var x = 0.0, y = 0.0<br>}<br>extension Point : ExpressibleByArrayLiteral,ExpressibleByDictionaryLiteral {<br>    init(arrayLiteral elements: Double…) {<br>        guard elements.count &gt; 0 else {<br>            return<br>        }<br>        self.x = elements[0]<br>        guard elements.count &gt; 1 else {<br>            return<br>        }<br>        self.y = elements[1]<br>    }<br>    init(dictionaryLiteral elements: (String, Double)…) {<br>        for (k, v) in elements {<br>            if k == “x” {<br>                self.x = v<br>            }<br>            else if k == “y” {<br>                self.y = v<br>            }<br>        }<br>    }<br>}</p><p>var p: Point=[10.5, 20.5]<br>print(p)<br>p = [“x”: 11, “y”:22]<br>print(p)<br>//Point(x: 10.5, y: 20.5)<br>//Point(x: 11.0, y: 22.0)</p><p><code>`</code><br>数组,字典字面量协议的应用</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-字面量&quot;&gt;&lt;a href=&quot;#一-字面量&quot; class=&quot;headerlink&quot; title=&quot;一 字面量&quot;&gt;&lt;/a&gt;一 字面量&lt;/h5&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isBlue = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;Lisa&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码中的10,false,“Jack”就是字面量,那字面量它们都是属于什么类型呢,请接着往下看&lt;/p&gt;
&lt;h5 id=&quot;二-字面量类型&quot;&gt;&lt;a href=&quot;#二-字面量类型&quot; class=&quot;headerlink&quot; title=&quot;二 字面量类型&quot;&gt;&lt;/a&gt;二 字面量类型&lt;/h5&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; Float32 = &lt;span class=&quot;built_in&quot;&gt;Float&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; Float64 = &lt;span class=&quot;built_in&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; IntegerLiteralType = &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; FloatLiteralType = &lt;span class=&quot;built_in&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; BooleanLiteralType = Bool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; StringLiteralType = String&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;swift 自带的绝大部分类型,都支持直接通过字面量进行初始化,比如: Bool, Int, Float, Double,String,Array, Dictionary,Set,Optional等, 我们可以通过typealias修改字面量的默认类型&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 指针</title>
    <link href="http://example.com/2019/12/05/swift-%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2019/12/05/swift-指针/</id>
    <published>2019-12-05T13:37:34.000Z</published>
    <updated>2020-12-27T12:54:28.059Z</updated>
    
    <content type="html"><![CDATA[<p>swift中也有专门的指针类型,这些都被定性为“unsafe”(不安全的),常见的有以下4种类型:</p><ol><li>UnsafePointer<pointee>类似于const Pointee *</pointee></li><li>UnsafeMutablePointer<pointee> 类似于Pointee *</pointee></li><li>UnsafeRawPointer类似于 const void *</li><li>UnsafeMutableRawPointer 类似于void *</li></ol><p>下面我们一一讲解这四种类型</p><h5 id="一-UnsafePointer"><a href="#一-UnsafePointer" class="headerlink" title="一 UnsafePointer"></a>一 UnsafePointer<pointee></pointee></h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="number">_</span> ptr: UnsafePointer&lt;Int&gt;)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"变量地址:"</span>, ptr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"变量存放的内容:"</span>,ptr.pointee)</span><br><span class="line">&#125;</span><br><span class="line">test(&amp;age)</span><br><span class="line"><span class="comment">//变量地址: 0x0000000100002048</span></span><br><span class="line"><span class="comment">//变量存放的内容: 10</span></span><br></pre></td></tr></table></figure><p>UnsafePointer只用来去访问内存,支持泛型,不可以去修改内存,对于一个变量它指向的是变量的内存地址</p><h5 id="二-UnsafeMutablePointer"><a href="#二-UnsafeMutablePointer" class="headerlink" title="二 UnsafeMutablePointer"></a>二 UnsafeMutablePointer</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> age = <span class="number">10</span></span><br><span class="line">func test(_ ptr: UnsafeMutablePointer&lt;Int&gt;) &#123;</span><br><span class="line">    print(<span class="string">"变量地址:"</span>, ptr)</span><br><span class="line">    print(<span class="string">"变量存放的内容:"</span>,ptr.pointee)</span><br><span class="line">    ptr<span class="selector-class">.pointee</span> = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(&amp;age)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(age)</span></span></span><br><span class="line"><span class="comment">//变量地址: 0x0000000100002048</span></span><br><span class="line"><span class="comment">//变量存放的内容: 10</span></span><br><span class="line"><span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>UnsafePointer用来去访问内存,支持泛型,可以去修改内存,对于一个变量它指向的是变量的内存地址<br><a id="more"></a></p><h5 id="三-UnsafeRawPointer"><a href="#三-UnsafeRawPointer" class="headerlink" title="三 UnsafeRawPointer"></a>三 UnsafeRawPointer</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="number">_</span> ptr: UnsafeRawPointer)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"变量地址:"</span>, ptr)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"变量存放的内容:"</span>,ptr.load(<span class="keyword">as</span>: <span class="type">Int</span>.<span class="keyword">self</span>))</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">test(&amp;age)</span><br><span class="line"><span class="comment">//变量地址: 0x0000000100002040</span></span><br><span class="line"><span class="comment">//变量存放的内容: 10</span></span><br></pre></td></tr></table></figure><p> UnsafeRawPointer用来去访问内存,不支持泛型,不可以去修改内存,对于一个变量它指向的是变量的内存地址</p><h5 id="四-UnsafeMutableRawPointer"><a href="#四-UnsafeMutableRawPointer" class="headerlink" title="四 UnsafeMutableRawPointer"></a>四 UnsafeMutableRawPointer</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="number">_</span> ptr: UnsafeMutableRawPointer)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"变量地址:"</span>, ptr)</span><br><span class="line">    </span><br><span class="line">    ptr.storeBytes(of: <span class="number">30</span>, <span class="keyword">as</span>: <span class="type">Int</span>.<span class="keyword">self</span>)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">test(&amp;age)</span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"><span class="comment">//变量地址: 0x0000000100002040</span></span><br><span class="line"><span class="comment">//30</span></span><br></pre></td></tr></table></figure><p>UnsafeMutableRawPointer用来去访问内存,不支持泛型,可以去修改内存,对于一个变量它指向的是变量的内存地址</p><h5 id="五-指针的使用场景"><a href="#五-指针的使用场景" class="headerlink" title="五 指针的使用场景"></a>五 指针的使用场景</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line">var arr = NSArray(objects: <span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>)</span><br><span class="line">arr.enumerateObjects &#123; (obj,idx , <span class="built_in">stop</span>) in</span><br><span class="line">    <span class="built_in">print</span>(idx, obj)</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">2</span> &#123; <span class="comment">//下标为2就停止遍历</span></span><br><span class="line">        <span class="built_in">stop</span>.pointee = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例是一个遍历OC的数组的实例,对于数组遍历还有更简便的方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="type">NSArray</span>(objects: <span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>)</span><br><span class="line"><span class="keyword">for</span> (idx, obj) <span class="keyword">in</span> arr.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(idx, obj)</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="六-获得指向某个变量的指针"><a href="#六-获得指向某个变量的指针" class="headerlink" title="六 获得指向某个变量的指针"></a>六 获得指向某个变量的指针</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> ptr1 = withUnsafeMutablePointer<span class="function"><span class="params">(<span class="keyword">to</span>: &amp;age)</span> &#123; <span class="params">(ptr)</span> -&gt;</span> UnsafeMutablePointer&lt;Int&gt;  <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> ptr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ptr2 = withUnsafePointer(to: &amp;age)&#123;</span><br><span class="line">    $<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">ptr1.pointee = <span class="number">22</span></span><br></pre></td></tr></table></figure><p>withUnsafeMutablePointer获取可修改的指针, withUnsafePointer获取不可修改的指针,这里返回的都是泛型的指针变量,那如何返回不是泛型的呢?</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> ptr1 = <span class="built_in">withUnsafeMutablePointer</span>(to: &amp;age) &#123;</span><br><span class="line">    <span class="type">UnsafeMutableRawPointer</span>($<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ptr2 = <span class="built_in">withUnsafePointer</span>(to: &amp;age)&#123;</span><br><span class="line">    <span class="type">UnsafeRawPointer</span>($<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">ptr1.storeBytes(of: <span class="number">33</span>, <span class="keyword">as</span>: <span class="type">Int</span>.<span class="keyword">self</span>)</span><br><span class="line"><span class="built_in">print</span>(ptr2.load(<span class="keyword">as</span>: <span class="type">Int</span>.<span class="keyword">self</span>))</span><br></pre></td></tr></table></figure><p>上面的方法获取的是UnsafeMutableRawPointer, UnsafeRawPointer类型的</p><h5 id="七-获得指向堆空间实例的指针"><a href="#七-获得指向堆空间实例的指针" class="headerlink" title="七  获得指向堆空间实例的指针"></a>七  获得指向堆空间实例的指针</h5><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="keyword">Int</span></span><br><span class="line">    init(age: <span class="keyword">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person(age: <span class="number">21</span>)</span><br><span class="line"><span class="keyword">var</span> ptr = withUnsafePointer(to: &amp;person)&#123;  UnsafeRawPointer($<span class="number">0</span>)&#125;</span><br><span class="line"><span class="keyword">var</span> heapPtr = UnsafeRawPointer(bitPattern: ptr.load(<span class="keyword">as</span>: <span class="keyword">UInt</span>.<span class="keyword">self</span>))</span><br><span class="line"><span class="keyword">print</span>(heapPtr)</span><br><span class="line"><span class="keyword">print</span>(ptr)</span><br></pre></td></tr></table></figure><h5 id="八-自定义指针"><a href="#八-自定义指针" class="headerlink" title="八 自定义指针"></a>八 自定义指针</h5><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr = malloc(<span class="number">16</span>)</span><br><span class="line"><span class="comment">//存</span></span><br><span class="line">ptr?.storeBytes(of: <span class="number">11</span>, <span class="keyword">as</span>: <span class="keyword">Int</span>.<span class="keyword">self</span>)</span><br><span class="line">ptr?.storeBytes(of: <span class="number">22</span>, toByteOffset: <span class="number">8</span>, <span class="keyword">as</span>: <span class="keyword">Int</span>.<span class="keyword">self</span>)</span><br><span class="line"><span class="comment">//取</span></span><br><span class="line"><span class="keyword">print</span>((ptr?.load(<span class="keyword">as</span>: <span class="keyword">Int</span>.<span class="keyword">self</span>))!) <span class="comment">//11</span></span><br><span class="line"><span class="keyword">print</span>((ptr?.load(fromByteOffset: <span class="number">8</span>, <span class="keyword">as</span>: <span class="keyword">Int</span>.<span class="keyword">self</span>))!) <span class="comment">//22</span></span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">free(ptr)</span><br></pre></td></tr></table></figure><p>我们可以创建一个指针进行存值和取值,下面我们看一下如何创建UnsafeMutableRawPointer,这种不带泛型可修改的指针</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr = UnsafeMutableRawPointer.allocate(byteCount: <span class="number">16</span>, alignment: <span class="number">1</span>)</span><br><span class="line">ptr.storeBytes(of: <span class="number">11</span>, <span class="keyword">as</span>: <span class="keyword">Int</span>.<span class="keyword">self</span>)</span><br><span class="line">ptr.advanced(by: <span class="number">8</span>).storeBytes(of: <span class="number">22</span>, <span class="keyword">as</span>: <span class="keyword">Int</span>.<span class="keyword">self</span>)</span><br><span class="line"><span class="keyword">print</span>(ptr.load(<span class="keyword">as</span>: <span class="keyword">Int</span>.<span class="keyword">self</span>)) <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">print</span>(ptr.advanced(by: <span class="number">8</span>).load(<span class="keyword">as</span>: <span class="keyword">Int</span>.<span class="keyword">self</span>)) <span class="comment">//22  ptr.advanced指针移动多少位置</span></span><br><span class="line">ptr.deallocate()</span><br></pre></td></tr></table></figure><p>那么如何定义一个泛型的可修改指针呢,请看下面👇</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> ptr = UnsafeMutablePointer&lt;Int&gt;.allocate(capacity: <span class="number">3</span>)</span><br><span class="line"><span class="comment">//存</span></span><br><span class="line">ptr.initialize(to: <span class="number">11</span>)</span><br><span class="line">ptr.successor().initialize(to: <span class="number">22</span>)</span><br><span class="line">ptr.successor().successor().initialize(to: <span class="number">33</span>) <span class="comment">//successor后继指针</span></span><br><span class="line"><span class="comment">// 取</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(ptr.pointee)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">((ptr + <span class="number">1</span>)</span></span>.pointee)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">((ptr + <span class="number">2</span>)</span></span>.pointee)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种取的c方式</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(ptr[<span class="number">0</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(ptr[<span class="number">1</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(ptr[<span class="number">2</span>])</span></span></span><br><span class="line"></span><br><span class="line">ptr.deinitialize(count: <span class="number">3</span>) <span class="comment">//调用反初始化器</span></span><br><span class="line">ptr.deallocate()</span><br></pre></td></tr></table></figure><h5 id="九-指针之间的转换"><a href="#九-指针之间的转换" class="headerlink" title="九 指针之间的转换"></a>九 指针之间的转换</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">ptr</span> = UnsafeMutableRawPointer.allocate(byteCoun<span class="variable">t:</span> <span class="number">16</span>, alignmen<span class="variable">t:</span> <span class="number">1</span>)</span><br><span class="line"><span class="keyword">ptr</span>.assumingMemoryBound(<span class="keyword">to</span>: Int.self).pointee = <span class="number">11</span></span><br><span class="line">(<span class="keyword">ptr</span> + <span class="number">8</span>).assumingMemoryBound(<span class="keyword">to</span>: Double.self).pointee = <span class="number">22.0</span></span><br><span class="line"><span class="keyword">print</span>(unsafeBitCast(<span class="keyword">ptr</span>, <span class="keyword">to</span>: UnsafePointer<span class="symbol">&lt;Int&gt;</span>.self).pointee) //<span class="number">11</span></span><br><span class="line"><span class="keyword">print</span>(unsafeBitCast(<span class="keyword">ptr</span> + <span class="number">8</span>, <span class="keyword">to</span>: UnsafePointer<span class="symbol">&lt;Double&gt;</span>.self).pointee)//<span class="number">22.0</span></span><br><span class="line"><span class="keyword">ptr</span>.deallocate()</span><br></pre></td></tr></table></figure><p>unsafeBitCast是忽略数据类型的强制转换,不会因为数据类型的变化而改变原来的内存数据</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;swift中也有专门的指针类型,这些都被定性为“unsafe”(不安全的),常见的有以下4种类型:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UnsafePointer&lt;pointee&gt;类似于const Pointee *&lt;/pointee&gt;&lt;/li&gt;
&lt;li&gt;UnsafeMutablePointer&lt;pointee&gt; 类似于Pointee *&lt;/pointee&gt;&lt;/li&gt;
&lt;li&gt;UnsafeRawPointer类似于 const void *&lt;/li&gt;
&lt;li&gt;UnsafeMutableRawPointer 类似于void *&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面我们一一讲解这四种类型&lt;/p&gt;
&lt;h5 id=&quot;一-UnsafePointer&quot;&gt;&lt;a href=&quot;#一-UnsafePointer&quot; class=&quot;headerlink&quot; title=&quot;一 UnsafePointer&quot;&gt;&lt;/a&gt;一 UnsafePointer&lt;pointee&gt;&lt;/pointee&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; ptr: UnsafePointer&amp;lt;Int&amp;gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;变量地址:&quot;&lt;/span&gt;, ptr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;变量存放的内容:&quot;&lt;/span&gt;,ptr.pointee)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&amp;amp;age)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//变量地址: 0x0000000100002048&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//变量存放的内容: 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;UnsafePointer只用来去访问内存,支持泛型,不可以去修改内存,对于一个变量它指向的是变量的内存地址&lt;/p&gt;
&lt;h5 id=&quot;二-UnsafeMutablePointer&quot;&gt;&lt;a href=&quot;#二-UnsafeMutablePointer&quot; class=&quot;headerlink&quot; title=&quot;二 UnsafeMutablePointer&quot;&gt;&lt;/a&gt;二 UnsafeMutablePointer&lt;/h5&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func test(_ ptr: UnsafeMutablePointer&amp;lt;Int&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;变量地址:&quot;&lt;/span&gt;, ptr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;变量存放的内容:&quot;&lt;/span&gt;,ptr.pointee)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ptr&lt;span class=&quot;selector-class&quot;&gt;.pointee&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;age)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(age)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//变量地址: 0x0000000100002048&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//变量存放的内容: 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;UnsafePointer用来去访问内存,支持泛型,可以去修改内存,对于一个变量它指向的是变量的内存地址&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 内存管理</title>
    <link href="http://example.com/2019/12/01/swift-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2019/12/01/swift-内存管理/</id>
    <published>2019-12-01T13:24:45.000Z</published>
    <updated>2020-12-26T13:36:54.046Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-内存管理概览"><a href="#一-内存管理概览" class="headerlink" title="一 内存管理概览"></a>一 内存管理概览</h5><p>跟OC一样,Swift 也是采用基于引用计数的ARC内存管理方案,这里讲的都是针对堆空间, Swift的ARC中有3种引用</p><p>1  强引用(strong reference): 默认情况下,引用都是强引用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    deinit &#123;</span><br><span class="line">        print(<span class="string">"Person deinit"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">func test() &#123;</span><br><span class="line">    let <span class="selector-tag">p</span> = Person() <span class="comment">//强引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">2</span>)</span></span></span><br></pre></td></tr></table></figure><p>2 弱引用(weak refernce): 通过weak定义弱引用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Person deinit"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> p:<span class="type">Person?</span> = <span class="type">Person</span>() <span class="comment">//强引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>必须是可选类型的var,因为实例销毁后,ARC会自动将弱引用设置为nil,此外ARC自动给弱引用设置nil时,不会触发属性观察器<br><a id="more"></a><br>3 无主引用(unowned reference): 通过unowned定义无主引用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Person deinit"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">unowned</span> <span class="keyword">let</span> p:<span class="type">Person</span> = <span class="type">Person</span>() <span class="comment">//强引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>不会产生强引用,实例销毁后任然存储着实例的内存地址(类似于OC的unsafe_unretained) ,如果在实例销毁后访问无主引用,会产生运行时错误❌</p><h5 id="weak-unowend的使用限制"><a href="#weak-unowend的使用限制" class="headerlink" title="weak ,unowend的使用限制"></a>weak ,unowend的使用限制</h5><p>weak ,unowend只能用在类实例上面</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Liveable</span> : <span class="title">AnyObject</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">weak</span> <span class="keyword">var</span> p0:<span class="type">Person?</span> = <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">weak</span> <span class="keyword">var</span> p1:<span class="type">AnyObject?</span></span><br><span class="line"><span class="keyword">weak</span> <span class="keyword">var</span> p2:<span class="type">Liveable?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unowned</span> <span class="keyword">var</span> p3:<span class="type">Person</span> = <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">unowned</span> <span class="keyword">var</span> p4:<span class="type">AnyObject?</span></span><br><span class="line"><span class="keyword">unowned</span> <span class="keyword">var</span> p5:<span class="type">Liveable?</span></span><br></pre></td></tr></table></figure><p>以上这些都要求时类的实例,AnyObject是任何类的实例.</p><h5 id="二-自动释放池"><a href="#二-自动释放池" class="headerlink" title="二 自动释放池"></a>二 自动释放池</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Liveable</span> : <span class="title">AnyObject</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">autoreleasepool &#123;</span><br><span class="line">    <span class="keyword">for</span>  i <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="number">10000</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="type">Person</span>()</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x1000017b8</span> &lt;+<span class="number">8</span>&gt;:  subq   $0x40, %rsp</span><br><span class="line"><span class="number">0x1000017bc</span> &lt;+<span class="number">12</span>&gt;: xorl   %ecx, %ecx</span><br><span class="line"><span class="number">0x1000017be</span> &lt;+<span class="number">14</span>&gt;: movl   %ecx, %r12d</span><br><span class="line"><span class="number">0x1000017c1</span> &lt;+<span class="number">17</span>&gt;: leaq   <span class="number">0x98</span>(%rip), %rdx          ; closure #<span class="number">1</span> () -&gt; () <span class="keyword">in</span> swifttest.test() -&gt; () at main.swift:<span class="number">5</span> <span class="comment">// 闭包地址,就是循环生成person那一段内容</span></span><br><span class="line"><span class="number">0x1000017c8</span> &lt;+<span class="number">24</span>&gt;: movq   %rdx, <span class="number">-0x30</span>(%rbp)</span><br><span class="line"><span class="number">0x1000017cc</span> &lt;+<span class="number">28</span>&gt;: movq   $0x0, <span class="number">-0x28</span>(%rbp)</span><br><span class="line"><span class="number">0x1000017d4</span> &lt;+<span class="number">36</span>&gt;: movq   <span class="number">0x855</span>(%rip), %rdx         ; (void *)<span class="number">0x00007fff90b7a990</span>: type metadata <span class="keyword">for</span> ()</span><br><span class="line"><span class="number">0x1000017db</span> &lt;+<span class="number">43</span>&gt;: addq   $0x8, %rdx</span><br><span class="line"><span class="number">0x1000017df</span> &lt;+<span class="number">47</span>&gt;: leaq   <span class="number">0x36a</span>(%rip), %rdi         ; partial apply forwarder <span class="keyword">for</span> reabstraction thunk helper from @callee_guaranteed () -&gt; (@error @owned Swift.Error) to @escaping @callee_guaranteed () -&gt; (@out (), @error @owned Swift.Error) at &lt;compiler-generated&gt;</span><br><span class="line"><span class="number">0x1000017e6</span> &lt;+<span class="number">54</span>&gt;: leaq   <span class="number">-0x40</span>(%rbp), %rsi</span><br><span class="line"><span class="number">0x1000017ea</span> &lt;+<span class="number">58</span>&gt;: movq   %rax, <span class="number">-0x48</span>(%rbp)</span><br><span class="line"><span class="number">0x1000017ee</span> &lt;+<span class="number">62</span>&gt;: movq   %r8, %rax</span><br><span class="line"><span class="number">0x1000017f1</span> &lt;+<span class="number">65</span>&gt;: callq  <span class="number">0x100001d52</span>               ; symbol stub <span class="keyword">for</span>: ObjectiveC.autoreleasepool&lt;A&gt;(invoking: () throws -&gt; A) throws -&gt; A<span class="comment">//闭包传ObjectiveC.autoreleasepool&lt;A&gt; 方法里</span></span><br></pre></td></tr></table></figure><p>swift中也有自动释放池,用法跟OC中一样,其实底层还是调用的OC的自动释放池方法,</p><h5 id="三-循环引用"><a href="#三-循环引用" class="headerlink" title="三 循环引用"></a>三 循环引用</h5><p>weak, unowned 都能解决循环引用的问题,unowned要比weak勺一些性能消耗, 那什么情况下使用weak 什么情况下使用unowned呢?</p><ol><li>在声明周期中可能会变nil的使用weak</li><li>初始化赋值后再也不会变为nil的使用unowned</li></ol><p><img src="../assets/blogImg/neicungunli01.png" alt><br><img src="../assets/blogImg/neicunguanli02.png" alt><br><img src="../assets/blogImg/neicunguanli03.png" alt></p><h5 id="闭包的循环引用"><a href="#闭包的循环引用" class="headerlink" title="闭包的循环引用"></a>闭包的循环引用</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">var</span> fn:<span class="function"><span class="params">(()-&gt;())</span>?</span></span><br><span class="line"><span class="function">    <span class="title">func</span> <span class="title">run</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">"run"</span>)</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">deinit</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">"person deinit"</span>)</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">test</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">let</span> <span class="title">p</span> = <span class="title">Person</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">p</span>.<span class="title">fn</span> = &#123; <span class="title">p</span>.<span class="title">run</span><span class="params">()</span> &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>闭包表达式默认会对用到的外层对象产生额外的强引用(对外层队形进行了retain操作) 上面的p 有fn这个闭包存储属性,闭包里有调用了p的run方法,你中有我我中有你,p对象无法释放,那么该怎么办呢?</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">var</span> fn:<span class="function"><span class="params">(()-&gt;())</span>?</span></span><br><span class="line"><span class="function">    <span class="title">func</span> <span class="title">run</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">"run"</span>)</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">deinit</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">"person deinit"</span>)</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">test</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">let</span> <span class="title">p</span> = <span class="title">Person</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">p</span>.<span class="title">fn</span> = &#123;</span></span><br><span class="line"><span class="function">//        [<span class="title">weak</span> <span class="title">p</span>] <span class="title">in</span></span></span><br><span class="line"><span class="function">//        <span class="title">p</span>?.<span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        [<span class="title">unowned</span> <span class="title">p</span>] <span class="title">in</span></span></span><br><span class="line"><span class="function">        <span class="title">p</span>.<span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>在闭包表达式的补货列表表明weak或unowned引用,即可解决循环引用问题,关于闭包的循环引用问题还有以下一些注意事项⚠️</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    lazy <span class="keyword">var</span> fn:<span class="function"><span class="params">(()-&gt;())</span> = &#123;</span></span><br><span class="line"><span class="function">      [<span class="title">weak</span> <span class="title">self</span>] <span class="title">in</span></span></span><br><span class="line"><span class="function">        <span class="title">self</span>?.<span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="title">func</span> <span class="title">run</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">"run"</span>)</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="title">deinit</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">"person deinit"</span>)</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>如果想在定义闭包属性的同时引用self,这个闭包必须是lazy的,那是因为在实例初始化完毕之后才能引用self,参考类的两段式初始化,另外上面闭包fn内部如果用到了实例成员(属性,方法) 编译器会强制要求明确写出self,swift编译器这么做也是为了提醒你,这里可能会有循环引用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> getAge:<span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person deinit"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果lazy属性是闭包调用的结果,那么不用考虑循环引用问题,因为闭包调用后,闭包的生命周期就结束了</p><h5 id="四-内存访问冲突"><a href="#四-内存访问冲突" class="headerlink" title="四 内存访问冲突"></a>四 内存访问冲突</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> step = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increment</span><span class="params">(<span class="number">_</span> num: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">  num += step</span><br><span class="line">&#125;</span><br><span class="line">increment(&amp;step)<span class="comment">//imultaneous accesses to 0x100002020, but modification requires exclusive access</span></span><br></pre></td></tr></table></figure><p>上面这段代码虽然在其他语言中能正常运行,但是在swift中会报错,在swift里这里就会出现内存访问冲突, 内存访问冲突会在两个访问满足下列条件时发生:</p><ol><li>至少一个是写入操作</li><li>它们访问的是同一块内存</li><li>它们的访问重叠,比如在同一个函数内</li></ol><p>那么如何解决上面的访问冲突呢</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="keyword">step</span> = <span class="number">1</span></span><br><span class="line">func increment(<span class="symbol">_</span> <span class="built_in">num</span>: inout Int) &#123;</span><br><span class="line">  <span class="built_in">num</span> += <span class="keyword">step</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">var</span> copyOfStep = <span class="keyword">step</span></span><br><span class="line">increment(&amp;copyOfStep)</span><br><span class="line"><span class="keyword">step</span> = copyOfStep</span><br></pre></td></tr></table></figure><p>只要打断上面的3个条件其中之一即可,这里我们打断的是不让他们同时访问同一块内存.</p><p>下面我们再看几个内存访问冲突的示例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">balance</span><span class="params">(<span class="number">_</span> x:<span class="keyword">inout</span> Int, <span class="number">_</span> y: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = x + y</span><br><span class="line">    x = sum / <span class="number">2</span></span><br><span class="line">    y = sum - x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">30</span></span><br><span class="line">balance(&amp;num1, &amp;num2)</span><br><span class="line">balance(&amp;num1, &amp;num1)<span class="comment">//❌ Inout arguments are not allowed to alias each other</span></span><br></pre></td></tr></table></figure><p>编译器会直接报错y = sum - x 同一块内存读的同时又去写</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> energy: <span class="type">Int</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">balance</span><span class="params">(<span class="number">_</span> x:<span class="keyword">inout</span> Int, <span class="number">_</span> y: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = x + y</span><br><span class="line">        x = sum / <span class="number">2</span></span><br><span class="line">        y = sum - x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">shareHealth</span><span class="params">(with teammate: <span class="keyword">inout</span> Player)</span></span> &#123;</span><br><span class="line">        balance(&amp;teammate.health, &amp;health)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oscar = <span class="type">Player</span>(name: <span class="string">"Oscar"</span>, health: <span class="number">10</span>, energy: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> maria = <span class="type">Player</span>(name: <span class="string">"Maria"</span>, health: <span class="number">4</span>,energy: <span class="number">9</span>)</span><br><span class="line">oscar.shareHealth(with: &amp;maria)</span><br><span class="line">oscar.shareHealth(with: &amp;oscar)<span class="comment">//❌nout arguments are not allowed to alias each other</span></span><br></pre></td></tr></table></figure><p>这个也是同时访问同一块内存</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">balance</span><span class="params">(<span class="number">_</span> x:<span class="keyword">inout</span> Int, <span class="number">_</span> y: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = x + y</span><br><span class="line">    x = sum / <span class="number">2</span></span><br><span class="line">    y = sum - x</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> energy: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tulpe = (health: <span class="number">10</span>, energy:<span class="number">20</span>)</span><br><span class="line">balance(&amp;tulpe.health, &amp;tulpe.energy)<span class="comment">//❌ Simultaneous accesses to 0x100003040, but modification requires exclusive access.</span></span><br><span class="line"><span class="keyword">var</span> holly = <span class="type">Player</span>(name: <span class="string">"Holly"</span>, health: <span class="number">10</span>, energy: <span class="number">10</span>)</span><br><span class="line">balance(&amp;holly.health, &amp;holly.energyr)<span class="comment">//❌</span></span><br></pre></td></tr></table></figure><p>元组的内存 ,结构体的内存,也不能同时操作</p><p>我们举了几个内存访问冲突的示例,那么什么情况下内存访问是安全的呢</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">balance</span><span class="params">(<span class="number">_</span> x:<span class="keyword">inout</span> Int, <span class="number">_</span> y: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = x + y</span><br><span class="line">    x = sum / <span class="number">2</span></span><br><span class="line">    y = sum - x</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> energy: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> tulpe = (health: <span class="number">10</span>, energy:<span class="number">20</span>)</span><br><span class="line">    balance(&amp;tulpe.health, &amp;tulpe.energy)</span><br><span class="line">    <span class="keyword">var</span> holly = <span class="type">Player</span>(name: <span class="string">"Holly"</span>, health: <span class="number">10</span>, energy: <span class="number">10</span>)</span><br><span class="line">    balance(&amp;holly.health, &amp;holly.energy)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>为什么放到函数里面就不报错了呢,下面我们来说明一下</p><p>如果下面的条件可以满足,就说明重叠访问结构体的属性是安全的🔐</p><ol><li>你只访问实例存储属性,不是计算属性或则类属性</li><li>结构体是局部变量而非全局变量</li><li>结构体哟么没有被闭包捕获要么只被非逃逸闭包捕获</li></ol><p>那么上面不报错就是因为,他们放到函数里面,那么就是局部变量了</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-内存管理概览&quot;&gt;&lt;a href=&quot;#一-内存管理概览&quot; class=&quot;headerlink&quot; title=&quot;一 内存管理概览&quot;&gt;&lt;/a&gt;一 内存管理概览&lt;/h5&gt;&lt;p&gt;跟OC一样,Swift 也是采用基于引用计数的ARC内存管理方案,这里讲的都是针对堆空间, Swift的ARC中有3种引用&lt;/p&gt;
&lt;p&gt;1  强引用(strong reference): 默认情况下,引用都是强引用&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deinit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Person deinit&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func test() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; = Person() &lt;span class=&quot;comment&quot;&gt;//强引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2 弱引用(weak refernce): 通过weak定义弱引用&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;deinit&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Person deinit&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p:&lt;span class=&quot;type&quot;&gt;Person?&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt;() &lt;span class=&quot;comment&quot;&gt;//强引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;必须是可选类型的var,因为实例销毁后,ARC会自动将弱引用设置为nil,此外ARC自动给弱引用设置nil时,不会触发属性观察器&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 访问控制</title>
    <link href="http://example.com/2019/11/30/swift-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2019/11/30/swift-访问控制/</id>
    <published>2019-11-30T12:38:03.000Z</published>
    <updated>2020-12-22T14:28:41.236Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-访问控制五个级别"><a href="#一-访问控制五个级别" class="headerlink" title="一 访问控制五个级别"></a>一 访问控制五个级别</h5><p>在访问控制这块,Swift提供了5个不同的访问级别 如下:</p><ol><li><strong>open</strong>: 允许在定义实体的模块,其它模块中访问,允许其他模块进行继承,重写(open 只能用在类及类成员上)</li><li><strong>public</strong>: 允许在定义实体的模块,其它模块中访问, 不允许其他模块进行继承重写</li><li><strong>internal</strong>: 只允许在定义实体的模块中访问,不允许在其他模块中访问</li><li><strong>fileprivate</strong>: 只允许在定义实体的源文件中访问</li><li><strong>private</strong>: 只允许在定义实体的封闭声明中访问</li></ol><p>绝大部分实体默认都是internal级别<br><a id="more"></a></p><h5 id="二-访问级别的使用准则"><a href="#二-访问级别的使用准则" class="headerlink" title="二 访问级别的使用准则"></a>二 访问级别的使用准则</h5><p>一个实体不可以被更低访问级别的实体定义,比如</p><p>1  变量、常量类型 &gt;= 变量、常量</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">var</span> perosn: <span class="type">Person</span> <span class="comment">//❌Variable cannot be declared internal because its type uses a fileprivate type</span></span><br></pre></td></tr></table></figure><p>2 参数类型、返回值类型 &gt;= 函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">( num:Int)</span></span> -&gt; <span class="type">Person</span> &#123; <span class="comment">//❌Function cannot be declared internal because its result uses a private type</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Person</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 父类 &gt;= 子类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span>Person&#123; <span class="comment">//❌Superclass 'Person' of open class must be open</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 父协议 &gt;= 子协议</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Student</span>:<span class="title">Person</span></span>&#123; <span class="comment">//❌Public protocol cannot refine an internal protocol</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5 原类型 &gt;= typealias</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> protocol Person &#123;&#125;</span><br><span class="line"></span><br><span class="line">internal typealias myPerson = Person//❌<span class="keyword">Type</span> <span class="type">alias </span>cannot be declared internal because its underlying <span class="keyword">type</span> <span class="type">uses </span>a <span class="keyword">private</span> <span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>6 原始值类型,关联值类型 &gt;= 枚举类型</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fileprivate typealias myInt = Int</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Caster</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> nob(myInt) /<span class="regexp">/❌Enum case in an internal enum uses a fileprivate type</span></span><br><span class="line"><span class="regexp">    case bob</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>7 定义类型B时候用到的其他类型 &gt;= 类型B</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dog:<span class="type">Dog</span> = <span class="type">Dog</span>()<span class="comment">//❌Property must be declared fileprivate because its type uses a private type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等等…</p><h5 id="三-元组类型"><a href="#三-元组类型" class="headerlink" title="三 元组类型"></a>三 元组类型</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> data1:(<span class="type">Dog</span>,<span class="type">Person</span>) <span class="comment">//Dog和Person中哪个访问级别低元组类型就是哪个</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> data2:(<span class="type">Dog</span>,<span class="type">Person</span>)</span><br></pre></td></tr></table></figure><p>元组类型的访问级别是所有成员类型最低的那个</p><h5 id="四-泛型类型"><a href="#四-泛型类型" class="headerlink" title="四 泛型类型"></a>四 泛型类型</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;</span>&#123;&#125;</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> p = <span class="type">Person</span>&lt;<span class="type">Car</span>, <span class="type">Dog</span>&gt;()<span class="comment">//Person,Car, Dog哪个访问级别低,泛型类型就是哪个</span></span><br></pre></td></tr></table></figure><p>泛型类型的访问级别是了型的访问级别以及所有泛型类型参数的访问级别中最低的那个</p><h5 id="五成员嵌套类型默认的访问级别"><a href="#五成员嵌套类型默认的访问级别" class="headerlink" title="五成员嵌套类型默认的访问级别"></a>五成员嵌套类型默认的访问级别</h5><p>类型的访问级别会影响(属性,方法,初始化器,下标),嵌套类型的<strong>默认</strong>访问级别<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePrivateCLass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;&#125; <span class="comment">//fileprivate</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//private</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1 一般情况下,类型为fileprivate,那么成员,嵌套了型默认也是fileprivate</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateCLass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;&#125; <span class="comment">//private</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//private</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 一般情况下,类型为private,那么成员,嵌套了型默认也是private</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublicClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> p1 = <span class="number">0</span> <span class="comment">//public</span></span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="number">0</span>  <span class="comment">//internal</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//filerProvate</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123; &#125; <span class="comment">//private</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 一般情况下,类型为internal或public,那么成员类型,嵌套类型默认是internal</p><p>上面讲的都是一般情况下的,那么还有不一般的情况需要我们注意⚠️的,下面我们一起来看一下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>:<span class="title">Person</span></span>&#123;<span class="comment">//❌Class cannot be declared fileprivate because its superclass is private</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类访问级别不能大于父类访问级别,这个报错是对的student级别比Person级别大,所以会报错</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        </span><br><span class="line"> &#125;</span><br><span class="line">fileprivate <span class="class"><span class="keyword">class</span> <span class="title">Student</span>:<span class="type">Person&#123;</span></span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的代码我们把它拿到外面,这个其实是不会报错的,怎么又不报错了呢,这明显子类访问级别比父类大,具体原因就是在,private,fileprivate的概念上</p><p> <strong>fileprivate</strong>: 只允许在定义实体的源文件中访问</p><p> <strong>private</strong>: 只允许在定义实体的封闭声明中访问</p><p> fileprivate权限是当前整个文件, private是实体的封闭声明中,由于Student是定义在整个文件的最外层,那么它的封闭空间就是当前整个文件,那么它跟fileprivate声明的访问权限效果就是一样的了,都是当前整个文件了,也即fileprivate= private,所以编译器不会报错了,下面再给个例子加深下印象</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dog:<span class="type">Dog</span> = <span class="type">Dog</span>()</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dog.run()</span><br><span class="line">        dog.age = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dog:<span class="type">Dog</span> = <span class="type">Dog</span>()</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dog.run()</span><br><span class="line">        dog.age = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dog:<span class="type">Dog</span> = <span class="type">Dog</span>()</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dog.run() <span class="comment">//❌run' is inaccessible due to 'private' protection level</span></span><br><span class="line">        dog.age = <span class="number">10</span><span class="comment">//❌'age' is inaccessible due to 'private' protection level</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们总结一句话:在全局作用域下定义的private等价于fileprivate</p><h5 id="六-getter-setter访问级别设置"><a href="#六-getter-setter访问级别设置" class="headerlink" title="六 getter setter访问级别设置"></a>六 getter setter访问级别设置</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.swift</span></span><br><span class="line"><span class="comment">//  swifttest</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 徐孟良 on 2020/12/21.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 mac. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">public</span> <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> age = <span class="number">0</span>  <span class="comment">//只能在当前作用域里面修改</span></span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">public</span> <span class="keyword">var</span> weight:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;<span class="number">20</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">internal</span>(<span class="keyword">set</span>) <span class="keyword">public</span> <span class="keyword">subscript</span>(index:<span class="type">Int</span>) -&gt;<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; index &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        age = <span class="number">20</span> <span class="comment">//修改age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="type">Person</span>()</span><br><span class="line">num = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line">person.age = <span class="number">10</span><span class="comment">//不能修改age,只能在类里面修改❌Cannot assign to property: 'age' setter is inaccessible</span></span><br></pre></td></tr></table></figure><p>getter,setter默认接收它们所属环境的访问级别,可以给setter单独设置一个比getter更低的访问级别,用以限制写的权限</p><h5 id="七-初始化器注意事项"><a href="#七-初始化器注意事项" class="headerlink" title="七 初始化器注意事项"></a>七 初始化器注意事项</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person()</span><br></pre></td></tr></table></figure><p>如果一个public类想在另一个模块调用变异生成的默认无参初始化器,必须显示提供plublic的无参初始化器,因为public类的默认初始化器是internal级别的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="type">Person</span>(y:<span class="number">10</span>) <span class="comment">//❌Person' initializer is inaccessible due to 'private' protection lev</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="type">Person</span>(x:<span class="number">10</span>)<span class="comment">// //❌Person' initializer is inaccessible due to 'private' protection lev</span></span><br><span class="line"><span class="keyword">var</span> person3 = <span class="type">Person</span>(x: <span class="number">10</span>, y: <span class="number">10</span>)<span class="comment">// //❌Person' initializer is inaccessible due to 'private' protection lev</span></span><br></pre></td></tr></table></figure><p>如果结构体有private\fileprivate的存储实例属性,那么它的成员初始化器也是private\fileprivate ,否则就是默认的internal</p><h5 id="八-枚举类型的case"><a href="#八-枚举类型的case" class="headerlink" title="八 枚举类型的case"></a>八 枚举类型的case</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Season</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> spring /<span class="regexp">/不能单独设置case private case spring</span></span><br><span class="line"><span class="regexp">    case summer</span></span><br><span class="line"><span class="regexp">    case autum</span></span><br><span class="line"><span class="regexp">    case winter</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>不能给enum的每个case单独设置访问级别,每个case自动接收enum的访问级别</p><h5 id="九-协议访问权限设置"><a href="#九-协议访问权限设置" class="headerlink" title="九 协议访问权限设置"></a>九 协议访问权限设置</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">spring</span><span class="params">()</span></span> <span class="comment">//不能设置为: public func spring()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟枚举权限设置一样,协议中定义的要求自动接收协议的访问级别,不能单独设置访问级别</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">spring</span><span class="params">()</span></span> <span class="comment">//不能设置为: public func spring()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> :<span class="title">Season</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">func</span> <span class="title">spring</span><span class="params">()</span></span> &#123; <span class="comment">//spring()g访问权限大于等于person或者大于等于Season访问权限</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协议实现的访问级别必须&gt;= 类型的访问级别 或者&gt;= 协议的访问级别</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123; <span class="comment">//❌Method 'run()' must be declared public because it matches a requirement in public protocol 'Runnable'</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的编译不会通过,run()默认权限是internal</p><h5 id="十-扩展"><a href="#十-扩展" class="headerlink" title="十 扩展"></a>十 扩展</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">main.swift</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">extension</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>  &#123;  <span class="comment">//file</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"i can run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test.swift</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span>  &#123;</span></span><br><span class="line">    var p = Person()</span><br><span class="line">    p.test() //❌<span class="string">'test'</span> is inaccessible due <span class="keyword">to</span> <span class="string">'fileprivate'</span> protection level</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如果没有显示的设置扩展的访问级别,扩展添加的成员自动接收扩展的访问级别</li><li>如果没有显示设置扩展的访问级别,扩展添加的成员默认访问级别,跟直接在类型中定义的成员一样</li><li>可以单独给扩展添加的成员设置访问级别</li><li>不能给用于遵守协议的扩展显示设置扩展的访问级别</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">run0</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">eat0</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">run1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">eat1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        run0()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">eat2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        run1()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在同一文件中的扩展，可以写成类似多个部分的类型声明</p><p>在原本的声明中声明一个私有成员，可以在同一文件的扩展中访问它</p><p>在扩展中声明一个私有成员，可以在同一文件的其他扩展中、原本声明中访问它</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-访问控制五个级别&quot;&gt;&lt;a href=&quot;#一-访问控制五个级别&quot; class=&quot;headerlink&quot; title=&quot;一 访问控制五个级别&quot;&gt;&lt;/a&gt;一 访问控制五个级别&lt;/h5&gt;&lt;p&gt;在访问控制这块,Swift提供了5个不同的访问级别 如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;open&lt;/strong&gt;: 允许在定义实体的模块,其它模块中访问,允许其他模块进行继承,重写(open 只能用在类及类成员上)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public&lt;/strong&gt;: 允许在定义实体的模块,其它模块中访问, 不允许其他模块进行继承重写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;internal&lt;/strong&gt;: 只允许在定义实体的模块中访问,不允许在其他模块中访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fileprivate&lt;/strong&gt;: 只允许在定义实体的源文件中访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private&lt;/strong&gt;: 只允许在定义实体的封闭声明中访问&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;绝大部分实体默认都是internal级别&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 扩展</title>
    <link href="http://example.com/2019/11/30/swift-%E6%89%A9%E5%B1%95/"/>
    <id>http://example.com/2019/11/30/swift-扩展/</id>
    <published>2019-11-30T05:15:50.000Z</published>
    <updated>2020-12-19T07:41:18.794Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-扩展初识"><a href="#一-扩展初识" class="headerlink" title="一 扩展初识"></a>一 扩展初识</h5><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">extension <span class="keyword">Double</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> km: <span class="keyword">Double</span> &#123;<span class="keyword">self</span> * <span class="number">1</span>_000<span class="number">.0</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> m: <span class="keyword">Double</span> &#123;<span class="keyword">self</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> dm: <span class="keyword">Double</span> &#123; <span class="keyword">self</span> / <span class="number">10.0</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> cm: <span class="keyword">Double</span> &#123;<span class="keyword">self</span> / <span class="number">100.0</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> mm: <span class="keyword">Double</span> &#123;<span class="keyword">self</span> / <span class="number">1</span>_000<span class="number">.0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> am:<span class="keyword">Double</span> = <span class="number">1000</span></span><br><span class="line"><span class="keyword">print</span>(am.km)</span><br><span class="line"><span class="keyword">print</span>(am.m)</span><br><span class="line"><span class="keyword">print</span>(am.dm)</span><br><span class="line"><span class="keyword">print</span>(am.cm)</span><br><span class="line"><span class="keyword">print</span>(am.mm)</span><br><span class="line"><span class="comment">//1000000.0</span></span><br><span class="line"><span class="comment">//1000.0</span></span><br><span class="line"><span class="comment">//100.0</span></span><br><span class="line"><span class="comment">//10.0</span></span><br><span class="line"><span class="comment">//1.0</span></span><br></pre></td></tr></table></figure><p>swift中的扩展类似于OC的分类,可以为枚举,结构体,类,协议添加方法,计算属性,下标 ,便捷初始化器,嵌套类型,协议等,扩展还有一些注意⚠️事项<br><a id="more"></a><br>扩展不能办到的事情:</p><ol><li>不能覆盖原有的功能</li><li>不能添加存储属性,不能向已有的属性添加属性观察器</li><li>不能添加父类</li><li>不能给类添加指定初始化器,不能添加反初始化器,</li><li>等等……<br>大部分是只要有修改原有类内存结构的都不能做,比如添加存储属性,继承父类,添加指定初始化器等都有可能改变原有类的内存结构</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="keyword">subscript</span>(nullable idx: <span class="type">Int</span>) -&gt; <span class="type">Element?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (startIndex ..&lt; endIndex).<span class="built_in">contains</span>(idx) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>[idx]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(arr[nullable:<span class="number">0</span>]) <span class="comment">//Optional(10)</span></span><br><span class="line"><span class="built_in">print</span>(arr[nullable:<span class="number">4</span>]) <span class="comment">//nil</span></span><br></pre></td></tr></table></figure><p>给数组添加一个扩展,数组越界不报错直接返回nil,这里也演示了协议类型的Element,扩展里也能用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">repetitions</span><span class="params">(task: <span class="params">()</span></span></span>-&gt; <span class="type">Void</span>) &#123; <span class="comment">//重复执行几步</span></span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="keyword">self</span> &#123; task() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">square</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; <span class="comment">//求平方</span></span><br><span class="line">        <span class="keyword">self</span> = <span class="keyword">self</span> * <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Kind</span> </span>&#123; <span class="keyword">case</span> negative, zero, positive&#125;</span><br><span class="line">    <span class="keyword">var</span> kind: <span class="type">Kind</span> &#123; <span class="comment">//嵌套类型 获取正数还是负数</span></span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> .zero</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> .positive</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> .negative</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(digitIndex: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; <span class="comment">//根据index获取个十百...位数</span></span><br><span class="line">        <span class="keyword">var</span> decimalBase = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;digitIndex &#123; decimalBase *= <span class="number">10</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">self</span> / decimalBase) % <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>.repetitions &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(age.square())</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>.kind)</span><br><span class="line"><span class="built_in">print</span>((-<span class="number">10</span>).kind)</span><br><span class="line"><span class="keyword">var</span> agg = <span class="number">345</span></span><br><span class="line"><span class="built_in">print</span>(agg[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>扩展嵌套类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="type">Int</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Person</span> : <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(<span class="keyword">left</span>: Person, <span class="keyword">right</span>: Person)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">left</span>.age == <span class="keyword">right</span>.age &amp;&amp; <span class="keyword">left</span>.name == <span class="keyword">right</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age:<span class="number">0</span>,name:<span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="type">Person</span>(age: <span class="number">20</span>, name: <span class="string">"jack"</span>)</span><br></pre></td></tr></table></figure><p>给类扩展便捷初始化器</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> point: <span class="type">Point</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(x:point.x,y:point.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="type">Point</span>()</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="type">Point</span>(x:<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> p3 = <span class="type">Point</span>(y:<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> p4 = <span class="type">Point</span>(x:<span class="number">10</span>,y:<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> p5 = <span class="type">Point</span>(p4) <span class="comment">//扩展的初始化器</span></span><br></pre></td></tr></table></figure><p>在结构体中如果希望自定义初始化器的同时,编译器也能够生成默认的初始化器,那么可以在扩展中编写自定义初始化器</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"test"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TestClass</span> : <span class="title">TestProtocol</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果一个类型已经实现了协议的所有要求,但是还,诶呦声明它遵守了这个协议,那么可以通过扩展来让它遵守这个协议</p><h5 id="二-扩展协议"><a href="#二-扩展协议" class="headerlink" title="二 扩展协议"></a>二 扩展协议</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isOdd</span>&lt;T: BinaryInteger&gt;<span class="params">(<span class="number">_</span> i:T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    i % <span class="number">2</span> != <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinaryInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isOdd</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span> % <span class="number">2</span> != <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>.isOdd()) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">print</span>((-<span class="number">3</span>).isOdd()) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们通过扩展BinaryInteger协议,添加一个判断整数是否为奇数的方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"TestProtocol test1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"TestProtocol test2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>: <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cls = <span class="type">TestClass</span>()</span><br><span class="line">cls.test1() <span class="comment">//TestProtocol test1</span></span><br><span class="line">cls.test2() <span class="comment">//TestProtocol test2</span></span><br></pre></td></tr></table></figure><p>扩展可以给协议提供默认实现,也间接实现可选协议的效果,扩展可以给协议扩充协议中从未声明过的方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"TestProtocol test1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"TestProtocol test2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>: <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"TestClass test1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"TestClass test2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cls:<span class="type">TestProtocol</span> = <span class="type">TestClass</span>()</span><br><span class="line">cls.test1() <span class="comment">//TestClass test1</span></span><br><span class="line">cls.test2() <span class="comment">//TestProtocol test2 //优先从扩展里面找</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cls = <span class="type">TestClass</span>()</span><br><span class="line">cls.test1() <span class="comment">//TestClass test1</span></span><br><span class="line">cls.test2() <span class="comment">//TestClass test2</span></span><br></pre></td></tr></table></figure><p>如果你调用的方法在协议中没有声明,你定义的实例又是协议类型,那么它会优先从扩展里面找方法</p><h5 id="三-扩展泛型"><a href="#三-扩展泛型" class="headerlink" title="三 扩展泛型"></a>三 扩展泛型</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">E</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: E)</span></span> &#123;</span><br><span class="line">       elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123; elements.removeLast() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; elements.<span class="built_in">count</span> &#125; &#125;</span><br><span class="line"><span class="comment">// 扩展中依然可以使用原类型中的泛型类型</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">E</span>&#123;</span><br><span class="line">    elements.last!</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 符合条件才扩展</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Stack</span> : <span class="title">Equatable</span> <span class="title">where</span> <span class="title">E</span> : <span class="title">Equatable</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(<span class="keyword">left</span>: Stack, <span class="keyword">right</span>: Stack)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">     <span class="keyword">left</span>.elements == <span class="keyword">right</span>.elements</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-扩展初识&quot;&gt;&lt;a href=&quot;#一-扩展初识&quot; class=&quot;headerlink&quot; title=&quot;一 扩展初识&quot;&gt;&lt;/a&gt;一 扩展初识&lt;/h5&gt;&lt;figure class=&quot;highlight zephir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension &lt;span class=&quot;keyword&quot;&gt;Double&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; km: &lt;span class=&quot;keyword&quot;&gt;Double&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;_000&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m: &lt;span class=&quot;keyword&quot;&gt;Double&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dm: &lt;span class=&quot;keyword&quot;&gt;Double&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cm: &lt;span class=&quot;keyword&quot;&gt;Double&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;100.0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mm: &lt;span class=&quot;keyword&quot;&gt;Double&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;_000&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; am:&lt;span class=&quot;keyword&quot;&gt;Double&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(am.km)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(am.m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(am.dm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(am.cm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(am.mm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1000000.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1000.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//100.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//10.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;swift中的扩展类似于OC的分类,可以为枚举,结构体,类,协议添加方法,计算属性,下标 ,便捷初始化器,嵌套类型,协议等,扩展还有一些注意⚠️事项&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 运算符重载</title>
    <link href="http://example.com/2019/11/25/swift-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://example.com/2019/11/25/swift-运算符重载/</id>
    <published>2019-11-25T13:15:15.000Z</published>
    <updated>2020-12-19T07:23:00.103Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-溢出运算符-Overflow-Operator"><a href="#一-溢出运算符-Overflow-Operator" class="headerlink" title="一 溢出运算符(Overflow Operator)"></a>一 溢出运算符(Overflow Operator)</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="type">Int8</span>.<span class="built_in">min</span>) <span class="comment">//-128</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Int8</span>.<span class="built_in">max</span>) <span class="comment">//127</span></span><br><span class="line"><span class="keyword">var</span> a:<span class="type">Int8</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b:<span class="type">Int8</span> = a * <span class="number">100</span><span class="comment">//❌ 超出范围</span></span><br></pre></td></tr></table></figure><p>swift的算数运算符出现溢出时会抛出运行时错误</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> min = UInt8.min</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(min)</span></span>  <span class="comment">//0</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(min &amp;- <span class="number">1</span>)</span></span> <span class="comment">//255</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> max = UInt8.max</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(max &amp;+ <span class="number">1</span>)</span></span> <span class="comment">//0</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(max &amp;* <span class="number">2</span>)</span></span> <span class="comment">//254</span></span><br></pre></td></tr></table></figure><p>swift有溢出运算符 <strong>&amp;+ , &amp;-, &amp;*</strong> ,用来支持溢出运算,溢出运算超出类型返回,会自动循环♻️从零开始<br><a id="more"></a></p><h5 id="二-运算符重载"><a href="#二-运算符重载" class="headerlink" title="二 运算符重载"></a>二 运算符重载</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">struct</span> <span class="string">Point</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">var</span> <span class="string">x</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> <span class="string">y</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">func</span> <span class="string">+</span> <span class="string">(p1:</span> <span class="string">Point,</span> <span class="attr">p2:</span> <span class="string">Point)</span> <span class="string">-&gt;</span> <span class="string">Point</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">Point(x:</span> <span class="string">p1.x</span> <span class="string">+</span> <span class="string">p2.x,</span> <span class="attr">y:</span> <span class="string">p1.y</span> <span class="string">+</span> <span class="string">p2.y)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">var</span> <span class="string">p1</span> <span class="string">=</span> <span class="string">Point(x:</span> <span class="number">20</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">30</span><span class="string">)</span></span><br><span class="line"><span class="string">var</span> <span class="string">p2</span> <span class="string">=</span> <span class="string">Point(x:</span> <span class="number">10</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">10</span><span class="string">)</span></span><br><span class="line"><span class="string">var</span> <span class="string">p3</span> <span class="string">=</span> <span class="string">Point(x:</span> <span class="number">20</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">20</span><span class="string">)</span></span><br><span class="line"><span class="string">var</span> <span class="string">p4</span> <span class="string">=</span> <span class="string">p1</span> <span class="string">+</span> <span class="string">p2</span> <span class="string">+</span> <span class="string">p3</span></span><br><span class="line"><span class="string">print(p4)//Point(x:</span> <span class="number">50</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">60</span><span class="string">)</span></span><br></pre></td></tr></table></figure><p>类,结构体,枚举可以为现有的运算符提供自定义的实现,这个操作叫做:运算符重载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">struct</span> <span class="string">Point</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">var</span> <span class="string">x</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> <span class="string">y</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line">    <span class="string">static</span> <span class="string">func</span> <span class="string">+</span> <span class="string">(p1:</span> <span class="string">Point,</span> <span class="attr">p2:</span> <span class="string">Point)</span> <span class="string">-&gt;</span> <span class="string">Point</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">Point(x:</span> <span class="string">p1.x</span> <span class="string">+</span> <span class="string">p2.x,</span> <span class="attr">y:</span> <span class="string">p1.y</span> <span class="string">+</span> <span class="string">p2.y)</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">var</span> <span class="string">p1</span> <span class="string">=</span> <span class="string">Point(x:</span> <span class="number">20</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">30</span><span class="string">)</span></span><br><span class="line"><span class="string">var</span> <span class="string">p2</span> <span class="string">=</span> <span class="string">Point(x:</span> <span class="number">10</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">10</span><span class="string">)</span></span><br><span class="line"><span class="string">var</span> <span class="string">p3</span> <span class="string">=</span> <span class="string">Point(x:</span> <span class="number">20</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">20</span><span class="string">)</span></span><br><span class="line"><span class="string">var</span> <span class="string">p4</span> <span class="string">=</span> <span class="string">p1</span> <span class="string">+</span> <span class="string">p2</span> <span class="string">+</span> <span class="string">p3</span></span><br><span class="line"><span class="string">print(p4)//Point(x:</span> <span class="number">50</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">60</span><span class="string">)</span></span><br></pre></td></tr></table></figure><p>我们一般把重载的运算符放到相应的类型里面,放到类型里面必须是static ,类似于全局方法, 不加static 就是实例方法,那运算符得通过实例调用,这样显然是不合适的.</p><h5 id="三-运算符的前缀-中缀-后缀"><a href="#三-运算符的前缀-中缀-后缀" class="headerlink" title="三 运算符的前缀,中缀,后缀"></a>三 运算符的前缀,中缀,后缀</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> + <span class="params">(p1: Point, p2: Point)</span></span> -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">        <span class="type">Point</span>(x: p1.x + p2.x, y: p1.y + p2.y)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> - <span class="params">(p1: Point, p2: Point)</span></span> -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">        <span class="type">Point</span>(x: p1.x - p2.x, y: p1.y - p2.y)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> - <span class="params">(p1: Point)</span></span> -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">        <span class="type">Point</span>(x: -p1.x , y: -p1.y)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> += <span class="params">(p1: <span class="keyword">inout</span> Point, p2: Point)</span></span> &#123;</span><br><span class="line">        p1 = p1 + p2</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">postfix</span> <span class="function"><span class="keyword">func</span> ++ <span class="params">(p1: <span class="keyword">inout</span> Point)</span></span> -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> tmp = p1</span><br><span class="line">       p1 += <span class="type">Point</span>(x:<span class="number">1</span>,y:<span class="number">1</span>)</span><br><span class="line">       <span class="keyword">return</span> tmp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="type">Point</span>(x: <span class="number">20</span>, y: <span class="number">30</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="type">Point</span>(x: <span class="number">10</span>, y: <span class="number">10</span>)</span><br><span class="line">p1 += p2</span><br><span class="line"><span class="built_in">print</span>(p1) <span class="comment">//Point(x: 30, y: 40)</span></span><br><span class="line"><span class="built_in">print</span>(-p1) <span class="comment">//Point(x: -30, y: -40)</span></span><br><span class="line"><span class="keyword">var</span> p3 = p2++</span><br><span class="line"><span class="built_in">print</span>(p2) <span class="comment">//Point(x: 11, y: 11)</span></span><br></pre></td></tr></table></figure><p><strong>prefix</strong> 代表前缀, <strong>postfix</strong>代表后缀,什么都不加代表中缀</p><h5 id="四-Equatable"><a href="#四-Equatable" class="headerlink" title="四 Equatable"></a>四 Equatable</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> : <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs:Person, rhs:Person)</span></span> -&gt;<span class="type">Bool</span>&#123;</span><br><span class="line">        lhs.age == rhs.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="type">Person</span>(age: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="type">Person</span>(age: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(p1 == p2) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(p1 != p2) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>判断两个实例是否等价,一般是要遵守Equatable协议,重载<strong>==</strong>运算符,于此同时,也等价于重载的 <strong>!=</strong> 运算符, 关于Equatable还有以下⚠️注意事项</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">enum Answer &#123;</span><br><span class="line">    case wrong</span><br><span class="line">    case <span class="attribute">right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> s1 = Answer.wrong</span><br><span class="line"><span class="selector-tag">var</span> s2 = Answer.<span class="attribute">right</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s1 == s2)</span></span> <span class="comment">//false</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s1 != s2)</span></span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">enum Answer2:Int &#123;</span><br><span class="line">    case wrong</span><br><span class="line">    case <span class="attribute">right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> s12 = Answer2.wrong</span><br><span class="line"><span class="selector-tag">var</span> s22 = Answer2.<span class="attribute">right</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s12 == s22)</span></span> <span class="comment">//false</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s12 != s22)</span></span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>swift为没有关联类型的枚举默认实现了Equatable协议</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Answer</span>:<span class="title">Equatable</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> wrong(Int)</span><br><span class="line">    <span class="keyword">case</span> right</span><br><span class="line">&#125;</span><br><span class="line">var s1 = Answer.wrong(<span class="number">10</span>)</span><br><span class="line">var s2 = Answer.wrong(<span class="number">20</span>)</span><br><span class="line">print(s1 == s2) /<span class="regexp">/false</span></span><br><span class="line"><span class="regexp">print(s1 != s2) /</span><span class="regexp">/true</span></span><br></pre></td></tr></table></figure><p>swift为遵守Equatable协议关联类型(注意是指关联的类型遵守了Equatable协议,上面关联的Int类型默认遵守Equatable协议)的枚举默认实现了Equatable协议</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">struct</span> <span class="string">Point:Equatable</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">var</span> <span class="string">x</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> <span class="string">y</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var</span> <span class="string">p1</span> <span class="string">=</span> <span class="string">Point(x:</span> <span class="number">20</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">30</span><span class="string">)</span></span><br><span class="line"><span class="string">var</span> <span class="string">p2</span> <span class="string">=</span> <span class="string">Point(x:</span> <span class="number">10</span><span class="string">,</span> <span class="attr">y:</span> <span class="number">10</span><span class="string">)</span></span><br><span class="line"><span class="string">print(p1</span> <span class="string">==</span> <span class="string">p2)</span> <span class="string">//false</span></span><br></pre></td></tr></table></figure><p>swift为遵守Equatable协议存储属性的结构体(注意是指存储属性遵守了Equatable协议,上面关联的Int类型默认遵守Equatable协议)默认实现了Equatable协议</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> : <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs:Person, rhs:Person)</span></span> -&gt;<span class="type">Bool</span>&#123;</span><br><span class="line">        lhs.age == rhs.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="type">Person</span>(age: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="type">Person</span>(age: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> p3 = p1</span><br><span class="line"><span class="built_in">print</span>(p1 === p2)<span class="comment">//false</span></span><br><span class="line"><span class="built_in">print</span>(p1 === p3)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>引用类型比较存储的地址值是否相等,使用恒等运算符<strong>===, !==</strong></p><h5 id="五-Comparable"><a href="#五-Comparable" class="headerlink" title="五 Comparable"></a>五 Comparable</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> : <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> score: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(score: <span class="type">Int</span>, age: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.score = score</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> &lt; (lhs: Student, rhs: Student) -&gt;<span class="title">Bool</span> </span>&#123;</span><br><span class="line">        (lhs.score &lt; rhs.score) || (lhs.score == rhs.score &amp;&amp; lhs.age &gt; rhs.age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> &gt; <span class="params">(lhs: Student, rhs: Student)</span></span> -&gt;<span class="type">Bool</span> &#123;</span><br><span class="line">        (lhs.score &gt; rhs.score) || (lhs.score == rhs.score &amp;&amp; lhs.age &gt; rhs.age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> &lt;=(lhs: Student, rhs: Student) -&gt; <span class="title">Bool</span> </span>&#123;</span><br><span class="line">        !(lhs &gt; rhs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> &gt;=<span class="params">(lhs: Student, rhs: Student)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        !(lhs &lt; rhs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="type">Student</span>(score: <span class="number">100</span>, age: <span class="number">20</span>)</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="type">Student</span>(score: <span class="number">90</span>, age: <span class="number">80</span>)</span><br><span class="line"><span class="keyword">var</span> stu3 = <span class="type">Student</span>(score: <span class="number">100</span>, age: <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1 &gt; stu2) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(stu1 &gt;= stu2) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(stu1 &gt;= stu3) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>要想比较两个实例大小一般做法是,遵守Comparable协议,重载相应的运算符</p><h5 id="六-自定义运算符"><a href="#六-自定义运算符" class="headerlink" title="六 自定义运算符"></a>六 自定义运算符</h5><p>我们可定义新的运算符,在<strong>全局</strong>作用域使用operator进行声明</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span>  <span class="comment">//前缀运算符</span></span><br><span class="line"><span class="keyword">postfix</span> <span class="keyword">operator</span> <span class="comment">//后缀运算符</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span>   <span class="comment">//中缀运算符</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> +++</span><br><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(<span class="number">_</span> num: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    num += <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line">+++age</span><br><span class="line"><span class="built_in">print</span>(age)<span class="comment">//12</span></span><br></pre></td></tr></table></figure><p>自定义前缀运算符</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> +-: <span class="type">PlusMinusPrecedence</span></span><br><span class="line">precedencegroup <span class="type">PlusMinusPrecedence</span> &#123;</span><br><span class="line">    <span class="keyword">associativity</span>: <span class="keyword">none</span></span><br><span class="line">    higherThan: <span class="type">AdditionPrecedence</span></span><br><span class="line">    lowerThan: <span class="type">MultiplicationPrecedence</span></span><br><span class="line">    assignment: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> +- <span class="params">(p1: Point, p2: Point)</span></span> -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">        <span class="type">Point</span>(x: p1.x + p2.x, y: p1.y - p2.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="type">Point</span>(x: <span class="number">10</span>,y:<span class="number">20</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="type">Point</span>(x: <span class="number">5</span>, y: <span class="number">15</span>)</span><br><span class="line"><span class="keyword">var</span> p3 = p1 +- p2</span><br><span class="line"><span class="built_in">print</span>(p3) <span class="comment">//Point(x: 15, y: 5)</span></span><br></pre></td></tr></table></figure><p>自定义中缀运算符<br><a href="https://developer.apple.com/documentation/swift/swift_standard_library/operator_declarations" target="_blank" rel="noopener">https://developer.apple.com/documentation/swift/swift_standard_library/operator_declarations</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-溢出运算符-Overflow-Operator&quot;&gt;&lt;a href=&quot;#一-溢出运算符-Overflow-Operator&quot; class=&quot;headerlink&quot; title=&quot;一 溢出运算符(Overflow Operator)&quot;&gt;&lt;/a&gt;一 溢出运算符(Overflow Operator)&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Int8&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//-128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Int8&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//127&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a:&lt;span class=&quot;type&quot;&gt;Int8&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b:&lt;span class=&quot;type&quot;&gt;Int8&lt;/span&gt; = a * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//❌ 超出范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;swift的算数运算符出现溢出时会抛出运行时错误&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; min = UInt8.min&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(min)&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(min &amp;amp;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; max = UInt8.max&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(max &amp;amp;+ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(max &amp;amp;* &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//254&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;swift有溢出运算符 &lt;strong&gt;&amp;amp;+ , &amp;amp;-, &amp;amp;*&lt;/strong&gt; ,用来支持溢出运算,溢出运算超出类型返回,会自动循环♻️从零开始&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 泛型</title>
    <link href="http://example.com/2019/11/22/swift-%E6%B3%9B%E5%9E%8B/"/>
    <id>http://example.com/2019/11/22/swift-泛型/</id>
    <published>2019-11-22T12:45:04.000Z</published>
    <updated>2020-12-16T15:07:44.508Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-泛型初识-写一个泛型函数"><a href="#一-泛型初识-写一个泛型函数" class="headerlink" title="一 泛型初识,写一个泛型函数"></a>一 泛型初识,写一个泛型函数</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func swapValues&lt;T&gt;(_ <span class="selector-tag">a</span>:inout T, _ <span class="selector-tag">b</span>:inout T)&#123;</span><br><span class="line">    (<span class="selector-tag">a</span>,b) = (<span class="selector-tag">b</span>,a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> i1 = <span class="number">10</span></span><br><span class="line"><span class="selector-tag">var</span> i2 = <span class="number">20</span></span><br><span class="line"><span class="function"><span class="title">swap</span><span class="params">(&amp;i1, &amp;i2)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"i1=\(i1),i2=\(i2)"</span>)</span></span></span><br><span class="line"><span class="selector-tag">var</span> i3 = <span class="string">"hello"</span></span><br><span class="line"><span class="selector-tag">var</span> i4 = <span class="string">"world"</span></span><br><span class="line"><span class="function"><span class="title">swap</span><span class="params">(&amp;i3, &amp;i4)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"i3=\(i3),i4=\(i4)"</span>)</span></span></span><br></pre></td></tr></table></figure><p>泛型可以将类型参数化,提高代码复用率,减少代码量</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapValues</span>&lt;T&gt;<span class="params">(<span class="number">_</span> a:<span class="keyword">inout</span> T, <span class="number">_</span> b:<span class="keyword">inout</span> T)</span></span>&#123;</span><br><span class="line">    (a,b) = (b,a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> i2 = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> fn:(<span class="keyword">inout</span> <span class="type">Int</span>,<span class="keyword">inout</span> <span class="type">Int</span>)-&gt;() = <span class="built_in">swap</span></span><br><span class="line">fn(&amp;i1, &amp;i2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"i1=\(i1),i2=\(i2)"</span>)<span class="comment">//i1=20,i2=10</span></span><br></pre></td></tr></table></figure><p>泛型类型赋值给变量要制定好类型<code>fn:(inout Int,inout Int)-&gt;()</code><br><a id="more"></a></p><h5 id="二-泛型类型"><a href="#二-泛型类型" class="headerlink" title="二 泛型类型"></a>二 泛型类型</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">E</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element:E)</span></span> &#123;</span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.last!</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stack = <span class="type">Stack</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">stack.push(<span class="number">11</span>)</span><br><span class="line">stack.push(<span class="number">44</span>)</span><br><span class="line">stack.push(<span class="number">55</span>)</span><br><span class="line">stack.push(<span class="number">66</span>)</span><br><span class="line">stack.push(<span class="number">77</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.pop()) <span class="comment">//77</span></span><br><span class="line"><span class="built_in">print</span>(stack.size())<span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>手动写了一个栈,栈在初始化要指定类型,下面我们看一下泛型的继承</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubStack</span>&lt;T&gt; :<span class="title">Stack</span>&lt;T&gt;&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承的子类也要加上泛型类型<code>&lt;T&gt;</code> ,  下面我们看一下结构体的泛型,有哪些注意事项</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">E</span>]()</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element:E)</span></span> &#123;</span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.last!</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stack = <span class="type">Stack</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">stack.push(<span class="string">"one"</span>)</span><br><span class="line">stack.push(<span class="string">"two"</span>)</span><br><span class="line">stack.push(<span class="string">"three"</span>)</span><br><span class="line">stack.push(<span class="string">"four"</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.pop())  <span class="comment">//four</span></span><br><span class="line"><span class="built_in">print</span>(stack.size())<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>主要⚠️点就是结构体在内部修改变量的函数要加上<code>mutating</code>,接下来我们再看一下枚举里的泛型</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Score</span>&lt;<span class="title">MMA</span>&gt; &#123;</span></span><br><span class="line">    <span class="keyword">case</span> point(MMA)</span><br><span class="line">    <span class="keyword">case</span> grade(String)</span><br><span class="line">&#125;</span><br><span class="line">let score = Score&lt;Int&gt;.point(<span class="number">100</span>)</span><br><span class="line">let score1 = Score&lt;String&gt;.grade(<span class="string">"三年级"</span>)</span><br><span class="line">print(score)</span><br><span class="line">print(score1)</span><br></pre></td></tr></table></figure><p>其实不管结构体还是枚举使用了泛型在实例化实例的时候都要指定好类型,因为只有你指定好了类型,系统才知道给它分配多少内存空间</p><h5 id="三-泛型的底层实现原理"><a href="#三-泛型的底层实现原理" class="headerlink" title="三 泛型的底层实现原理"></a>三 泛型的底层实现原理</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func swapValues&lt;T&gt;(_ <span class="selector-tag">a</span>:inout T, _ <span class="selector-tag">b</span>:inout T)&#123;</span><br><span class="line">    (<span class="selector-tag">a</span>,b) = (<span class="selector-tag">b</span>,a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> i1 = <span class="number">10</span></span><br><span class="line"><span class="selector-tag">var</span> i2 = <span class="number">20</span></span><br><span class="line"><span class="function"><span class="title">swap</span><span class="params">(&amp;i1, &amp;i2)</span></span></span><br><span class="line"><span class="selector-tag">var</span> i3 = <span class="number">13.0</span></span><br><span class="line"><span class="selector-tag">var</span> i4 = <span class="number">14.0</span></span><br><span class="line"><span class="function"><span class="title">swap</span><span class="params">(&amp;i3, &amp;i4)</span></span></span><br></pre></td></tr></table></figure><p>汇编代码如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">0x100001232</span> <span class="string">&lt;+82&gt;:</span>  <span class="string">leaq</span>   <span class="number">-0x30</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x100001236</span> <span class="string">&lt;+86&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x21,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x10000123b</span> <span class="string">&lt;+91&gt;:</span>  <span class="string">callq</span>  <span class="number">0x1000054b0</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">    <span class="number">0x100001240</span> <span class="string">&lt;+96&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x5fb9</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.i1 :</span> <span class="string">Swift.Int</span></span><br><span class="line">    <span class="number">0x100001247</span> <span class="string">&lt;+103&gt;:</span> <span class="string">leaq</span>   <span class="number">0x5fba</span><span class="string">(%rip),</span> <span class="string">%rcx</span>        <span class="string">;</span> <span class="attr">sudy.i2 :</span> <span class="string">Swift.Int</span></span><br><span class="line">    <span class="number">0x10000124e</span> <span class="string">&lt;+110&gt;:</span> <span class="string">movq</span>   <span class="number">0x4e23</span><span class="string">(%rip),</span> <span class="string">%rdx</span>        <span class="string">;</span> <span class="string">(void</span> <span class="string">*)0x00007fff8494db88:</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Swift.Int</span></span><br><span class="line">    <span class="number">0x100001255</span> <span class="string">&lt;+117&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100001258</span> <span class="string">&lt;+120&gt;:</span> <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x10000125b</span> <span class="string">&lt;+123&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005486</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">Swift.swap&lt;A&gt;(inout</span> <span class="string">A,</span> <span class="string">inout</span> <span class="string">A)</span> <span class="string">-&gt;</span> <span class="string">()</span></span><br><span class="line">    <span class="number">0x100001260</span> <span class="string">&lt;+128&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x30</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100001264</span> <span class="string">&lt;+132&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000054ce</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x100001269</span> <span class="string">&lt;+137&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x18</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x10000126d</span> <span class="string">&lt;+141&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000054ce</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x100001272</span> <span class="string">&lt;+146&gt;:</span> <span class="string">leaq</span>   <span class="number">0x5f97</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.i3 :</span> <span class="string">Swift.Double</span></span><br><span class="line">    <span class="number">0x100001279</span> <span class="string">&lt;+153&gt;:</span> <span class="string">xorl</span>   <span class="string">%r8d,</span> <span class="string">%r8d</span></span><br><span class="line">    <span class="number">0x10000127c</span> <span class="string">&lt;+156&gt;:</span> <span class="string">movl</span>   <span class="string">%r8d,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x10000127f</span> <span class="string">&lt;+159&gt;:</span> <span class="string">movsd</span>  <span class="number">0x44a1</span><span class="string">(%rip),</span> <span class="string">%xmm0</span>       <span class="string">;</span> <span class="string">xmm0</span> <span class="string">=</span> <span class="string">mem[0],zero</span></span><br><span class="line">    <span class="number">0x100001287</span> <span class="string">&lt;+167&gt;:</span> <span class="string">movsd</span>  <span class="number">0x44a1</span><span class="string">(%rip),</span> <span class="string">%xmm1</span>       <span class="string">;</span> <span class="string">xmm1</span> <span class="string">=</span> <span class="string">mem[0],zero</span></span><br><span class="line">    <span class="number">0x10000128f</span> <span class="string">&lt;+175&gt;:</span> <span class="string">movsd</span>  <span class="string">%xmm1,</span> <span class="number">0x5f79</span><span class="string">(%rip)</span>       <span class="string">;</span> <span class="attr">sudy.i3 :</span> <span class="string">Swift.Double</span></span><br><span class="line">    <span class="number">0x100001297</span> <span class="string">&lt;+183&gt;:</span> <span class="string">movsd</span>  <span class="string">%xmm0,</span> <span class="number">0x5f79</span><span class="string">(%rip)</span>       <span class="string">;</span> <span class="attr">sudy.i4 :</span> <span class="string">Swift.Double</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x10000129f</span> <span class="string">&lt;+191&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x1000012a2</span> <span class="string">&lt;+194&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x48</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x1000012a6</span> <span class="string">&lt;+198&gt;:</span> <span class="string">movl</span>   <span class="string">$0x21,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x1000012ab</span> <span class="string">&lt;+203&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000054b0</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">    <span class="number">0x1000012b0</span> <span class="string">&lt;+208&gt;:</span> <span class="string">leaq</span>   <span class="number">0x5f61</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.i4 :</span> <span class="string">Swift.Double</span></span><br><span class="line">    <span class="number">0x1000012b7</span> <span class="string">&lt;+215&gt;:</span> <span class="string">xorl</span>   <span class="string">%r8d,</span> <span class="string">%r8d</span></span><br><span class="line">    <span class="number">0x1000012ba</span> <span class="string">&lt;+218&gt;:</span> <span class="string">movl</span>   <span class="string">%r8d,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x1000012bd</span> <span class="string">&lt;+221&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x1000012c0</span> <span class="string">&lt;+224&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x60</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x1000012c4</span> <span class="string">&lt;+228&gt;:</span> <span class="string">movl</span>   <span class="string">$0x21,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x1000012c9</span> <span class="string">&lt;+233&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000054b0</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">    <span class="number">0x1000012ce</span> <span class="string">&lt;+238&gt;:</span> <span class="string">leaq</span>   <span class="number">0x5f3b</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.i3 :</span> <span class="string">Swift.Double</span></span><br><span class="line">    <span class="number">0x1000012d5</span> <span class="string">&lt;+245&gt;:</span> <span class="string">leaq</span>   <span class="number">0x5f3c</span><span class="string">(%rip),</span> <span class="string">%rcx</span>        <span class="string">;</span> <span class="attr">sudy.i4 :</span> <span class="string">Swift.Double</span></span><br><span class="line">    <span class="number">0x1000012dc</span> <span class="string">&lt;+252&gt;:</span> <span class="string">movq</span>   <span class="number">0x4d8d</span><span class="string">(%rip),</span> <span class="string">%rdx</span>        <span class="string">;</span> <span class="string">(void</span> <span class="string">*)0x00007fff8494d510:</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Swift.Double</span></span><br><span class="line">    <span class="number">0x1000012e3</span> <span class="string">&lt;+259&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x1000012e6</span> <span class="string">&lt;+262&gt;:</span> <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x1000012e9</span> <span class="string">&lt;+265&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005486</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">Swift.swap&lt;A&gt;(inout</span> <span class="string">A,</span> <span class="string">inout</span> <span class="string">A)</span> <span class="string">-&gt;</span> <span class="string">()</span></span><br></pre></td></tr></table></figure><p>精简汇编</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x100001240</span> <span class="string">&lt;+96&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x5fb9</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.i1 :</span> <span class="string">Swift.Int</span></span><br><span class="line">   <span class="number">0x100001247</span> <span class="string">&lt;+103&gt;:</span> <span class="string">leaq</span>   <span class="number">0x5fba</span><span class="string">(%rip),</span> <span class="string">%rcx</span>        <span class="string">;</span> <span class="attr">sudy.i2 :</span> <span class="string">Swift.Int</span></span><br><span class="line">   <span class="number">0x10000124e</span> <span class="string">&lt;+110&gt;:</span> <span class="string">movq</span>   <span class="number">0x4e23</span><span class="string">(%rip),</span> <span class="string">%rdx</span>        <span class="string">;</span> <span class="string">(void</span> <span class="string">*)0x00007fff8494db88:</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Swift.Int</span></span><br><span class="line">   <span class="number">0x10000125b</span> <span class="string">&lt;+123&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005486</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">Swift.swap&lt;A&gt;(inout</span> <span class="string">A,</span> <span class="string">inout</span> <span class="string">A)</span> <span class="string">-&gt;</span> <span class="string">()</span></span><br><span class="line">  </span><br><span class="line">   <span class="number">0x1000012ce</span> <span class="string">&lt;+238&gt;:</span> <span class="string">leaq</span>   <span class="number">0x5f3b</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.i3 :</span> <span class="string">Swift.Double</span></span><br><span class="line">   <span class="number">0x1000012d5</span> <span class="string">&lt;+245&gt;:</span> <span class="string">leaq</span>   <span class="number">0x5f3c</span><span class="string">(%rip),</span> <span class="string">%rcx</span>        <span class="string">;</span> <span class="attr">sudy.i4 :</span> <span class="string">Swift.Double</span></span><br><span class="line">   <span class="number">0x1000012dc</span> <span class="string">&lt;+252&gt;:</span> <span class="string">movq</span>   <span class="number">0x4d8d</span><span class="string">(%rip),</span> <span class="string">%rdx</span>        <span class="string">;</span> <span class="string">(void</span> <span class="string">*)0x00007fff8494d510:</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Swift.Double</span></span><br><span class="line">   <span class="number">0x1000012e9</span> <span class="string">&lt;+265&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005486</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">Swift.swap&lt;A&gt;(inout</span> <span class="string">A,</span> <span class="string">inout</span> <span class="string">A)</span> <span class="string">-&gt;</span> <span class="string">()</span></span><br></pre></td></tr></table></figure><p>通过汇编我们发现两次调用swap函数地址是一样的:<code>0x100005486</code>,然后调用函数我们发现传入了三个参数,两个参数,一个类型参数,这样我们就明白了泛型跟平时我们调用的函数一样,他之所以可以支持不同类型,因为他接收了一个类型参数.这正如我们定义的那样:泛型可以将类型参数化,提高代码复用率 即每次调用都是同一个地址,将类型当作参数传递</p><h5 id="四-关联类型-Associated-Type"><a href="#四-关联类型-Associated-Type" class="headerlink" title="四 关联类型(Associated Type)"></a>四 关联类型(Associated Type)</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span> <span class="comment">//关联类型</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element:Element)</span></span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">Element</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">Element</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringStack</span>: <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给关联类型设置真实类型</span></span><br><span class="line"><span class="comment">//    typealias Element = String</span></span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">String</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element:String)</span></span> &#123;</span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        elements.last!</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协议中要使用泛型不能使用<code>&lt;T&gt;</code> ,要使用<code>associatedtype xxxtype</code>来关联泛型类型, 实现泛型协议我们可以通过<code>typealias Element = String</code>指定泛型类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span> <span class="comment">//关联类型</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element:Element)</span></span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">Element</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">Element</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringStack</span>&lt;<span class="title">E</span>&gt;: <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给关联类型设置真实类型</span></span><br><span class="line"><span class="comment">//    typealias Element = String</span></span><br><span class="line">    <span class="keyword">var</span> elements = [<span class="type">E</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element:E)</span></span> &#123;</span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">E</span> &#123;</span><br><span class="line">        elements.last!</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以定义一个泛型类来遵循泛型协议, 协议类型还有一些注意点⚠️</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:<span class="type">Runnable&#123;&#125;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:<span class="type">Runnable&#123;&#125;</span></span></span><br><span class="line">func <span class="keyword">get</span>(_ type: <span class="built_in">Int</span>) -&gt; Runnable &#123;</span><br><span class="line">    <span class="keyword">if</span> type == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Car()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> r1 = <span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> r2 = <span class="keyword">get</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这种协议中没有关联类型的,能够很好的运行,一旦协议中有关联类型就会报错了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123;</span><br><span class="line">    associatedtype Element</span><br><span class="line">    <span class="keyword">var</span> speed:Element &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:<span class="type">Runnable&#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed:<span class="built_in">Double</span> &#123; <span class="number">0.0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:<span class="type">Runnable&#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed:<span class="built_in">Int</span> &#123; <span class="number">10</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">func <span class="keyword">get</span>(_ type: <span class="built_in">Int</span>) -&gt; Runnable &#123; <span class="comment">//❌</span></span><br><span class="line">    <span class="keyword">if</span> type == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Car()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> r1 = <span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> r2 = <span class="keyword">get</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>为什么会报错呢,当你返回多个遵循有关联类型协议的对象时,系统无法确定协议中关联的类型该是哪一个,那么就会报错,那么有什么解决办法呢,如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123;</span><br><span class="line">    associatedtype Element</span><br><span class="line">    <span class="keyword">var</span> speed:Element &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:<span class="type">Runnable&#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed:<span class="built_in">Double</span> &#123; <span class="number">0.0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:<span class="type">Runnable&#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed:<span class="built_in">Int</span> &#123; <span class="number">10</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">func <span class="keyword">get</span>&lt;T:Runnable&gt;(_ type: <span class="built_in">Int</span>) -&gt; T &#123;</span><br><span class="line">    <span class="keyword">if</span> type == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person() <span class="keyword">as</span>! T</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Car() <span class="keyword">as</span>! T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> r1:Person = <span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> r2:Car = <span class="keyword">get</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>使用泛型来解决,但是这个有风险,get里面有强制转换,type =0 传的不是person类型就会报错了, 那么我们还有第二种办法,通过不透明类型some来解决</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable &#123;</span><br><span class="line">    associatedtype Element</span><br><span class="line">    <span class="keyword">var</span> speed:Element &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:<span class="type">Runnable&#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed:<span class="built_in">Double</span> &#123; <span class="number">0.0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:<span class="type">Runnable&#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> speed:<span class="built_in">Int</span> &#123; <span class="number">10</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">func <span class="keyword">get</span>(_ type: <span class="built_in">Int</span>) -&gt;some Runnable &#123;</span><br><span class="line">    <span class="keyword">return</span> Person()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> r1 = <span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> r2 = <span class="keyword">get</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>some限制只能返回一种类型,这样他就保证了协议中的关联类型是啥,但是缺少了动态判断,只能返回一种类型,some除了用在返回值类型上,一般还可以用在属性类型上</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123; <span class="keyword">associatedtype</span> <span class="type">Speed</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Runnable</span> </span>&#123; <span class="keyword">typealias</span> <span class="type">Speed</span> = <span class="type">Double</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pet: some <span class="type">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Dog</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="五-类型约束"><a href="#五-类型约束" class="headerlink" title="五 类型约束"></a>五 类型约束</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;  &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapValues</span>&lt;T: Person &amp; Runnable&gt;<span class="params">(<span class="number">_</span> a:<span class="keyword">inout</span> T,<span class="number">_</span> b:<span class="keyword">inout</span> T)</span></span>   &#123;</span><br><span class="line">    (a,b) = (b,a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>约束类型必须是遵循Runable协议并且是Person的子类</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span>:<span class="type">Equatable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>:<span class="title">Equatable</span>&gt;: <span class="title">Stackable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">E</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">equal</span>&lt;S1: Stackable, S2: Stackable&gt;<span class="params">(<span class="number">_</span> s1: S1, <span class="number">_</span> s2: S2)</span></span> -&gt; <span class="type">Bool</span> <span class="keyword">where</span> <span class="type">S1</span>.<span class="type">Element</span> == <span class="type">S2</span>.<span class="type">Element</span>, <span class="type">S1</span>.<span class="type">Element</span> : <span class="type">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack1 = <span class="type">Stack</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> stack2 = <span class="type">Stack</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"><span class="built_in">equal</span>(stack1, stack2)<span class="comment">//类型不同会报错</span></span><br></pre></td></tr></table></figure><p>泛型类型要遵循Equatable协议,生成的实例要遵循Stackable协议</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-泛型初识-写一个泛型函数&quot;&gt;&lt;a href=&quot;#一-泛型初识-写一个泛型函数&quot; class=&quot;headerlink&quot; title=&quot;一 泛型初识,写一个泛型函数&quot;&gt;&lt;/a&gt;一 泛型初识,写一个泛型函数&lt;/h5&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func swapValues&amp;lt;T&amp;gt;(_ &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;:inout T, _ &lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt;:inout T)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;,b) = (&lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt;,a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; i1 = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; i2 = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;i1, &amp;amp;i2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;i1=\(i1),i2=\(i2)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; i3 = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; i4 = &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;i3, &amp;amp;i4)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;i3=\(i3),i4=\(i4)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;泛型可以将类型参数化,提高代码复用率,减少代码量&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swapValues&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; a:&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; T, &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; b:&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; T)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (a,b) = (b,a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i1 = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i2 = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn:(&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)-&amp;gt;() = &lt;span class=&quot;built_in&quot;&gt;swap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn(&amp;amp;i1, &amp;amp;i2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;i1=\(i1),i2=\(i2)&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//i1=20,i2=10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;泛型类型赋值给变量要制定好类型&lt;code&gt;fn:(inout Int,inout Int)-&amp;gt;()&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 错误处理</title>
    <link href="http://example.com/2019/11/20/swift-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2019/11/20/swift-错误处理/</id>
    <published>2019-11-20T12:50:45.000Z</published>
    <updated>2020-12-19T09:47:20.908Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-开发中常见的错误"><a href="#一-开发中常见的错误" class="headerlink" title="一 开发中常见的错误"></a>一 开发中常见的错误</h5><ul><li>语法错误</li></ul><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">10</span></span><br><span class="line">age += <span class="number">20</span> <span class="comment">//❌</span></span><br></pre></td></tr></table></figure><ul><li>逻辑错误</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if age &gt; <span class="number">10</span> &#123;</span><br><span class="line">    age = <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行时错误(闪退,异常等)</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1:Int, <span class="number">_</span> num2:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">10</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="二-swift自定义运行时错误"><a href="#二-swift自定义运行时错误" class="headerlink" title="二 swift自定义运行时错误"></a>二 swift自定义运行时错误</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SomeError</span>:<span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> illagalArg(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfBounds(<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfMemory</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1:Int, <span class="number">_</span> num2:Int)</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">SomeError</span>.illagalArg(<span class="string">"0不能为除数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">try</span> divide(<span class="number">10</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><blockquote><p>结果:Fatal error: Error raised at top level: sudy.SomeError.illagalArg(“0不能为除数”): file /BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1100.8.275.1/swift/stdlib/public/core/ErrorType.swift, line 200<br>2020-12-15 21:08:37.261235+0800 sudy[861:19351] Fatal error: Error raised at top level: sudy.SomeError.illagalArg(“0不能为除数”): file /BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1100.8.275.1/swift/stdlib/public/core/ErrorType.swift, line 200<br>(lldb) </p></blockquote><p>swift 中可以通过Error协议自定义运行时的错误信息,使用自定义错误有以下注意点⚠️</p><ol><li>函数内部通过throw抛出自定义Error.</li><li>可能会抛出Error的函数必须加上</li><li>需要使用try调用可能会抛出Error的函数,try只是能够让你调用函数,它并不能处理错误,不出现错误,它能保证你能正常调用函数,出现错误还是会程序中断</li></ol><h5 id="三-自定义错误处理-do-catch"><a href="#三-自定义错误处理-do-catch" class="headerlink" title="三 自定义错误处理(do-catch)"></a>三 自定义错误处理(do-catch)</h5><p>上面我们讲过try,只能保证你能调用函数,但它并不能进行错误的处理,在swift中可以使用do-catch捕捉Error</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SomeError</span>:<span class="title">Error</span> </span>&#123; </span><br><span class="line">    <span class="keyword">case</span> illagalArg(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfBounds(<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfMemory</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1:Int, <span class="number">_</span> num2:Int)</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">SomeError</span>.illagalArg(<span class="string">"0不能为除数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">try</span> divide(<span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> <span class="type">SomeError</span>.illagalArg(msg) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"参数异常:"</span>, msg)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"其它错误"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然了最好把错误处理给写全了</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">try</span> divide(<span class="number">10</span>, <span class="number">0</span>))  //这里抛出异常,<span class="keyword">do</span>&#123;&#125;作用域下面的代码都不会执行了</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> SomeError.illagalArg(msg) &#123;</span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"参数异常:"</span>, msg)</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> SomeError.outOfBounds(size, <span class="built_in">index</span>)&#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"下标越界:"</span>,<span class="string">"size=\(size)"</span>, <span class="string">"index=\(index)"</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span>  SomeError.outOfMemory&#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"内存溢出"</span>)</span><br><span class="line">&#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"其它错误"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抛出Error后,try下一句知道do作用域结束的代码都将停止运行</p><p>其实还有一种方式可以起到处理异常的作用,我们可以不捕捉Error,在当前函数增加throws声明,Error将自动抛给上层函数,如果抛到最顶层还是没有处理Error程序就会终止</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">SomeError</span>:<span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> illagalArg(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfBounds(<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfMemory</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1:Int, <span class="number">_</span> num2:Int)</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">SomeError</span>.illagalArg(<span class="string">"0不能为除数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span><span class="keyword">throws</span>-&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> divide(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> test1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> test2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">try</span> test3())</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> <span class="type">SomeError</span>.illagalArg(msg) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"参数异常:"</span>, msg)</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> <span class="type">SomeError</span>.outOfBounds(size, index)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"下标越界:"</span>,<span class="string">"size=\(size)"</span>, <span class="string">"index=\(index)"</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span>  <span class="type">SomeError</span>.outOfMemory&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"内存溢出"</span>)</span><br><span class="line">&#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"其它错误"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test1,tes2,test3可以通过添加throws声明,将异常往上抛,不捕捉</p><p>处理错误的其它写法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">SomeError</span>:<span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> illagalArg(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfBounds(<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfMemory</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1:Int, <span class="number">_</span> num2:Int)</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">SomeError</span>.illagalArg(<span class="string">"0不能为除数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">try</span> divide(<span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">SomeError</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">try</span> divide(<span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">is</span> <span class="type">SomeError</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"some Error"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> divide(<span class="number">20</span>, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">    <span class="keyword">switch</span> error &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">SomeError</span>.illagalArg(msg):</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"其它错误"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发中固定用一种就可以了,花样多了徒增烦恼😡</p><h5 id="四-try-try-调用会有异常的函数"><a href="#四-try-try-调用会有异常的函数" class="headerlink" title="四 try? try! 调用会有异常的函数"></a>四 try? try! 调用会有异常的函数</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SomeError</span>:<span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> illagalArg(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfBounds(<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfMemory</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1:Int, <span class="number">_</span> num2:Int)</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">SomeError</span>.illagalArg(<span class="string">"0不能为除数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = <span class="keyword">try</span>? divide(<span class="number">40</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> result2 = <span class="keyword">try</span>? divide(<span class="number">20</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> result3 = <span class="keyword">try</span>? divide(<span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(result1,result2,result3) <span class="comment">//Optional(4) nil Optional(4)</span></span><br></pre></td></tr></table></figure><p>使用try? 返回值是个可选项,调用可能会抛出异常的函数,如果出现异常直接返回nil,程序不会终止</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result1 = <span class="keyword">try</span>! divide(<span class="number">40</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> result2 = <span class="keyword">try</span>? divide(<span class="number">20</span>, <span class="number">0</span>)<span class="comment">//try!程序会退出</span></span><br><span class="line"><span class="keyword">var</span> result3 = <span class="keyword">try</span>! divide(<span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(result1,result2,result3) <span class="comment">//4 nil 4</span></span><br></pre></td></tr></table></figure><p>使用try! 会自动解包,但出现异常程序会终止</p><h5 id="五-rethrows函数里闭包抛出错误"><a href="#五-rethrows函数里闭包抛出错误" class="headerlink" title="五 rethrows函数里闭包抛出错误"></a>五 rethrows函数里闭包抛出错误</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SomeError</span>:<span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> illagalArg(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfBounds(<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfMemory</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1:Int, <span class="number">_</span> num2:Int)</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">SomeError</span>.illagalArg(<span class="string">"0不能为除数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exec</span><span class="params">(<span class="number">_</span> fn:<span class="params">(Int,Int)</span></span></span><span class="keyword">throws</span>-&gt;<span class="type">Int</span>, <span class="number">_</span> num1:<span class="type">Int</span>,<span class="number">_</span> num2:<span class="type">Int</span>) <span class="keyword">rethrows</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">try</span> fn(num1,num2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> exec(divide, <span class="number">10</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>结果:<br>Fatal error: Error raised at top level: sudy.SomeError.illagalArg(“0不能为除数”): file /BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1100.8.275.1/swift/stdlib/public/core/ErrorType.swift, line 200<br>2020-12-15 21:56:38.894378+0800 sudy[1075:42074] Fatal error: Error raised at top level: sudy.SomeError.illagalArg(“0不能为除数”): file /BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1100.8.275.1/swift/stdlib/public/core/ErrorType.swift, line 200</p></blockquote><p>rethrows表明函数本身不会抛出错误,但是调用闭包参数抛出错误,那么它会将向上抛出错误</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> ?? &lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span></span><br></pre></td></tr></table></figure><p>rethrows 在空合并运算符中的应用</p><h5 id="六-defer-即使抛出错误-也必须要执行的"><a href="#六-defer-即使抛出错误-也必须要执行的" class="headerlink" title="六 defer 即使抛出错误,也必须要执行的"></a>六 defer 即使抛出错误,也必须要执行的</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SomeError</span>:<span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> illagalArg(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfBounds(<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfMemory</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> num1:Int, <span class="number">_</span> num2:Int)</span></span><span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">SomeError</span>.illagalArg(<span class="string">"0不能为除数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">(<span class="number">_</span> filename:String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"open"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">(<span class="number">_</span> file:Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"close"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processFile</span><span class="params">(<span class="number">_</span> filename:String)</span></span><span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> file = <span class="keyword">open</span>(filename)</span><br><span class="line">    <span class="keyword">defer</span>&#123;</span><br><span class="line">        close(file)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用file</span></span><br><span class="line">   <span class="built_in">print</span>( <span class="keyword">try</span> divide(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">    <span class="comment">// close将会在这里调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> processFile(<span class="string">"test.txt"</span>)</span><br></pre></td></tr></table></figure><p>defer语句用来定义以任何方式(抛错误,return等)离开代码块钱必须要执行的代码,defer将语句延迟当前作用于结束之前执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn1</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"fn1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn2</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"fn2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">defer</span>&#123;</span><br><span class="line">        fn1()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">defer</span> &#123;</span><br><span class="line">        fn2()</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="comment">//fn2</span></span><br><span class="line"><span class="comment">// fn1</span></span><br></pre></td></tr></table></figure><p>defer 语句的执行顺序于定义顺序相反</p><h5 id="七-assert-断言"><a href="#七-assert-断言" class="headerlink" title="七 assert(断言)"></a>七 assert(断言)</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(<span class="number">_</span> v1: Int, <span class="number">_</span> v2: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">assert</span>(v2 != <span class="number">0</span>, <span class="string">"除数不能为0"</span>)</span><br><span class="line">    <span class="keyword">return</span> v1 / v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(divide(<span class="number">20</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><blockquote><p>结果:Assertion failed: 除数不能为0: file /Users/mac/Documents/qusongwork/source/study/sudy/sudy/main.swift, line 3<br>2020-12-15 22:24:47.030266+0800 sudy[1292:60312] Assertion failed: 除数不能为0: file /Users/mac/Documents/qusongwork/source/study/sudy/sudy/main.swift, line 3</p></blockquote><p>在debug模式下使用assert对于不符合指定条件就抛出运行时错误</p><h5 id="八-fataError直接抛出错误"><a href="#八-fataError直接抛出错误" class="headerlink" title="八 fataError直接抛出错误"></a>八 fataError直接抛出错误</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:<span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"don`t call student init"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(score:<span class="type">Int</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="type">Student</span>(score: <span class="number">80</span>)</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="type">Student</span>()</span><br></pre></td></tr></table></figure><p>fataError有点像assets,你不需要throws声明函数,你也不需要try去调用函数数,函数正常声明,正常调用,有错误它会直接抛出错误.对于某些必须要干的事,别人没干你可以考虑使用它.</p><h5 id="九-局部作用域"><a href="#九-局部作用域" class="headerlink" title="九 局部作用域"></a>九 局部作用域</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"dog run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"dog died"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dog1 = <span class="type">Dog</span>()</span><br><span class="line">    dog1.age = <span class="number">10</span></span><br><span class="line">    dog1.run()</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// dog run</span></span><br><span class="line"><span class="comment">// dog died</span></span><br></pre></td></tr></table></figure><p>可以使用do实现局部作用域</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-开发中常见的错误&quot;&gt;&lt;a href=&quot;#一-开发中常见的错误&quot; class=&quot;headerlink&quot; title=&quot;一 开发中常见的错误&quot;&gt;&lt;/a&gt;一 开发中常见的错误&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;语法错误&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight ceylon&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;age += &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//❌&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;逻辑错误&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if age &amp;gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;运行时错误(闪退,异常等)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; num1:Int, &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; num2:Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num1 / num2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(divide(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 元类型</title>
    <link href="http://example.com/2019/11/15/swift-%E5%85%83%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2019/11/15/swift-元类型/</id>
    <published>2019-11-15T12:52:44.000Z</published>
    <updated>2020-12-19T09:50:34.537Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-初识元类型"><a href="#一-初识元类型" class="headerlink" title="一 初识元类型"></a>一 初识元类型</h5><p>swift提供了两种特殊的类型:<strong>Any</strong>, <strong>AnyObject</strong></p><ul><li><strong>Any</strong>: 可以代表任意类型</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu:Any = <span class="number">10</span></span><br><span class="line">stu = <span class="string">"Jack"</span></span><br><span class="line">stu = Student()</span><br></pre></td></tr></table></figure><p>stu是Any类型,赋值给它啥都行</p><ul><li><strong>AnyObject</strong>:可以代表任意类类型</li></ul><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protocol Runnable:<span class="keyword">AnyObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="keyword">Person</span>: <span class="keyword">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="keyword">Size</span>: <span class="keyword">Runnable</span> &#123; //❌</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在协议后面写上AnyObect 代表只有类才能遵守这个协议</p><a id="more"></a><h5 id="二-类型判断与转换-is-as-as-as"><a href="#二-类型判断与转换-is-as-as-as" class="headerlink" title="二 类型判断与转换(is as? as! as)"></a>二 类型判断与转换(is as? as! as)</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span>,<span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Student run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">study</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"student study"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu: <span class="type">Any</span> = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Int</span>) <span class="comment">//true</span></span><br><span class="line">stu = <span class="string">"Jack"</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">String</span>) <span class="comment">//true</span></span><br><span class="line">stu = <span class="type">Student</span>()</span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Person</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Student</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(stu <span class="keyword">is</span> <span class="type">Runnable</span>)<span class="comment">//true</span></span><br><span class="line">stu = <span class="number">10</span></span><br><span class="line">(stu <span class="keyword">as</span>? <span class="type">Student</span>)?.study() <span class="comment">//没有调用study stu转换student失败,可选链断了,就不会在后续c调用了</span></span><br><span class="line">stu = <span class="type">Student</span>()</span><br><span class="line">(stu <span class="keyword">as</span>? <span class="type">Student</span>)?.study() <span class="comment">//student study</span></span><br><span class="line">(stu <span class="keyword">as</span>! <span class="type">Student</span>).study()  <span class="comment">//student study</span></span><br><span class="line">(stu <span class="keyword">as</span>? <span class="type">Runnable</span>)?.run()  <span class="comment">//Student run</span></span><br></pre></td></tr></table></figure><p>is 用来判断是否为某种类型,as用来做强制类型转换<br>as 100%能转,as! 转了就强制解包,失败就崩溃, as? 转了后为可选项失败就为nil</p><h5 id="三-X-self-X-Type-AnyClass-X代表类"><a href="#三-X-self-X-Type-AnyClass-X代表类" class="headerlink" title="三 X.self   X.Type, AnyClass (X代表类)"></a>三 X.self   X.Type, AnyClass (X代表类)</h5><ol><li>X.self是一个元类型(metadata)的指针,    metadata存放着类型相关信息</li><li>X.self属于X.Type类型</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> s = Student()</span><br><span class="line"><span class="keyword">var</span> pType:Student.<span class="built_in">Type</span> = Student.self <span class="comment">//X.self属于X.Type类型</span></span><br></pre></td></tr></table></figure><p><img src="../assets/blogImg/yuanleixing01.png" alt> pType 指向的就是s地址内容的前8个字节</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :<span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> anyType: <span class="type">AnyObject</span>.<span class="type">Type</span> = <span class="type">Person</span>.<span class="keyword">self</span></span><br><span class="line">anyType = <span class="type">Student</span>.<span class="keyword">self</span></span><br></pre></td></tr></table></figure><p>父类类型可以指向子类类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :<span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">AnyClass</span> = <span class="type">AnyObject</span>.<span class="type">Type</span></span><br><span class="line"><span class="keyword">var</span> anyType:<span class="type">AnyClass</span> = <span class="type">Person</span>.<span class="keyword">self</span></span><br><span class="line">anyType = <span class="type">Student</span>.<span class="keyword">self</span></span><br></pre></td></tr></table></figure><h5 id="3-AnyClass-就是AnyObject-Type的别名-代表任意类类型的类型"><a href="#3-AnyClass-就是AnyObject-Type的别名-代表任意类类型的类型" class="headerlink" title="3 AnyClass 就是AnyObject.Type的别名,代表任意类类型的类型"></a>3 AnyClass 就是AnyObject.Type的别名,代表任意类类型的类型</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :<span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">var</span> perType = type(of: per) <span class="comment">//Person.self</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Person</span>.<span class="keyword">self</span> == type(of: per))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>type(of: per) 就是取出per对象的前8个字节,及类型信息</p><h5 id="四-元类型的应用"><a href="#四-元类型的应用" class="headerlink" title="四 元类型的应用"></a>四 元类型的应用</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabBarViewController</span>: <span class="title">UITabBarController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        setValue(<span class="type">TabBar</span>(), forKey: <span class="string">"tabBar"</span>)</span><br><span class="line">        tabBar.tintColor = <span class="type">UIColor</span>.orange</span><br><span class="line">        addChildConroller(<span class="string">"首页"</span>,<span class="string">"news"</span>,<span class="string">"news"</span>, <span class="type">HomeViewController</span>.<span class="keyword">self</span>)</span><br><span class="line">        addChildConroller(<span class="string">"发现"</span>,<span class="string">"find"</span>,<span class="string">"find"</span>, <span class="type">FindViewController</span>.<span class="keyword">self</span>)</span><br><span class="line">        addChildConroller(<span class="string">"我的"</span>,<span class="string">"mine"</span>,<span class="string">"mine"</span>, <span class="type">MineViewController</span>.<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addChildConroller</span><span class="params">(<span class="number">_</span> title:String,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> image:String,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> selectImage:String,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> type:UIViewController.<span class="keyword">Type</span>)</span></span>-&gt;()&#123;</span><br><span class="line">        <span class="keyword">let</span> child = <span class="type">NavigationController</span>(rootViewController: type.<span class="keyword">init</span>()) <span class="comment">//元类型初始化实例</span></span><br><span class="line">        child.setValue(<span class="type">NavigationBar</span>(), forKey: <span class="string">"navigationBar"</span>)</span><br><span class="line">        child.title = title</span><br><span class="line">        child.tabBarItem.image = <span class="type">UIImage</span>(named: image)</span><br><span class="line">        child.tabBarItem.selectedImage = <span class="type">UIImage</span>(named: selectImage)</span><br><span class="line">        child.tabBarItem.setTitleTextAttributes([<span class="type">NSAttributedString</span>.<span class="type">Key</span>.foregroundColor:<span class="type">UIColor</span>.orange], <span class="keyword">for</span>: .selected)</span><br><span class="line">        </span><br><span class="line">        addChild(child)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态添加app底部菜单栏</p><h5 id="五-大写的Self"><a href="#五-大写的Self" class="headerlink" title="五 大写的Self"></a>五 大写的Self</h5><p>Self代表当前类型,一般用作返回值类型,限定返回值跟方法调用者必须是同一类型,类似于OC的instanceType</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> -&gt; <span class="type">Self</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125; <span class="comment">//使用元类型初始化,必须是required</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        type(of: <span class="keyword">self</span>).<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(p.test()) <span class="comment">//Person</span></span><br><span class="line"><span class="keyword">var</span> stu = <span class="type">Student</span>()</span><br><span class="line"><span class="built_in">print</span>(stu.test()) <span class="comment">//Student</span></span><br></pre></td></tr></table></figure><p>类初始化器需要required 结构体不需要,类有继承,结构体没有继承.要保证子类一定要实现它的初始化方法因为test方法里面使用的是 type(of: self).init(),那么怎么保证每个类都有init()方法呢,那就在父类中加reqiured,这样子类中都必须要定义init()方法, 那么就可以统一的调用 type(of: self).init()了,如果不定义required,那么子类有可能就不会实现init()方法,那么调用test方法就会报错</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-初识元类型&quot;&gt;&lt;a href=&quot;#一-初识元类型&quot; class=&quot;headerlink&quot; title=&quot;一 初识元类型&quot;&gt;&lt;/a&gt;一 初识元类型&lt;/h5&gt;&lt;p&gt;swift提供了两种特殊的类型:&lt;strong&gt;Any&lt;/strong&gt;, &lt;strong&gt;AnyObject&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Any&lt;/strong&gt;: 可以代表任意类型&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stu:Any = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stu = &lt;span class=&quot;string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stu = Student()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;stu是Any类型,赋值给它啥都行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AnyObject&lt;/strong&gt;:可以代表任意类类型&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight puppet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;protocol Runnable:&lt;span class=&quot;keyword&quot;&gt;AnyObject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Person&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;Runnable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Size&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;Runnable&lt;/span&gt; &amp;#123; //❌&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在协议后面写上AnyObect 代表只有类才能遵守这个协议&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 协议</title>
    <link href="http://example.com/2019/11/12/swift-%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2019/11/12/swift-协议/</id>
    <published>2019-11-12T11:31:51.000Z</published>
    <updated>2020-12-12T12:53:24.067Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-初识协议"><a href="#一-初识协议" class="headerlink" title="一 初识协议"></a>一 初识协议</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Drawble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index:<span class="type">Int</span>)-&gt;<span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCase</span>: <span class="title">Drawble</span>,<span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.x = x</span><br><span class="line">        <span class="keyword">self</span>.y = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">           index</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<strong>protocol</strong>来声明一个协议,协议可以用来定义<strong>方法</strong>,<strong>属性</strong>,<strong>下标</strong>的声明,协议可以被枚举,结构体,类遵守(多个协议之间用逗号分隔)</p><p>协议中定义方法时不能有默认参数值<br><a id="more"></a></p><h5 id="二-协议中的属性"><a href="#二-协议中的属性" class="headerlink" title="二 协议中的属性"></a>二 协议中的属性</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Drawble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index:<span class="type">Int</span>)-&gt;<span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Drawble</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">get</span>&#123;index&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span>: <span class="title">Drawble</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x:<span class="type">Int</span>&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">           <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> y:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">"person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">get</span>&#123;index&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>协议中定义属性时必须用var关键字(定义成let,如果别人使用计算属性去实现呢?有可能会改属性的值)</li><li>实现协议时的属性权限要不小于协议中定义的属性权限</li><li>协议定义 get, set可以用存储属性,也可以用计算属性去实现</li><li>协议定义的get,任何属性都可以实现</li></ol><h5 id="三-协议中的类型方法"><a href="#三-协议中的类型方法" class="headerlink" title="三 协议中的类型方法"></a>三 协议中的类型方法</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">draw</span>() </span>&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person3</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Person4</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了保证通用,协议中必须用static定义类型方法,类型属性,类型下标,因为结构体和枚举只支持static,不支持class,只有类才支持class</p><h5 id="四-协议中的mutating"><a href="#四-协议中的mutating" class="headerlink" title="四 协议中的mutating"></a>四 协议中的mutating</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"person draw"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person3</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">      x = <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Person4</span>: <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> one,two,three</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span> = .two</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有将协议中的实例方法标记为mutating,才允许结构体,枚举的具体实现修改自身内存,类的实现方法不需要加mutating,枚举,结构体才需要加mutating</p><h5 id="五-协议中定义初始化器"><a href="#五-协议中定义初始化器" class="headerlink" title="五 协议中定义初始化器"></a>五 协议中定义初始化器</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protocol Drawable &#123;</span><br><span class="line">    <span class="keyword">init</span>(x:<span class="built_in">Int</span>, y:<span class="built_in">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="type">Drawable &#123;</span></span></span><br><span class="line">    </span><br><span class="line">    required <span class="keyword">init</span>(x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion2</span>: <span class="type">Drawable &#123;</span></span></span><br><span class="line">    <span class="keyword">init</span>(x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协议中可以定义初始化器,非final类实现时必须加上required,因为协议想让所有遵守它的类都要实现它定义的初始化器, 不加required,实现协议类的子类就可以不用实现协议规范的初始化器,这是协议所不愿看到的.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protocol Livable &#123;</span><br><span class="line">    <span class="keyword">init</span>(age:<span class="built_in">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(age:<span class="built_in">Int</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person</span>,<span class="type">Livable &#123;</span></span></span><br><span class="line">    required <span class="keyword">override</span> <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果从协议实现的初始化器,刚好是重写的父类的指定初始化器,那么这个初始化器必须同时加上,required,override</p><h5 id="init-init-init"><a href="#init-init-init" class="headerlink" title="init init? init!"></a>init init? init!</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">protocol Livable &#123;</span><br><span class="line">    <span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">init</span>?(age:<span class="built_in">Int</span>)</span><br><span class="line">    <span class="keyword">init</span>!(no:<span class="built_in">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:<span class="type">Livable &#123;</span></span></span><br><span class="line">    </span><br><span class="line">    required <span class="keyword">init</span>()&#123;&#125;</span><br><span class="line"><span class="comment">//    required init!()&#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">    required <span class="keyword">init</span>?(age: <span class="built_in">Int</span>) &#123;&#125;</span><br><span class="line"><span class="comment">//    required init(age: Int) &#123;&#125;</span></span><br><span class="line"><span class="comment">//    required init!(age: Int) &#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    required <span class="keyword">init</span>!(no: <span class="built_in">Int</span>) &#123;&#125;</span><br><span class="line"><span class="comment">//    required init?(no: Int) &#123;&#125;</span></span><br><span class="line"><span class="comment">//    required init(no: Int) &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>协议中定义的init?,init!,可以用init init? init!去实现</li><li>协议中定义的init,可以用init ,init!去实现</li></ol><h5 id="六-协议继承"><a href="#六-协议继承" class="headerlink" title="六 协议继承"></a>六 协议继承</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Livable</span>:<span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">breath</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Livable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">breath</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person need breath"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person can run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个协议可以继承其它协议</p><h5 id="七-协议组合"><a href="#七-协议组合" class="headerlink" title="七 协议组合"></a>七 协议组合</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Livable</span>:<span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">breath</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func0</span><span class="params">(obj:Person)</span></span>  &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(obj:Livable)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">(obj:Livable &amp; Runnable)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func3</span><span class="params">(obj:Livable &amp; Runnable &amp; Person)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> realP = <span class="type">Livable</span> &amp; <span class="type">Runnable</span> &amp; <span class="type">Person</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func4</span><span class="params">(obj:realP)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>协议组合,可以包含1个类类型,最多也只能有一个类类型</p><h5 id="八-协议举例"><a href="#八-协议举例" class="headerlink" title="八 协议举例"></a>八 协议举例</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span> : <span class="title">CaseIterable</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> spring, summer,atumn,winter</span><br><span class="line">&#125;</span><br><span class="line">let seasons = Season.allCases</span><br><span class="line">print(seasons.count)</span><br><span class="line"><span class="keyword">for</span> season in seasons &#123;</span><br><span class="line">    print(season)</span><br><span class="line">&#125;</span><br><span class="line">/<span class="regexp">/4</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/spring</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/summer</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/atumn</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/winter</span></span><br></pre></td></tr></table></figure><p>让枚举遵守CaseIterable协议,可以实现枚举遍历值</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person : CustomStringConvertible,CustomDebugStringConvertible &#123;</span><br><span class="line">    <span class="selector-tag">var</span> age = <span class="number">0</span></span><br><span class="line">    <span class="selector-tag">var</span> description: String&#123; <span class="string">"person \(age)"</span>&#125;</span><br><span class="line">    <span class="selector-tag">var</span> debugDescription: String&#123;<span class="string">"debug person\(age)"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> person = Person()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(person)</span></span></span><br><span class="line"><span class="function"><span class="title">debugPrint</span><span class="params">(person)</span></span></span><br><span class="line"><span class="comment">//person 0</span></span><br><span class="line"><span class="comment">//debug person0</span></span><br></pre></td></tr></table></figure><p>遵守 <code>CustomStringConvertible、CustomDebugStringConvertible</code> 协议，都可以自定义实例的打印字符串, print调用的是<code>CustomStringConvertible</code>协议的description,debugPrint、po调用的是<code>CustomDebugStringConvertible</code>协议的debugDescription</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-初识协议&quot;&gt;&lt;a href=&quot;#一-初识协议&quot; class=&quot;headerlink&quot; title=&quot;一 初识协议&quot;&gt;&lt;/a&gt;一 初识协议&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Drawble&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;subscript&lt;/span&gt;(index:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test1&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestCase&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Drawble&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Test1&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(x:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,y:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.x = x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.y = y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;subscript&lt;/span&gt;(index: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;strong&gt;protocol&lt;/strong&gt;来声明一个协议,协议可以用来定义&lt;strong&gt;方法&lt;/strong&gt;,&lt;strong&gt;属性&lt;/strong&gt;,&lt;strong&gt;下标&lt;/strong&gt;的声明,协议可以被枚举,结构体,类遵守(多个协议之间用逗号分隔)&lt;/p&gt;
&lt;p&gt;协议中定义方法时不能有默认参数值&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 可选链</title>
    <link href="http://example.com/2019/10/25/swift-%E5%8F%AF%E9%80%89%E9%93%BE/"/>
    <id>http://example.com/2019/10/25/swift-可选链/</id>
    <published>2019-10-25T10:52:27.000Z</published>
    <updated>2020-12-12T11:24:14.560Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price  = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> weight = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> dog:<span class="type">Dog</span> = <span class="type">Dog</span>()</span><br><span class="line">    <span class="keyword">var</span> car:<span class="type">Car?</span> = <span class="type">Car</span>()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">age</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index:<span class="type">Int</span>)-&gt;<span class="type">Int</span>&#123;</span><br><span class="line">        index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person: <span class="type">Person?</span> = <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">var</span> age1 = person!.age()<span class="comment">//Int</span></span><br><span class="line"><span class="keyword">var</span> age2 = person?.age()<span class="comment">//Int?</span></span><br><span class="line"><span class="keyword">var</span> name = person?.name <span class="comment">//String?</span></span><br><span class="line"><span class="keyword">var</span> index = person?[<span class="number">6</span>]<span class="comment">//Int?</span></span><br><span class="line">person?.name = person?.getName() <span class="keyword">as</span>! <span class="type">String</span></span><br></pre></td></tr></table></figure><ol><li>如果可选项为nil,调用方法,下标,属性失败,结果为nil</li><li>如果可选项不为nil,调用方法,下标,属性成功,结果会被包装成可选项</li><li>如果结果本来就是可选项,不会进行再次包装</li></ol><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price  = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> weight = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> dog:<span class="type">Dog</span> = <span class="type">Dog</span>()</span><br><span class="line">    <span class="keyword">var</span> car:<span class="type">Car?</span> = <span class="type">Car</span>()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">age</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index:<span class="type">Int</span>)-&gt;<span class="type">Int</span>&#123;</span><br><span class="line">        index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person: <span class="type">Person?</span> = <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">var</span> dog = person?.dog</span><br><span class="line"><span class="keyword">var</span> weight = person?.dog.weight</span><br><span class="line"><span class="keyword">var</span> price = person?.car?.price</span><br></pre></td></tr></table></figure><p>多个?可以链接在一起,如果链中任何一个节点是nil,那么整个链就会调用失败</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var scores = [<span class="string">"Jack"</span>: [<span class="number">86</span>,<span class="number">82</span>,<span class="number">84</span>],<span class="string">"Rose"</span>: [<span class="number">79</span>,<span class="number">94</span>,<span class="number">81</span>]]</span><br><span class="line">scores[<span class="string">"Jack"</span>]?[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">scores[<span class="string">"Rose"</span>]?[<span class="number">2</span>] = <span class="number">80</span></span><br></pre></td></tr></table></figure><p>可选链在数组中的应用scores[“Rose”]?为nil,则不再进行后续的赋值操作</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1:<span class="type">Int?</span> = <span class="number">5</span></span><br><span class="line">num1? = <span class="number">10</span> <span class="comment">//Optional(10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2:<span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line">num2? = <span class="number">10</span> <span class="comment">//nil</span></span><br></pre></td></tr></table></figure><p>可选项后面加? 如果nil则可选链调用失败,不再在进行后面的赋值</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict:<span class="type"></span>[<span class="keyword">String</span>:<span class="type"></span>(<span class="keyword">Int</span>,<span class="keyword">Int</span>)-&gt;<span class="keyword">Int</span>] = [</span><br><span class="line">    <span class="string">"sum"</span>: <span class="type"></span>(+),</span><br><span class="line">    <span class="string">"difference"</span>: <span class="type"></span>(-)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> result = dict[<span class="string">"sum"</span>]?(<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>可选链在字典中的应用如果dict[“sum”]?为空则不会再进行后面的调用</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; price  = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; weight = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name:&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dog:&lt;span class=&quot;type&quot;&gt;Dog&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Dog&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; car:&lt;span class=&quot;type&quot;&gt;Car?&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Car&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;person eat&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;subscript&lt;/span&gt;(index:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person: &lt;span class=&quot;type&quot;&gt;Person?&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age1 = person!.age()&lt;span class=&quot;comment&quot;&gt;//Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age2 = person?.age()&lt;span class=&quot;comment&quot;&gt;//Int?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = person?.name &lt;span class=&quot;comment&quot;&gt;//String?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = person?[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;//Int?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person?.name = person?.getName() &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;如果可选项为nil,调用方法,下标,属性失败,结果为nil&lt;/li&gt;
&lt;li&gt;如果可选项不为nil,调用方法,下标,属性成功,结果会被包装成可选项&lt;/li&gt;
&lt;li&gt;如果结果本来就是可选项,不会进行再次包装&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 初始化器</title>
    <link href="http://example.com/2019/10/20/swift-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8/"/>
    <id>http://example.com/2019/10/20/swift-初始化器/</id>
    <published>2019-10-20T08:39:04.000Z</published>
    <updated>2020-12-12T09:14:34.353Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-初始化器种类-只针对一类"><a href="#一-初始化器种类-只针对一类" class="headerlink" title="一 初始化器种类(只针对一类)"></a>一 初始化器种类(只针对一类)</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">struct Ract &#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">width</span>:Int = <span class="number">0</span></span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">height</span>:Int = <span class="number">0</span></span><br><span class="line">    init(<span class="built_in">width</span>:Int) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Size &#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">width</span>:Int = <span class="number">0</span></span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">height</span>:Int = <span class="number">0</span></span><br><span class="line">    init(<span class="built_in">width</span>:Int) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">var</span> s = Size(<span class="built_in">width</span>: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>类,结构体,枚举都可以定义初始化器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> height:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = Size()</span><br></pre></td></tr></table></figure><p>如果我们没有指定初始化器,编译器会默认给我们生成一个初始化器,如果我们指定了初始化器,编译器不会再给我们生成默认的,指定初始化器,要保证类的成员变量都能够初始化<br><a id="more"></a></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Size &#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">width</span>:Int = <span class="number">0</span></span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">height</span>:Int = <span class="number">0</span></span><br><span class="line">    init(<span class="built_in">width</span>:Int,<span class="built_in">height</span>:Int) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">        self.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">    &#125;</span><br><span class="line">    convenience init(<span class="built_in">width</span>:Int) &#123;</span><br><span class="line">        self.init(<span class="built_in">width</span>:<span class="built_in">width</span>,<span class="built_in">height</span>:<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">var</span> s = Size(<span class="built_in">width</span>: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s.<span class="built_in">width</span>)</span><br></pre></td></tr></table></figure><p>类有两种初始化器: 指定初始化器,便捷初始化器,这两种初始化器在定义时有如下注意点⚠️:</p><ol><li>每个类至少有一个指定初始化器,指定初始化器时类的主要初始化器</li><li>默认初始化器总是类的指定初始化器</li><li>类偏向于少量指定初始化器,一个类通常只定义一个指定初始化器</li></ol><h5 id="二-初始化器调用流程"><a href="#二-初始化器调用流程" class="headerlink" title="二 初始化器调用流程"></a>二 初始化器调用流程</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>()&#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age:<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> score: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> grade:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(score:<span class="type">Int</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.score = score</span><br><span class="line">        <span class="keyword">self</span>.grade = <span class="number">0</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: <span class="number">0</span>). <span class="comment">//指定初始化器必须从它的直系父类调用指定初始化器</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>()&#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(score:<span class="number">0</span>) <span class="comment">//便捷初始化器最终必须要调用一个指定初始化器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(score:<span class="type">Int</span>,age:<span class="type">Int</span>) &#123; <span class="comment">//便捷初始化器必须从同一个类里调用另一个初始化器</span></span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化器的相互调用规则:</strong></p><ol><li>指定初始化器必须从它的直系父类调用指定初始化器</li><li>便捷初始化器必须从同一个类里调用另一个初始化器</li><li>便捷初始化器最终必须要调用一个指定初始化器</li></ol><p>下面是初始化器相互调用流程图<br><img src="../assets/blogImg/chushihua01.png" alt><br><img src="../assets/blogImg/chushihua02.png" alt><br>这一套流程,保证了,我们使用任意的初始化,都可以完整的初始化实例</p><h5 id="三-两段式初始化"><a href="#三-两段式初始化" class="headerlink" title="三 两段式初始化"></a>三 两段式初始化</h5><p><img src="../assets/blogImg/chushihua03.png" alt><br>为什么在supper.init之前调用方法或者或则修改继承的属性都会报错呢? 下面就要牵扯到了swift,初始化的两个阶段了</p><h6 id="第一阶段-初始化所有存储属性"><a href="#第一阶段-初始化所有存储属性" class="headerlink" title="第一阶段: 初始化所有存储属性"></a>第一阶段: 初始化所有存储属性</h6><ol><li>外层调用指定或者便捷初始化器</li><li>分配内存给实例, 但未初始化</li><li>指定初始化器确保当前类定义的存储属性都初始化</li><li>指定初始化器调用父类的初始化器,不断向上调用,形成初始化链 </li></ol><h6 id="第二阶段-设置新的存储属性值"><a href="#第二阶段-设置新的存储属性值" class="headerlink" title="第二阶段: 设置新的存储属性值"></a>第二阶段: 设置新的存储属性值</h6><ol><li>从初始化器往下,链中的每一个指定初始化器都有机会进一步定制实例</li><li>初始化器现在能够使用self(访问,修改它的属性,调用它的实例方法等等)</li><li>最终链中任何便捷初始化都有机会定制实例以及使用self</li></ol><p>通过两段式初始化调用流程,我们可以解释下为什么上面报错了,supper.init之前调用方法,此时类的存储属性还有未进行初始化的,也就是说第一阶段还未完成,此时self是不能使用的,只有第一阶段完成,才能使用</p><h5 id="四-初始化的安全检查"><a href="#四-初始化的安全检查" class="headerlink" title="四 初始化的安全检查"></a>四 初始化的安全检查</h5><ol><li><p>指定初始化器必须保证在调用父类初始化之前,其所在类定义的所有存储属性都要初始化完成<br><img src="../assets/blogImg/chushihua04.png" alt></p></li><li><p>指定初始化器必须先调用父类初始化器,然后才能为继承的属性设置新值<br><img src="../assets/blogImg/chushihua05.png" alt></p></li><li><p>便捷初始化器必须先调用同类中的其他初始化器,然后再为任意属性设置新值<br><img src="../assets/blogImg/chushihua06.png" alt></p></li><li><p>初始化器在第一阶段初始化完成之前,不能调用任何实例方法,不能对区任何实例属性的值,也不能引用self<br><img src="../assets/blogImg/chushihua03.png" alt></p></li></ol><h5 id="五-重写初始化器"><a href="#五-重写初始化器" class="headerlink" title="五 重写初始化器"></a>五 重写初始化器</h5><p>方法名称,参数个数,参数类型,参数标签都相同即为重写<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age:<span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    convenience <span class="keyword">init</span>()&#123;</span><br><span class="line">        self.<span class="keyword">init</span>(age:<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> score: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">var</span> grade:<span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.grade = <span class="number">0</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当重写父类的指定初始化器时,必须加上override<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age:<span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    convenience <span class="keyword">init</span>()&#123;</span><br><span class="line">        self.<span class="keyword">init</span>(age:<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> score: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">var</span> grade:<span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span>(score:<span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.score = score</span><br><span class="line">        self.grade = <span class="number">0</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> convenience <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.<span class="keyword">init</span>(score:<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类重写为便捷初始化器也要必须加上override</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(age:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>()&#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age:<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> score: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> grade:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(score:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.score = score</span><br><span class="line">        <span class="keyword">self</span>.grade = <span class="number">0</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;  <span class="comment">//不用加override</span></span><br><span class="line">        <span class="keyword">self</span>.score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.grade = <span class="number">0</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果子类写了一个匹配父类便捷初始化器的初始化器,不用加上override, 那是因为父类的便捷初始化器永远不会通过之类调用,因此子类无法重写父类的便捷初始化器,因此这种情形也不叫重写</p><h5 id="六-初始化器自动继承"><a href="#六-初始化器自动继承" class="headerlink" title="六 初始化器自动继承"></a>六 初始化器自动继承</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">var</span> name:String</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(age:<span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">        self.name = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(age:<span class="built_in">Int</span>, name:String) &#123;</span><br><span class="line">        self.age = age</span><br><span class="line">        self.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = Studen(age: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> stu2 = Studen(age: <span class="number">10</span>, name: <span class="string">"zhangshan"</span>)</span><br></pre></td></tr></table></figure><ol><li>如果子类没有自定义任何类型的指定初始化器,它会自动继承父类所有的指定初始化器</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(age:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.name = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(age:<span class="type">Int</span>, name:<span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(no: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age:no, name:<span class="string">"hello"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="type">Studen</span>(no: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>子类只添加了便捷初始化器, 也会自动继承父类的所有指定初始化器</li></ol><h5 id="七-required修饰指定初始化器"><a href="#七-required修饰指定初始化器" class="headerlink" title="七 required修饰指定初始化器"></a>七 required修饰指定初始化器</h5> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    required <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">init</span>(age:<span class="built_in">Int</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">     required <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用required修饰指定初始化器,表明其所有子类都必须实现该初始化器,子类可以通过继承或者重写来实现,如果子类重写required初始化器,也必须加上required,不用加override,如果你想让一个初始化器始终都会调用,不管有几层子类继承它,那就把它定义成required</p><h5 id="八-属性观察器"><a href="#八-属性观察器" class="headerlink" title="八 属性观察器"></a>八 属性观察器</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"willSet"</span>,newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"didSet"</span>,oldValue,age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.age = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="type">Studen</span>()</span><br><span class="line"><span class="comment">//willSet 1</span></span><br><span class="line"><span class="comment">//didSet 0 1</span></span><br></pre></td></tr></table></figure><p>父类的属性在它自己的初始化器中赋值不会触发属性观察器,但在子类的初始化器中赋值会触发属性观察器</p><h5 id="九-可失败初始化器"><a href="#九-可失败初始化器" class="headerlink" title="九 可失败初始化器"></a>九 可失败初始化器</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="built_in">String</span></span><br><span class="line">    init?(name:<span class="built_in">String</span>) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person(name: <span class="string">""</span>)</span><br><span class="line"><span class="built_in">print</span>(person)<span class="comment">//Optional(sudy.Person)</span></span><br></pre></td></tr></table></figure><p>类,结构体,枚举都可以使用init?定义可失败初始化器,他返回的对象是个可选项类型的对象</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Answer</span> : <span class="title">Int</span>&#123;</span></span><br><span class="line">    <span class="keyword">case</span> wrong, right</span><br><span class="line">&#125;</span><br><span class="line">var an = Answer(<span class="symbol">rawValue:</span><span class="number">1</span>)</span><br><span class="line">print(an)/<span class="regexp">/Optional(sudy.Answer.right)</span></span><br></pre></td></tr></table></figure><p>枚举的可失败初始化器</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>?(name:<span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(name:<span class="type">String</span>) &#123;  <span class="comment">//❌</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="type">Person</span>(name: <span class="string">""</span>)</span><br><span class="line"><span class="built_in">print</span>(person)<span class="comment">//Optional(sudy.Person)</span></span><br></pre></td></tr></table></figure><p>不允许同时定义参数标签,参数个数,参数类型相同的可失败初始化器和非可失败初始化器(真要能定义,那我知道你要调用哪一个初始化器呢)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">class</span> Person &#123;</span><br><span class="line">    var <span class="built_in">name</span>:String</span><br><span class="line">    init!(<span class="built_in">name</span>:String) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">name</span>.isEmpty &#123;</span><br><span class="line"><span class="built_in">            return</span> nil</span><br><span class="line">        &#125;</span><br><span class="line">        self.<span class="built_in">name</span> = <span class="built_in">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用init!定义隐式解包的可失败初始化器</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>?(name:<span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="type">Person</span>(name: <span class="string">""</span>)</span><br><span class="line"><span class="built_in">print</span>(person)<span class="comment">//Optional(sudy.Person)</span></span><br></pre></td></tr></table></figure><p>可失败初始化器可以调用非可失败初始化器</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">     <span class="keyword">init</span>?(name:<span class="type">String</span>) &#123;</span><br><span class="line">       <span class="keyword">self</span>.name = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name:<span class="string">"lucy"</span>)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="type">Person</span>(name: <span class="string">""</span>)</span><br><span class="line"><span class="built_in">print</span>(person)<span class="comment">//Optional(sudy.Person)</span></span><br></pre></td></tr></table></figure><p>非可失败初始化器调用可失败初始化器需要进行解包</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span></span><br><span class="line">     <span class="keyword">init</span>?(age:<span class="type">Int</span>) &#123;</span><br><span class="line">       <span class="keyword">self</span>.age = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age:<span class="type">Int</span>(<span class="string">"1234"</span>)!)!  <span class="comment">//这里如果失败,下面的代码就不会执行了</span></span><br><span class="line">        <span class="keyword">self</span>.age = <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(person.age)<span class="comment">//Optional(0)</span></span><br></pre></td></tr></table></figure><p>如果初始化器调用一个可失败初始化器导致初始化失败，那么整个初始化过程都失败，并且之后的代码都停止执行 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="built_in">Int</span></span><br><span class="line">     <span class="keyword">init</span>?(age:<span class="built_in">Int</span>) &#123;</span><br><span class="line">       self.age = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        self.age = <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person()</span><br><span class="line">print(person.age)<span class="comment">//Optional(0)</span></span><br></pre></td></tr></table></figure><p>可以用一个非可失败初始化器重写一个可失败初始化器，但反过来是不行的</p><h5 id="十-反初始化器"><a href="#十-反初始化器" class="headerlink" title="十 反初始化器"></a>十 反初始化器</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span></span><br><span class="line">     <span class="keyword">init</span>?(age:<span class="type">Int</span>) &#123;</span><br><span class="line">       <span class="keyword">self</span>.age = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person over"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(age: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">"student over"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> person = <span class="type">Student</span>(age: <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(person.age)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">//20</span></span><br><span class="line"><span class="comment">//student over</span></span><br><span class="line"><span class="comment">//person over</span></span><br></pre></td></tr></table></figure><p>deinit叫做反初始化器，类似于C++的析构函数、OC中的dealloc方法 p当类的实例对象被释放内存时，就会调用实例对象的deinit方法</p><p>deinit不接受任何参数，不能写小括号，不能自行调用 n 父类的deinit能被子类继承</p><p>子类的deinit实现执行完毕后会调用父类的deinit</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-初始化器种类-只针对一类&quot;&gt;&lt;a href=&quot;#一-初始化器种类-只针对一类&quot; class=&quot;headerlink&quot; title=&quot;一 初始化器种类(只针对一类)&quot;&gt;&lt;/a&gt;一 初始化器种类(只针对一类)&lt;/h5&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct Ract &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;:Int = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;:Int = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;:Int) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Size &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;:Int = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;:Int = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;:Int) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; s = Size(&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类,结构体,枚举都可以定义初始化器&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Size&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; width:&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; height:&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = Size()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们没有指定初始化器,编译器会默认给我们生成一个初始化器,如果我们指定了初始化器,编译器不会再给我们生成默认的,指定初始化器,要保证类的成员变量都能够初始化&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 多态</title>
    <link href="http://example.com/2019/10/15/swift-%E5%A4%9A%E6%80%81/"/>
    <id>http://example.com/2019/10/15/swift-多态/</id>
    <published>2019-10-15T02:39:04.000Z</published>
    <updated>2020-12-12T04:47:36.388Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-多态概念"><a href="#一-多态概念" class="headerlink" title="一 多态概念"></a>一 多态概念</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal sleep"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anim = <span class="type">Animal</span>()</span><br><span class="line">anim.speak()</span><br><span class="line">anim.eat()</span><br><span class="line">anim.sleep()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"----------"</span>)</span><br><span class="line">anim = <span class="type">Dog</span>()</span><br><span class="line">anim.speak()</span><br><span class="line">anim.eat()</span><br><span class="line">anim.sleep()</span><br><span class="line"><span class="comment">//Animal speak</span></span><br><span class="line"><span class="comment">//Animal eat</span></span><br><span class="line"><span class="comment">//Animal sleep</span></span><br><span class="line"><span class="comment">//----------</span></span><br><span class="line"><span class="comment">//Dog speak</span></span><br><span class="line"><span class="comment">//Dog eat</span></span><br><span class="line"><span class="comment">//Animal sleep</span></span><br></pre></td></tr></table></figure><p><strong>多态</strong>: 父类型的引用指向子类型的对象<br><a id="more"></a></p><h5 id="二-多态实现原理"><a href="#二-多态实现原理" class="headerlink" title="二 多态实现原理"></a>二 多态实现原理</h5><p>我们使用上面的代码,在anim.speak()打上断点,我们查看汇编如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">0x100001a9a</span> <span class="string">&lt;+714&gt;:</span>  <span class="string">movq</span>   <span class="number">0x69ef</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.anim :</span> <span class="string">sudy.Animal</span>  <span class="string">anim变量里的内容给%rax</span></span><br><span class="line">    <span class="number">0x100001aa1</span> <span class="string">&lt;+721&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rcx</span></span><br><span class="line">    <span class="number">0x100001aa4</span> <span class="string">&lt;+724&gt;:</span>  <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100001aa7</span> <span class="string">&lt;+727&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x148</span><span class="string">(%rbp)</span>  <span class="string">rax内容给</span> <span class="number">-0x148</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001aae</span> <span class="string">&lt;+734&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100006368</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_retain</span></span><br><span class="line">    <span class="number">0x100001ab3</span> <span class="string">&lt;+739&gt;:</span>  <span class="string">leaq</span>   <span class="number">-0x80</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100001ab7</span> <span class="string">&lt;+743&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x150</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001abe</span> <span class="string">&lt;+750&gt;:</span>  <span class="string">callq</span>  <span class="number">0x10000631a</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x100001ac3</span> <span class="string">&lt;+755&gt;:</span>  <span class="string">movq</span>   <span class="number">-0x148</span><span class="string">(%rbp),</span> <span class="string">%rax</span>  <span class="number">-0x148</span><span class="string">(%rbp)内容给rax</span></span><br><span class="line">    <span class="number">0x100001aca</span> <span class="string">&lt;+762&gt;:</span>  <span class="string">movq</span>   <span class="string">(%rax),</span> <span class="string">%rcx.</span>   <span class="string">rax内容给rcx</span></span><br><span class="line">    <span class="number">0x100001acd</span> <span class="string">&lt;+765&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%r13</span></span><br><span class="line">    <span class="number">0x100001ad0</span> <span class="string">&lt;+768&gt;:</span>  <span class="string">callq</span>  <span class="string">*0x50(%rcx).</span> <span class="string">调用0x50+rcx的方法地址</span> <span class="string">,就是speak方法</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x100001ad3</span> <span class="string">&lt;+771&gt;:</span>  <span class="string">movq</span>   <span class="number">-0x148</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">sudy`Dog.speak():</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x100001fb0</span> <span class="string">&lt;+0&gt;:</span>   <span class="string">pushq</span>  <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100001fb1</span> <span class="string">&lt;+1&gt;:</span>   <span class="string">movq</span>   <span class="string">%rsp,</span> <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100001fb4</span> <span class="string">&lt;+4&gt;:</span>   <span class="string">pushq</span>  <span class="string">%r13</span></span><br><span class="line">    <span class="number">0x100001fb6</span> <span class="string">&lt;+6&gt;:</span>   <span class="string">subq</span>   <span class="string">$0x38,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x100001fba</span> <span class="string">&lt;+10&gt;:</span>  <span class="string">movq</span>   <span class="string">$0x0,</span> <span class="number">-0x10</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001fc2</span> <span class="string">&lt;+18&gt;:</span>  <span class="string">movq</span>   <span class="string">%r13,</span> <span class="number">-0x10</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001fc6</span> <span class="string">&lt;+22&gt;:</span>  <span class="string">movq</span>   <span class="number">0x514b</span><span class="string">(%rip),</span> <span class="string">%r13</span>        <span class="string">;</span> <span class="string">(void</span> <span class="string">*)0x00007fff8451ea08:</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Any</span></span><br><span class="line">    <span class="number">0x100001fcd</span> <span class="string">&lt;+29&gt;:</span>  <span class="string">addq</span>   <span class="string">$0x8,</span> <span class="string">%r13</span></span><br><span class="line">    <span class="number">0x100001fd1</span> <span class="string">&lt;+33&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x1,</span> <span class="string">%edi</span></span><br><span class="line">    <span class="number">0x100001fd6</span> <span class="string">&lt;+38&gt;:</span>  <span class="string">movq</span>   <span class="string">%r13,</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x100001fd9</span> <span class="string">&lt;+41&gt;:</span>  <span class="string">callq</span>  <span class="number">0x1000062ba</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">Swift._allocateUninitializedArray&lt;A&gt;(Builtin.Word)</span> <span class="string">-&gt;</span> <span class="string">(Swift.Array&lt;A&gt;,</span> <span class="string">Builtin.RawPointer)</span></span><br><span class="line">    <span class="number">0x100001fde</span> <span class="string">&lt;+46&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x45fb</span><span class="string">(%rip),</span> <span class="string">%rdi</span>        <span class="string">;</span> <span class="string">"Dog speak"</span></span><br><span class="line">    <span class="number">0x100001fe5</span> <span class="string">&lt;+53&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x9,</span> <span class="string">%esi</span></span><br><span class="line">    <span class="number">0x100001fea</span> <span class="string">&lt;+58&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x1,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x100001fef</span> <span class="string">&lt;+63&gt;:</span>  <span class="string">movq</span>   <span class="string">%rdx,</span> <span class="number">-0x18</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001ff3</span> <span class="string">&lt;+67&gt;:</span>  <span class="string">movl</span>   <span class="string">%ecx,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x100001ff5</span> <span class="string">&lt;+69&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x20</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001ff9</span> <span class="string">&lt;+73&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100006242</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">Swift.String.init(_builtinStringLiteral:</span> <span class="string">Builtin.RawPointer,</span> <span class="attr">utf8CodeUnitCount:</span> <span class="string">Builtin.Word,</span> <span class="attr">isASCII:</span> <span class="string">Builtin.Int1)</span> <span class="string">-&gt;</span> <span class="string">Swift.String</span></span><br><span class="line">    <span class="number">0x100001ffe</span> <span class="string">&lt;+78&gt;:</span>  <span class="string">movq</span>   <span class="number">0x5043</span><span class="string">(%rip),</span> <span class="string">%rsi</span>        <span class="string">;</span> <span class="string">(void</span> <span class="string">*)0x00007fff84516cc8:</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Swift.String</span></span><br><span class="line">    <span class="number">0x100002005</span> <span class="string">&lt;+85&gt;:</span>  <span class="string">movq</span>   <span class="number">-0x18</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100002009</span> <span class="string">&lt;+89&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="number">0x18</span><span class="string">(%rdi)</span></span><br><span class="line">    <span class="number">0x10000200d</span> <span class="string">&lt;+93&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">(%rdi)</span></span><br><span class="line">    <span class="number">0x100002010</span> <span class="string">&lt;+96&gt;:</span>  <span class="string">movq</span>   <span class="string">%rdx,</span> <span class="number">0x8</span><span class="string">(%rdi)</span></span><br><span class="line">    <span class="number">0x100002014</span> <span class="string">&lt;+100&gt;:</span> <span class="string">callq</span>  <span class="number">0x100001cd0</span>               <span class="string">;</span> <span class="string">default</span> <span class="string">argument</span> <span class="number">1</span> <span class="string">of</span> <span class="string">Swift.print(_:</span> <span class="string">Any...,</span> <span class="attr">separator:</span> <span class="string">Swift.String,</span> <span class="attr">terminator:</span> <span class="string">Swift.String)</span> <span class="string">-&gt;</span> <span class="string">()</span> <span class="string">at</span> <span class="string">&lt;compiler-generated&gt;</span></span><br><span class="line">    <span class="number">0x100002019</span> <span class="string">&lt;+105&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x28</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x10000201d</span> <span class="string">&lt;+109&gt;:</span> <span class="string">movq</span>   <span class="string">%rdx,</span> <span class="number">-0x30</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100002021</span> <span class="string">&lt;+113&gt;:</span> <span class="string">callq</span>  <span class="number">0x100001cf0</span>               <span class="string">;</span> <span class="string">default</span> <span class="string">argument</span> <span class="number">2</span> <span class="string">of</span> <span class="string">Swift.print(_:</span> <span class="string">Any...,</span> <span class="attr">separator:</span> <span class="string">Swift.String,</span> <span class="attr">terminator:</span> <span class="string">Swift.String)</span> <span class="string">-&gt;</span> <span class="string">()</span> <span class="string">at</span> <span class="string">&lt;compiler-generated&gt;</span></span><br><span class="line">    <span class="number">0x100002026</span> <span class="string">&lt;+118&gt;:</span> <span class="string">movq</span>   <span class="number">-0x20</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x10000202a</span> <span class="string">&lt;+122&gt;:</span> <span class="string">movq</span>   <span class="number">-0x28</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x10000202e</span> <span class="string">&lt;+126&gt;:</span> <span class="string">movq</span>   <span class="number">-0x30</span><span class="string">(%rbp),</span> <span class="string">%r13</span></span><br><span class="line">    <span class="number">0x100002032</span> <span class="string">&lt;+130&gt;:</span> <span class="string">movq</span>   <span class="string">%rdx,</span> <span class="number">-0x38</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100002036</span> <span class="string">&lt;+134&gt;:</span> <span class="string">movq</span>   <span class="string">%r13,</span> <span class="string">%rdx</span></span><br><span class="line">    <span class="number">0x100002039</span> <span class="string">&lt;+137&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rcx</span></span><br><span class="line">    <span class="number">0x10000203c</span> <span class="string">&lt;+140&gt;:</span> <span class="string">movq</span>   <span class="number">-0x38</span><span class="string">(%rbp),</span> <span class="string">%r8</span></span><br><span class="line">    <span class="number">0x100002040</span> <span class="string">&lt;+144&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000062c6</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">Swift.print(_:</span> <span class="string">Any...,</span> <span class="attr">separator:</span> <span class="string">Swift.String,</span> <span class="attr">terminator:</span> <span class="string">Swift.String)</span> <span class="string">-&gt;</span> <span class="string">()</span></span><br><span class="line">    <span class="number">0x100002045</span> <span class="string">&lt;+149&gt;:</span> <span class="string">movq</span>   <span class="number">-0x38</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100002049</span> <span class="string">&lt;+153&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000062fc</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_bridgeObjectRelease</span></span><br><span class="line">    <span class="number">0x10000204e</span> <span class="string">&lt;+158&gt;:</span> <span class="string">movq</span>   <span class="number">-0x30</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100002052</span> <span class="string">&lt;+162&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000062fc</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_bridgeObjectRelease</span></span><br><span class="line">    <span class="number">0x100002057</span> <span class="string">&lt;+167&gt;:</span> <span class="string">movq</span>   <span class="number">-0x20</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x10000205b</span> <span class="string">&lt;+171&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000062fc</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_bridgeObjectRelease</span></span><br><span class="line">    <span class="number">0x100002060</span> <span class="string">&lt;+176&gt;:</span> <span class="string">addq</span>   <span class="string">$0x38,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x100002064</span> <span class="string">&lt;+180&gt;:</span> <span class="string">popq</span>   <span class="string">%r13</span></span><br><span class="line">    <span class="number">0x100002066</span> <span class="string">&lt;+182&gt;:</span> <span class="string">popq</span>   <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100002067</span> <span class="string">&lt;+183&gt;:</span> <span class="string">retq</span></span><br></pre></td></tr></table></figure><p>下面我们总结下调用流程<br><img src="../assets/blogImg/duotai01.png" alt></p><ol><li>取出animal 前8个字节,也就是Dog的类型信息</li><li>取出类型信息后0x50的地址进行调用</li><li>跟进去我们发现这个函数就是speak()函数</li></ol><h5 id="三-对象的方法放在哪"><a href="#三-对象的方法放在哪" class="headerlink" title="三 对象的方法放在哪"></a>三 对象的方法放在哪</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Animal sleep"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog eat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Dog run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anim = <span class="type">Dog</span>()</span><br><span class="line">anim.speak()</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x100001a89</span> &lt;+<span class="number">41</span>&gt;:  leaq   <span class="number">0x6a08</span>(<span class="symbol">%rip</span>), <span class="symbol">%rcx</span>        <span class="comment">; sudy.anim : sudy.Dog</span></span><br><span class="line"><span class="comment">0x100001a90 &lt;+48&gt;:  xorl   %r8d, %r8d</span></span><br><span class="line"><span class="comment">0x100001a93 &lt;+51&gt;:  movl   %r8d, %edx</span></span><br><span class="line"><span class="comment">0x100001a96 &lt;+54&gt;:  movq   %rax, 0x69fb(%rip)        ; sudy.anim : sudy.Dog</span></span><br><span class="line"><span class="comment">0x100001a9d &lt;+61&gt;:  movq   %rcx, %rdi</span></span><br><span class="line"><span class="comment">0x100001aa0 &lt;+64&gt;:  leaq   -0x20(%rbp), %rsi</span></span><br><span class="line"><span class="comment">0x100001aa4 &lt;+68&gt;:  movl   $0x20, %eax</span></span><br><span class="line"><span class="comment">0x100001aa9 &lt;+73&gt;:  movq   %rdx, -0x40(%rbp)</span></span><br><span class="line"><span class="comment">0x100001aad &lt;+77&gt;:  movq   %rax, %rdx</span></span><br><span class="line"><span class="comment">0x100001ab0 &lt;+80&gt;:  movq   -0x40(%rbp), %rcx</span></span><br><span class="line"><span class="comment">0x100001ab4 &lt;+84&gt;:  callq  0x1000062f6               ; symbol stub for: swift_beginAccess</span></span><br><span class="line"><span class="comment">0x100001ab9 &lt;+89&gt;:  movq   0x69d8(%rip), %rax        ; sudy.anim : sudy.Dog</span></span><br><span class="line"><span class="comment">0x100001ac0 &lt;+96&gt;:  movq   %rax, %rcx</span></span><br><span class="line"><span class="comment">0x100001ac3 &lt;+99&gt;:  movq   %rcx, %rdi</span></span><br><span class="line"><span class="comment">0x100001ac6 &lt;+102&gt;: movq   %rax, -0x48(%rbp)</span></span><br><span class="line"><span class="comment">0x100001aca &lt;+106&gt;: callq  0x100006368               ; symbol stub for: swift_retain</span></span><br><span class="line"><span class="comment">0x100001acf &lt;+111&gt;: leaq   -0x20(%rbp), %rdi</span></span><br><span class="line"><span class="comment">0x100001ad3 &lt;+115&gt;: movq   %rax, -0x50(%rbp)</span></span><br><span class="line"><span class="comment">0x100001ad7 &lt;+119&gt;: callq  0x10000631a               ; symbol stub for: swift_endAccess</span></span><br><span class="line"><span class="comment">0x100001adc &lt;+124&gt;: movq   -0x48(%rbp), %rax</span></span><br><span class="line"><span class="comment">0x100001ae0 &lt;+128&gt;: movq   (%rax), %rcx</span></span><br><span class="line"><span class="comment">0x100001ae3 &lt;+131&gt;: movq   %rax, %r13</span></span><br><span class="line"><span class="comment">0x100001ae6 &lt;+134&gt;: callq  *0x50(%rcx)</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">anim:</span> <span class="number">0x100008498</span></span><br><span class="line"><span class="attr">anim-metadata:</span> <span class="number">0x10058c0a0</span></span><br><span class="line"><span class="string">speak():0x100001ea0</span></span><br></pre></td></tr></table></figure><p>anim是全局变量,speak()方法地址跟它最接近,而且比anim地址小些.根据iOS内存结构我们可以推断,speak要么在全局区,要么在代码段<br><img src="../assets/blogImg/duotai02.png" alt></p><p>speak函数地址是:0x100001ea0,那我们直接看一下它在Mach-O文件的分布区域</p><p><img src="../assets/blogImg/duotai03.png" alt><br>我们可以看到seak函数是在代码段</p><p>anim是全局变量它的地址是:0x100008498,它应该在数据段(_DATA),我们来看一下是不是<br><img src="../assets/blogImg/duotai04.png" alt><br><img src="../assets/blogImg/duotai05.png" alt><br>我们可以看到它是在DATA段,并且处在DATA末尾</p><p>最后,swift多态实现类似于C++的虚表,C++中虚函数是通过一张虚函数表(Virtual Table)来实现的，在这个表中，主要是一个类的虚函数表的地址表；这张表解决了继承、覆盖的问题。在有虚函数的类的实例中这个表被分配在了这个实例的内存中，所以当我们用父类的指针来操作一个子类的时候，这张虚函数表就像一张地图一样指明了实际所应该调用的函数。</p><p>C++编译器是保证虚函数表的指针存在于对象实例中最前面的位置(是为了保证取到虚函数表的最高的性能)，这样我们就能通过已经实例化的对象的地址得到这张虚函数表，再遍历其中的函数指针，并调用相应的函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-多态概念&quot;&gt;&lt;a href=&quot;#一-多态概念&quot; class=&quot;headerlink&quot; title=&quot;一 多态概念&quot;&gt;&lt;/a&gt;一 多态概念&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Animal speak&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Animal eat&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Animal sleep&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt;:&lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dog speak&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dog eat&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dog run&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; anim = &lt;span class=&quot;type&quot;&gt;Animal&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anim.speak()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anim.eat()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anim.sleep()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;----------&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anim = &lt;span class=&quot;type&quot;&gt;Dog&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anim.speak()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anim.eat()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anim.sleep()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Animal speak&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Animal eat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Animal sleep&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//----------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Dog speak&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Dog eat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Animal sleep&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;多态&lt;/strong&gt;: 父类型的引用指向子类型的对象&lt;br&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 继承</title>
    <link href="http://example.com/2019/10/06/swift-%E7%BB%A7%E6%89%BF/"/>
    <id>http://example.com/2019/10/06/swift-继承/</id>
    <published>2019-10-06T06:56:29.000Z</published>
    <updated>2020-12-09T14:04:56.495Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-继承初探"><a href="#一-继承初探" class="headerlink" title="一 继承初探"></a>一 继承初探</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:<span class="type">Animal &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> weight = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义类在类名后加:父类 就形成了继承关系.</p><ol><li>值类型不支持继承,只有类支持继承(枚举,结构体都不支持继承)</li><li>没有父类的类称基类,swift不像OC那样任何类最终都要继承自某个基类</li></ol><a id="more"></a><h5 id="二-继承后类实例的内存结构"><a href="#二-继承后类实例的内存结构" class="headerlink" title="二 继承后类实例的内存结构"></a>二 继承后类实例的内存结构</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    <span class="selector-tag">var</span> age = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog:Animal &#123;</span><br><span class="line">    <span class="selector-tag">var</span> weight = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ErVa:Dog &#123;</span><br><span class="line">    <span class="selector-tag">var</span> iq = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let <span class="selector-tag">a</span> = Animal()</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.age</span> = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.size(ofRef: a)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.memStr(ofRef: a)</span></span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 0x0000000100008418</span></span><br><span class="line"><span class="comment"> 0x0000000000000002</span></span><br><span class="line"><span class="comment"> 0x000000000000000a //age</span></span><br><span class="line"><span class="comment"> 0x0000000000000000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">let d = Dog()</span><br><span class="line">d<span class="selector-class">.age</span> = <span class="number">10</span></span><br><span class="line">d<span class="selector-class">.weight</span> = <span class="number">20</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.size(ofRef: d)</span></span>) <span class="comment">//32</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.memStr(ofRef: d)</span></span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 0x00000001000084c8</span></span><br><span class="line"><span class="comment"> 0x0000000000000002</span></span><br><span class="line"><span class="comment"> 0x000000000000000a //age</span></span><br><span class="line"><span class="comment"> 0x0000000000000014 //weight</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">let e = ErVa()</span><br><span class="line">e<span class="selector-class">.age</span> = <span class="number">10</span></span><br><span class="line">e<span class="selector-class">.weight</span> = <span class="number">20</span></span><br><span class="line">e<span class="selector-class">.iq</span> = <span class="number">30</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.size(ofRef: e)</span></span>) <span class="comment">//48</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.memStr(ofRef: e)</span></span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 0x0000000100008598</span></span><br><span class="line"><span class="comment"> 0x0000000000000002</span></span><br><span class="line"><span class="comment"> 0x000000000000000a //age</span></span><br><span class="line"><span class="comment"> 0x0000000000000014 //weight</span></span><br><span class="line"><span class="comment"> 0x000000000000001e //iq</span></span><br><span class="line"><span class="comment"> 0x0000000000000000</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>子类继承父类的存储属性,都会在自己的内存中保存一份</p><h5 id="三-重写实例方法-下标"><a href="#三-重写实例方法-下标" class="headerlink" title="三 重写实例方法,下标"></a>三 重写实例方法,下标</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.speak()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Cat speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>[index] + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anim:<span class="type">Animal</span></span><br><span class="line">anim = <span class="type">Animal</span>()</span><br><span class="line">anim.speak()</span><br><span class="line"><span class="built_in">print</span>(anim[<span class="number">6</span>])</span><br><span class="line"><span class="comment">//Animal speak</span></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"></span><br><span class="line">anim = <span class="type">Cat</span>()</span><br><span class="line">anim.speak()</span><br><span class="line"><span class="built_in">print</span>(anim[<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//Animal speak</span></span><br><span class="line"><span class="comment">//Cat speak</span></span><br><span class="line"><span class="comment">//7</span></span><br></pre></td></tr></table></figure><h5 id="四-重写类型方法-下标"><a href="#四-重写类型方法-下标" class="headerlink" title="四 重写类型方法,下标"></a>四 重写类型方法,下标</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">speak</span></span>()  &#123;</span><br><span class="line">        print(<span class="string">"Animal speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">subscript</span></span>(index:<span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="type">Animal &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">speak</span></span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.speak()</span><br><span class="line">        print(<span class="string">"Cat speak"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> static subscript(index: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>[index] + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.speak()</span><br><span class="line">print(Animal[<span class="number">6</span>])</span><br><span class="line"><span class="comment">//Animal speak</span></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"></span><br><span class="line">Cat.speak()</span><br><span class="line">print(Cat[<span class="number">6</span>])</span><br><span class="line"><span class="comment">//Animal speak</span></span><br><span class="line"><span class="comment">//Cat speak</span></span><br><span class="line"><span class="comment">//7</span></span><br></pre></td></tr></table></figure><p>被class修饰的类型方法,下标,允许被子类重写</p><p>被static修饰的类型方法,下标,不允许被子类重写</p><h5 id="五-重写属性"><a href="#五-重写属性" class="headerlink" title="五 重写属性"></a>五 重写属性</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">子类可以将父类的属性(存储属性,计算属性)重写为计算属性</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:String=<span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> age:<span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="type">Animal &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> name: String&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Dog"</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> age: <span class="built_in">Int</span>&#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------</span><br><span class="line">子类不可以将父类属性重写为存储属性</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:String=<span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="type">Animal &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> name: String=<span class="string">""</span> <span class="comment">//❌</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line">只能重写<span class="keyword">var</span>属性, 不能重写let属性</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    let name:String=<span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="type">Animal &#123;</span></span></span><br><span class="line">     <span class="keyword">override</span> <span class="keyword">var</span> name: String&#123; <span class="comment">//❌</span></span><br><span class="line">           <span class="keyword">get</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">"Dog"</span></span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">set</span> &#123;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>子类可以将父类的属性(存储、计算)重写为计算属性</p></li><li><p>子类不可以将父类属性重写为存储属性</p></li><li><p>只能重写var属性，不能重写let属性</p></li><li><p>重写时，属性名、类型要一致</p></li><li><p>子类重写后的属性权限 不能小于 父类属性的权限</p></li></ol><ul><li><p>如果父类属性是只读的，那么子类重写后的属性可以是只读的、也可以是可读写的</p></li><li><p>如果父类属性是可读写的，那么子类重写后的属性也必须是可读写的</p></li></ul><h5 id="六-重写类型属性"><a href="#六-重写类型属性" class="headerlink" title="六 重写类型属性"></a>六 重写类型属性</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> radiu:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">diameter</span>:<span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle setDiameter"</span>)</span><br><span class="line">            radiu = newValue / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle getDiameter"</span>)</span><br><span class="line">            <span class="keyword">return</span> radiu * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span>: <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">static</span> <span class="keyword">var</span> diameter: <span class="type">Int</span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle setDiameter"</span>)</span><br><span class="line">            <span class="keyword">super</span>.diameter = newValue &gt; <span class="number">0</span> ? newValue : <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Subcircle getDiameter"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.diameter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Circle</span>.radiu = <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Circle</span>.diameter)</span><br><span class="line"><span class="type">Circle</span>.diameter = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Circle</span>.radiu)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"----------------"</span>)</span><br><span class="line"><span class="type">SubCircle</span>.radiu = <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SubCircle</span>.diameter)</span><br><span class="line"><span class="type">SubCircle</span>.diameter = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SubCircle</span>.radiu)</span><br><span class="line"><span class="comment">//Circle getDiameter</span></span><br><span class="line"><span class="comment">//12</span></span><br><span class="line"><span class="comment">//Circle setDiameter</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//----------------</span></span><br><span class="line"><span class="comment">//Subcircle getDiameter</span></span><br><span class="line"><span class="comment">//Circle getDiameter</span></span><br><span class="line"><span class="comment">//12</span></span><br><span class="line"><span class="comment">//SubCircle setDiameter</span></span><br><span class="line"><span class="comment">//Circle setDiameter</span></span><br><span class="line"><span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>被 class 修饰的计算属性,可以被子类重写</p><p>被static修饰的类型属性(存储,计算),不可以被子类重写</p><h5 id="七-添加属性观察器"><a href="#七-添加属性观察器" class="headerlink" title="七 添加属性观察器"></a>七 添加属性观察器</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span> : <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> radius:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle didSetRadius"</span>, oldValue,radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> circle = <span class="type">SubCircle</span>()</span><br><span class="line">circle.radius = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>可以在子类中为父类属性(除了只读计算属性,let属性)增加属性观察器</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius: <span class="type">Int</span> = <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle didSetRadius"</span>, oldValue,radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span> : <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> radius:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle didSetRadius"</span>, oldValue,radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> circle = <span class="type">SubCircle</span>()</span><br><span class="line">circle.radius = <span class="number">10</span></span><br><span class="line"><span class="comment">//SubCircle willSetRadius 10</span></span><br><span class="line"><span class="comment">//Circle willSetRadius 10</span></span><br><span class="line"><span class="comment">//Circle didSetRadius 1 10</span></span><br><span class="line"><span class="comment">//SubCircle didSetRadius 1 10</span></span><br><span class="line"><span class="comment">//Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p>父类子类都有属性观察器的情况, 先调用子类willset 然后调用父类willset 接着调用父类didset 最后调用子类didset</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle getRadius"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span> : <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> radius:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle didSetRadius"</span>, oldValue,radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> circle = <span class="type">SubCircle</span>()</span><br><span class="line">circle.radius = <span class="number">10</span></span><br><span class="line"><span class="comment">//Circle getRadius</span></span><br><span class="line"><span class="comment">//SubCircle willSetRadius 10</span></span><br><span class="line"><span class="comment">//Circle willSetRadius 10</span></span><br><span class="line"><span class="comment">//Circle getRadius</span></span><br><span class="line"><span class="comment">//SubCircle didSetRadius 20 20</span></span><br></pre></td></tr></table></figure><p>Circle getRadius 是为了获取oldValue willset前要先获取它原来的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">radius</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle getRadius"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span> : <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">static</span>  <span class="keyword">var</span> radius:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle didSetRadius"</span>, oldValue,radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">SubCircle</span>.radius = <span class="number">10</span></span><br><span class="line"><span class="comment">//Circle getRadius</span></span><br><span class="line"><span class="comment">//SubCircle willSetRadius 10</span></span><br><span class="line"><span class="comment">//Circle willSetRadius 10</span></span><br><span class="line"><span class="comment">//Circle getRadius</span></span><br><span class="line"><span class="comment">//SubCircle didSetRadius 20 20</span></span><br></pre></td></tr></table></figure><h5 id="八-final"><a href="#八-final" class="headerlink" title="八 final"></a>八 final</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">var</span> radius: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Circle getRadius"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCircle</span> : <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> radius:<span class="type">Int</span> &#123; <span class="comment">//❌</span></span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle willSetRadius"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"SubCircle didSetRadius"</span>, oldValue,radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被final修饰的方法,下标,属性,禁止被重写<br>被final修饰的类,禁止被继承</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-继承初探&quot;&gt;&lt;a href=&quot;#一-继承初探&quot; class=&quot;headerlink&quot; title=&quot;一 继承初探&quot;&gt;&lt;/a&gt;一 继承初探&lt;/h5&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt;:&lt;span class=&quot;type&quot;&gt;Animal &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; weight = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义类在类名后加:父类 就形成了继承关系.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;值类型不支持继承,只有类支持继承(枚举,结构体都不支持继承)&lt;/li&gt;
&lt;li&gt;没有父类的类称基类,swift不像OC那样任何类最终都要继承自某个基类&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 下标</title>
    <link href="http://example.com/2019/10/01/swift-%E4%B8%8B%E6%A0%87/"/>
    <id>http://example.com/2019/10/01/swift-下标/</id>
    <published>2019-10-01T03:44:11.000Z</published>
    <updated>2020-12-09T14:10:40.587Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-下标的定义"><a href="#一-下标的定义" class="headerlink" title="一 下标的定义"></a>一 下标的定义</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">0.0</span>, y=<span class="number">0.0</span></span><br><span class="line">    subscript(index:<span class="type">Int</span>) -&gt;Double &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">               x = <span class="keyword">new</span><span class="type">Value</span></span><br><span class="line"><span class="type"></span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               y = <span class="keyword">new</span><span class="type">Value</span></span><br><span class="line"><span class="type"></span>            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> x</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> y</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Point()</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">22.2</span></span><br><span class="line">p[<span class="number">1</span>] = <span class="number">33.3</span></span><br><span class="line">print(p.x,p[<span class="number">0</span>]) <span class="comment">//22.2 22.2</span></span><br><span class="line">print(p.y,p[<span class="number">1</span>]) <span class="comment">//33.3 33.3</span></span><br></pre></td></tr></table></figure><p>使用subscript可以给任意类型,枚举,结构体,类增加下标功能,也可叫做下标脚本</p><p>subscript 中定义的返回值类型决定了:</p><ul><li>get方法的返回值类型</li><li>set方法中newValue的类型<a id="more"></a></li></ul><h5 id="二-下标的本质"><a href="#二-下标的本质" class="headerlink" title="二 下标的本质"></a>二 下标的本质</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">0.0</span>, y=<span class="number">0.0</span></span><br><span class="line">    subscript(index:<span class="type">Int</span>) -&gt;Double &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">               x = <span class="keyword">new</span><span class="type">Value</span></span><br><span class="line"><span class="type"></span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               y = <span class="keyword">new</span><span class="type">Value</span></span><br><span class="line"><span class="type"></span>            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> x</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> y</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Point()</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">22.2</span></span><br><span class="line">let x = p[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">0x100001904</span> &lt;+<span class="number">132</span>&gt;: xorl   <span class="symbol">%r8d</span>, <span class="symbol">%r8d</span></span><br><span class="line">    <span class="number">0x100001907</span> &lt;+<span class="number">135</span>&gt;: movl   <span class="symbol">%r8d</span>, <span class="symbol">%edi</span></span><br><span class="line">    <span class="number">0x10000190a</span> &lt;+<span class="number">138</span>&gt;: movq   <span class="number">-0</span><span class="keyword">x</span><span class="number">60</span>(<span class="symbol">%rbp</span>), <span class="symbol">%rax</span></span><br><span class="line">    <span class="number">0x10000190e</span> &lt;+<span class="number">142</span>&gt;: movq   (<span class="symbol">%rax</span>), <span class="symbol">%rcx</span></span><br><span class="line">    <span class="number">0x100001911</span> &lt;+<span class="number">145</span>&gt;: movq   <span class="symbol">%rax</span>, <span class="symbol">%r13</span></span><br><span class="line">    <span class="number">0x100001914</span> &lt;+<span class="number">148</span>&gt;: callq  *<span class="number">0x90</span>(<span class="symbol">%rcx</span>) //调用get方法</span><br><span class="line">    <span class="number">0x10000191a</span> &lt;+<span class="number">154</span>&gt;: movq   <span class="number">-0</span><span class="keyword">x</span><span class="number">60</span>(<span class="symbol">%rbp</span>), <span class="symbol">%rdi</span></span><br><span class="line">    <span class="number">0x10000191e</span> &lt;+<span class="number">158</span>&gt;: callq  <span class="number">0x10000634c</span>               <span class="comment">; symbol stub for: swift_release</span></span><br><span class="line"><span class="comment">    0x100001923 &lt;+163&gt;: leaq   0x6aae(%rip), %rax        ; sudy.p : sudy.Point</span></span><br><span class="line"><span class="comment">    0x10000192a &lt;+170&gt;: xorl   %r8d, %r8d</span></span><br><span class="line"><span class="comment">    0x10000192d &lt;+173&gt;: movl   %r8d, %ecx</span></span><br><span class="line"><span class="comment">    0x100001930 &lt;+176&gt;: movq   %rax, %rdi</span></span><br><span class="line"><span class="comment">    0x100001933 &lt;+179&gt;: leaq   -0x38(%rbp), %rsi</span></span><br><span class="line"><span class="comment">    0x100001937 &lt;+183&gt;: movl   $0x20, %edx</span></span><br><span class="line"><span class="comment">    0x10000193c &lt;+188&gt;: callq  0x1000062e0               ; symbol stub for: swift_beginAccess</span></span><br><span class="line"><span class="comment">    0x100001941 &lt;+193&gt;: movq   0x6a90(%rip), %rax        ; sudy.p : sudy.Point</span></span><br><span class="line"><span class="comment">    0x100001948 &lt;+200&gt;: movq   %rax, %rcx</span></span><br><span class="line"><span class="comment">    0x10000194b &lt;+203&gt;: movq   %rcx, %rdi</span></span><br><span class="line"><span class="comment">    0x10000194e &lt;+206&gt;: movq   %rax, -0x70(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001952 &lt;+210&gt;: callq  0x100006352               ; symbol stub for: swift_retain</span></span><br><span class="line"><span class="comment">    0x100001957 &lt;+215&gt;: leaq   -0x38(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x10000195b &lt;+219&gt;: movq   %rax, -0x78(%rbp)</span></span><br><span class="line"><span class="comment">    0x10000195f &lt;+223&gt;: callq  0x100006304               ; symbol stub for: swift_endAccess</span></span><br><span class="line"><span class="comment">    0x100001964 &lt;+228&gt;: xorl   %r8d, %r8d</span></span><br><span class="line"><span class="comment">    0x100001967 &lt;+231&gt;: movl   %r8d, %edi</span></span><br><span class="line"><span class="comment">    0x10000196a &lt;+234&gt;: movq   -0x70(%rbp), %rax</span></span><br><span class="line"><span class="comment">    0x10000196e &lt;+238&gt;: movq   (%rax), %rcx</span></span><br><span class="line"><span class="comment">    0x100001971 &lt;+241&gt;: movq   %rax, %r13</span></span><br><span class="line"><span class="comment">    0x100001974 &lt;+244&gt;: callq  *0xa0(%rcx) //调用set方法</span></span><br><span class="line"><span class="comment">    0x10000197a &lt;+250&gt;: movsd  %xmm0, 0x6a5e(%rip)       ; sudy.x : Swift.Double</span></span><br><span class="line"><span class="comment">    0x100001982 &lt;+258&gt;: movq   -0x70(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x100001986 &lt;+262&gt;: callq  0x10000634c               ; symbol stub for: swift_release</span></span><br><span class="line"><span class="comment">    0x10000198b &lt;+267&gt;: xorl   %eax, %eax</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sudy`Point.subscript.setter:</span></span><br><span class="line"><span class="comment">-&gt;  0x100001e10 &lt;+0&gt;:   pushq  %rbp</span></span><br><span class="line"><span class="comment">    0x100001e11 &lt;+1&gt;:   movq   %rsp, %rbp</span></span><br><span class="line"><span class="comment">    0x100001e14 &lt;+4&gt;:   pushq  %r13</span></span><br><span class="line"><span class="comment">    0x100001e16 &lt;+6&gt;:   subq   $0x48, %rsp</span></span><br><span class="line"><span class="comment">    0x100001e1a &lt;+10&gt;:  xorl   %eax, %eax</span></span><br><span class="line"><span class="comment">    0x100001e1c &lt;+12&gt;:  leaq   -0x10(%rbp), %rcx</span></span><br><span class="line"><span class="comment">    0x100001e20 &lt;+16&gt;:  movq   %rdi, -0x28(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001e24 &lt;+20&gt;:  movq   %rcx, %rdi</span></span><br><span class="line"><span class="comment">    0x100001e27 &lt;+23&gt;:  movl   %eax, %esi</span></span><br><span class="line"><span class="comment">    0x100001e29 &lt;+25&gt;:  movl   $0x8, %ecx</span></span><br><span class="line"><span class="comment">    0x100001e2e &lt;+30&gt;:  movq   %rcx, %rdx</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment"> sudy`Point.subscript.getter:</span></span><br><span class="line"><span class="comment">-&gt;  0x100001fc0 &lt;+0&gt;:   pushq  %rbp</span></span><br><span class="line"><span class="comment">    0x100001fc1 &lt;+1&gt;:   movq   %rsp, %rbp</span></span><br><span class="line"><span class="comment">    0x100001fc4 &lt;+4&gt;:   pushq  %r13</span></span><br><span class="line"><span class="comment">    0x100001fc6 &lt;+6&gt;:   subq   $0x38, %rsp</span></span><br><span class="line"><span class="comment">    0x100001fca &lt;+10&gt;:  xorl   %eax, %eax</span></span><br><span class="line"><span class="comment">    0x100001fcc &lt;+12&gt;:  leaq   -0x10(%rbp), %rcx</span></span><br><span class="line"><span class="comment">    0x100001fd0 &lt;+16&gt;:  movq   %rdi, -0x20(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001fd4 &lt;+20&gt;:  movq   %rcx, %rdi</span></span><br><span class="line"><span class="comment">    0x100001fd7 &lt;+23&gt;:  movl   %eax, %esi</span></span><br><span class="line"><span class="comment">    0x100001fd9 &lt;+25&gt;:  movl   $0x8, %ecx</span></span><br><span class="line"><span class="comment">    0x100001fde &lt;+30&gt;:  movq   %rcx, %rdx</span></span><br><span class="line"><span class="comment">    0x100001fe1 &lt;+33&gt;:  movq   %r13, -0x28(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001fe5 &lt;+37&gt;:  movl   %eax, -0x2c(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001fe8 &lt;+40&gt;:  movq   %rcx, -0x38(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001fec &lt;+44&gt;:  callq  0x1000062ce               ; symbol stub for: memset</span></span><br><span class="line"><span class="comment">    0x100001ff1 &lt;+49&gt;:  leaq   -0x18(%rbp), %rcx</span></span><br><span class="line"><span class="comment">    0x100001ff5 &lt;+53&gt;:  movq   %rcx, %rdi</span></span><br><span class="line"><span class="comment">    0x100001ff8 &lt;+56&gt;:  movl   -0x2c(%rbp), %esi</span></span><br><span class="line"><span class="comment">    0x100001ffb &lt;+59&gt;:  movq   -0x38(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x100001fff &lt;+63&gt;:  callq  0x1000062ce               ; symbol stub for: memset</span></span><br><span class="line"><span class="comment">    0x100002004 &lt;+68&gt;:  movq   -0x20(%rbp), %rcx</span></span><br><span class="line"><span class="comment">    0x100002008 &lt;+72&gt;:  movq   %rcx, -0x10(%rbp)</span></span><br><span class="line"><span class="comment">    0x10000200c &lt;+76&gt;:  movq   -0x28(%rbp), %rdx</span></span><br></pre></td></tr></table></figure><p>subscript的语法类似于实例方法,计算属性,其实它的本质就是方法,既然类似于计算属性,那它就有类似计算属性的限制,比如它可以没有set方法,但必须要有get方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">0.0</span>, y=<span class="number">0.0</span></span><br><span class="line">    subscript(index:<span class="built_in">Int</span>) -&gt;<span class="built_in">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> index % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> x</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> y</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Point()</span><br><span class="line">let x = p[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h5 id="三-下标设置参数标签"><a href="#三-下标设置参数标签" class="headerlink" title="三 下标设置参数标签"></a>三 下标设置参数标签</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">0.0</span>, y=<span class="number">0.0</span></span><br><span class="line">    subscript(index i:<span class="type">Int</span>) -&gt;Double &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">               x = <span class="keyword">new</span><span class="type">Value</span></span><br><span class="line"><span class="type"></span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               y = <span class="keyword">new</span><span class="type">Value</span></span><br><span class="line"><span class="type"></span>            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> x</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> y</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Point()</span><br><span class="line">p[index:<span class="type">0</span>] = <span class="number">22.2</span></span><br><span class="line">let x = p[index:<span class="type">0</span>]</span><br></pre></td></tr></table></figure><h5 id="四-类型方法下标"><a href="#四-类型方法下标" class="headerlink" title="四 类型方法下标"></a>四 类型方法下标</h5><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="built_in">Sum</span> &#123;</span><br><span class="line">    static subscript(v1:<span class="built_in">Int</span>,v2:<span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 + v2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">Sum</span>[<span class="number">10</span>,<span class="number">20</span>])</span><br></pre></td></tr></table></figure><blockquote><p>只有 get , get可以省略不写</p></blockquote><h5 id="五-接受多个参数的下标"><a href="#五-接受多个参数的下标" class="headerlink" title="五 接受多个参数的下标"></a>五 接受多个参数的下标</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grid</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">data</span> = [</span><br><span class="line">     [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">     [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">     [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    subscript(row:<span class="built_in">Int</span>, column:<span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            </span><br><span class="line">            guard row &gt;= <span class="number">0</span> &amp;&amp; row &lt; <span class="number">3</span> &amp;&amp; column &gt;= <span class="number">0</span> &amp;&amp; column &lt; <span class="number">3</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">data</span>[row][column] = newValue</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            guard row &gt;= <span class="number">0</span> &amp;&amp; row &lt; <span class="number">3</span> &amp;&amp; column &gt;= <span class="number">0</span> &amp;&amp; column &lt; <span class="number">3</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">data</span>[row][column]</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> grid = Grid()</span><br><span class="line">grid[<span class="number">0</span>,<span class="number">1</span>] = <span class="number">77</span></span><br><span class="line">grid[<span class="number">1</span>,<span class="number">2</span>] = <span class="number">88</span></span><br><span class="line">grid[<span class="number">2</span>,<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">print(grid.<span class="keyword">data</span>) <span class="comment">//[[0, 77, 2], [3, 4, 88], [99, 7, 8]]</span></span><br></pre></td></tr></table></figure><h5 id="六-下标返回值为结构体和类的差异"><a href="#六-下标返回值为结构体和类的差异" class="headerlink" title="六 下标返回值为结构体和类的差异"></a>六 下标返回值为结构体和类的差异</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> point = <span class="type">Point</span>()</span><br><span class="line">    <span class="keyword">subscript</span>(index:<span class="type">Int</span>) -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            point</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pm = <span class="type">PointManager</span>()</span><br><span class="line">pm[<span class="number">0</span>].x = <span class="number">11</span></span><br><span class="line">pm[<span class="number">0</span>].y = <span class="number">22</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Point2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointManager2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> point = <span class="type">Point2</span>()</span><br><span class="line">    <span class="keyword">subscript</span>(index:<span class="type">Int</span>) -&gt; <span class="type">Point2</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;point = newValue&#125; <span class="comment">//不写set方法无法赋值 赋值不用具体到具体属性</span></span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            point</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>  pm2 = <span class="type">PointManager2</span>()</span><br><span class="line">pm2[<span class="number">0</span>].x = <span class="number">33</span></span><br><span class="line">pm2[<span class="number">0</span>].y = <span class="number">44</span></span><br><span class="line"><span class="built_in">print</span>(pm2[<span class="number">0</span>].x,pm2[<span class="number">0</span>].y)</span><br></pre></td></tr></table></figure><p>结构体是值类型,类是指针类型,结构体下标给结构体属性赋值必须要实现set,而类不需要</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-下标的定义&quot;&gt;&lt;a href=&quot;#一-下标的定义&quot; class=&quot;headerlink&quot; title=&quot;一 下标的定义&quot;&gt;&lt;/a&gt;一 下标的定义&lt;/h5&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x=&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, y=&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscript(index:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) -&amp;gt;Double &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; index % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               x = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;&lt;/span&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               y = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;&lt;/span&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; index % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = Point()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;22.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;33.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(p.x,p[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;comment&quot;&gt;//22.2 22.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(p.y,p[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;comment&quot;&gt;//33.3 33.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用subscript可以给任意类型,枚举,结构体,类增加下标功能,也可叫做下标脚本&lt;/p&gt;
&lt;p&gt;subscript 中定义的返回值类型决定了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get方法的返回值类型&lt;/li&gt;
&lt;li&gt;set方法中newValue的类型
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 方法</title>
    <link href="http://example.com/2019/09/30/swift-%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2019/09/30/swift-方法/</id>
    <published>2019-09-30T03:44:11.000Z</published>
    <updated>2020-12-22T14:33:17.874Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-方法简介"><a href="#一-方法简介" class="headerlink" title="一 方法简介"></a>一 方法简介</h5><p>方法分为实例方法和类型方法,枚举,结构体,类都可以定义实例方法,类型方法</p><p><strong>实例方法:</strong> 通过实例对象调用</p><p><strong>类型方法:</strong> 通过类型调用,用static或者class关键字定义</p><h5 id="二-实例方法"><a href="#二-实例方法" class="headerlink" title="二 实例方法"></a>二 实例方法</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getCount</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> car = <span class="type">Car</span>()</span><br><span class="line">car.<span class="built_in">count</span> = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(car.getCount())<span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>实例方法中,self代表实例对象</p><a id="more"></a><h5 id="三-类型方法"><a href="#三-类型方法" class="headerlink" title="三 类型方法"></a>三 类型方法</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getCount</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Car</span>.<span class="built_in">count</span> = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Car</span>.getCount())<span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>在类型方法中,self代表类型</p><h5 id="四-mutating"><a href="#四-mutating" class="headerlink" title="四 mutating"></a>四 mutating</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">0.0</span>, y=<span class="number">0.0</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">moveBy</span><span class="params">(deltaX:Double, deltaY: Double)</span></span>  &#123;</span><br><span class="line">        x += deltaX</span><br><span class="line">        y += deltaY</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="type">Point</span>(x: <span class="number">20</span>, y: <span class="number">30</span>)</span><br><span class="line">p.moveBy(deltaX: <span class="number">4</span>, deltaY: <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(p) <span class="comment">//Point(x: 24.0, y: 35.0)</span></span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">StateSwitch</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> low, middle, high</span><br><span class="line">    mutating func <span class="keyword">next</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        switch <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">low:</span></span><br><span class="line">            <span class="keyword">self</span> = .middle</span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">middle:</span></span><br><span class="line">            <span class="keyword">self</span> = .high</span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">high:</span></span><br><span class="line">            <span class="keyword">self</span> = .low</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var stateswitch = StateSwitch.low</span><br><span class="line">stateswitch.<span class="keyword">next</span>()</span><br><span class="line">print(stateswitch) /<span class="regexp">/middle</span></span><br></pre></td></tr></table></figure><p>结构体和枚举是值类型,默认情况下,值类型的属性不能被自身的实例方法修改,在func关键字前加mutating可以允许这种修改行为</p><h5 id="六-discardableResult"><a href="#六-discardableResult" class="headerlink" title="六 @discardableResult"></a>六 @discardableResult</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">StateSwitch</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> low, middle, high</span><br><span class="line">     @discardableResult mutating func <span class="keyword">next</span>() -&gt;Int</span><br><span class="line">    &#123;</span><br><span class="line">        switch <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">low:</span></span><br><span class="line">            <span class="keyword">self</span> = .middle</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">middle:</span></span><br><span class="line">            <span class="keyword">self</span> = .high</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> .<span class="symbol">high:</span></span><br><span class="line">            <span class="keyword">self</span> = .low</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var s = StateSwitch.low</span><br><span class="line">s.<span class="keyword">next</span>()</span><br></pre></td></tr></table></figure><p>在func前面加个@discardableResult，可以消除:函数调用后返回值未被使用的警告</p><h5 id="七-将方法赋值给var-let"><a href="#七-将方法赋值给var-let" class="headerlink" title="七 将方法赋值给var\let"></a>七 将方法赋值给var\let</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct Person &#123;</span><br><span class="line">    var age: <span class="built_in">Int</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(_ v: Int)</span>&#123;</span></span><br><span class="line">        print(<span class="string">"func run"</span>, age, v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(_ v: Int)</span>&#123;</span></span><br><span class="line">        print(<span class="string">"static func run"</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let fn1 = Person.<span class="built_in">run</span></span><br><span class="line">fn1(<span class="number">10</span>) // <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span> 10</span></span><br><span class="line"></span><br><span class="line">let fn2: (<span class="built_in">Int</span>) -&gt; () = Person.<span class="built_in">run</span></span><br><span class="line">fn2(<span class="number">20</span>) // <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span> 20</span></span><br><span class="line"></span><br><span class="line">let fn3: (Person) -&gt; ((<span class="built_in">Int</span>) -&gt; ()) = Person.<span class="built_in">run</span></span><br><span class="line">fn3(Person(age: <span class="number">18</span>))(<span class="number">30</span>) // <span class="function"><span class="keyword">func</span> <span class="title">run</span> 18 30</span></span><br></pre></td></tr></table></figure><p>方法也可以像函数那样,赋值给一个let或者var</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-方法简介&quot;&gt;&lt;a href=&quot;#一-方法简介&quot; class=&quot;headerlink&quot; title=&quot;一 方法简介&quot;&gt;&lt;/a&gt;一 方法简介&lt;/h5&gt;&lt;p&gt;方法分为实例方法和类型方法,枚举,结构体,类都可以定义实例方法,类型方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例方法:&lt;/strong&gt; 通过实例对象调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类型方法:&lt;/strong&gt; 通过类型调用,用static或者class关键字定义&lt;/p&gt;
&lt;h5 id=&quot;二-实例方法&quot;&gt;&lt;a href=&quot;#二-实例方法&quot; class=&quot;headerlink&quot; title=&quot;二 实例方法&quot;&gt;&lt;/a&gt;二 实例方法&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; car = &lt;span class=&quot;type&quot;&gt;Car&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;car.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(car.getCount())&lt;span class=&quot;comment&quot;&gt;//20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例方法中,self代表实例对象&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 属性</title>
    <link href="http://example.com/2019/09/15/swift-%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2019/09/15/swift-属性/</id>
    <published>2019-09-15T09:00:30.000Z</published>
    <updated>2021-01-01T12:55:26.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>swift 属性分为两大类: 实例属性和类型属性,.实例属性又分为:存储实例属性和计算实例属性, 类型属性分为: 存储类型属性和计算类型属性</p></blockquote><h5 id="一-实例存储属性"><a href="#一-实例存储属性" class="headerlink" title="一 实例存储属性"></a>一 实例存储属性</h5><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct Point &#123;</span><br><span class="line">    <span class="keyword">var</span> x:<span class="keyword">Int</span></span><br><span class="line">    <span class="keyword">var</span> y:<span class="keyword">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Point(x:<span class="number">10</span>,y:<span class="number">20</span>)</span><br><span class="line"><span class="keyword">print</span>(MemoryLayout.stride(ofValue: p))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x:<span class="keyword">Int</span></span><br><span class="line">    <span class="keyword">var</span> y:<span class="keyword">Int</span></span><br><span class="line">    init(x:<span class="keyword">Int</span>,y:<span class="keyword">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.x = x</span><br><span class="line">        <span class="keyword">self</span>.y = y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于成员变量,属性存储在实例的内存中,只有结构体和类可以定义实例存储属性,枚举不可以定义存储属性.</p><p><strong>1 枚举为什么不可以定义存储属性呢?</strong></p><p>首先存储属性是存储在实例内存中的,而枚举实例值存储了case相关值标识,比如枚举原始值,只占1个字节,这里的枚举是无法存储你定义其它非case变量的</p><a id="more"></a><h5 id="实例存储属性细节"><a href="#实例存储属性细节" class="headerlink" title="实例存储属性细节"></a>实例存储属性细节</h5><p><img src="../assets/blogImg/ccsx01.png" alt><br>在创建类或者结构体实例时,必须为所有的存储属性设置一个合适的初始值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> radiu:<span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = <span class="type">Circle</span>(radiu: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.radiu) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>定义存储属性也可以使用let</p><h5 id="二-实例计算属性"><a href="#二-实例计算属性" class="headerlink" title="二 实例计算属性"></a>二 实例计算属性</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radiu:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> diameter:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            radiu * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span>&#123;</span><br><span class="line">            radiu  = newValue / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = <span class="type">Circle</span>(radiu: <span class="number">20</span>)</span><br><span class="line"><span class="built_in">c</span>.radiu = <span class="number">11</span></span><br><span class="line"><span class="built_in">c</span>.diameter = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="built_in">c</span>.diameter</span><br><span class="line"><span class="comment">//print(MemoryLayout.stride(ofValue: c)) //8</span></span><br><span class="line"><span class="comment">//print(c.diameter)//10.0</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudy`main:</span></span><br><span class="line">    <span class="number">0x100001070</span> <span class="string">&lt;+0&gt;:</span>   <span class="string">pushq</span>  <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100001071</span> <span class="string">&lt;+1&gt;:</span>   <span class="string">movq</span>   <span class="string">%rsp,</span> <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100001074</span> <span class="string">&lt;+4&gt;:</span>   <span class="string">pushq</span>  <span class="string">%r13</span></span><br><span class="line">    <span class="number">0x100001076</span> <span class="string">&lt;+6&gt;:</span>   <span class="string">subq</span>   <span class="string">$0x58,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x10000107a</span> <span class="string">&lt;+10&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x14,</span> <span class="string">%eax</span></span><br><span class="line">    <span class="number">0x10000107f</span> <span class="string">&lt;+15&gt;:</span>  <span class="string">movl</span>   <span class="string">%edi,</span> <span class="number">-0x54</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001082</span> <span class="string">&lt;+18&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100001085</span> <span class="string">&lt;+21&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="number">-0x60</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001089</span> <span class="string">&lt;+25&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100001320</span>               <span class="string">;</span> <span class="string">sudy.Circle.init(radiu:</span> <span class="string">Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">sudy.Circle</span> <span class="string">at</span> <span class="string">main.swift:1</span> <span class="string">//</span> <span class="string">调用struct初始化方法</span></span><br><span class="line">    <span class="number">0x10000108e</span> <span class="string">&lt;+30&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x6163</span><span class="string">(%rip),</span> <span class="string">%rsi</span>        <span class="string">;</span> <span class="attr">sudy.c :</span> <span class="string">sudy.Circle</span></span><br><span class="line">    <span class="number">0x100001095</span> <span class="string">&lt;+37&gt;:</span>  <span class="string">xorl</span>   <span class="string">%ecx,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x100001097</span> <span class="string">&lt;+39&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">0x615a</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="attr">sudy.c :</span> <span class="string">sudy.Circle</span> <span class="string">//将初始化方法返回的值即struct实例地址值赋值给c这个全局变量。</span> <span class="string">地址:0x1000071F8</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x10000109e</span> <span class="string">&lt;+46&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x1000010a1</span> <span class="string">&lt;+49&gt;:</span>  <span class="string">leaq</span>   <span class="number">-0x20</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x1000010a5</span> <span class="string">&lt;+53&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x21,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x1000010aa</span> <span class="string">&lt;+58&gt;:</span>  <span class="string">callq</span>  <span class="number">0x10000542a</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">        <span class="number">0x1000010af</span> <span class="string">&lt;+63&gt;:</span>  <span class="string">movq</span>   <span class="string">$0xb,</span> <span class="number">0x613e</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="string">lazy</span> <span class="string">cache</span> <span class="string">variable</span> <span class="string">for</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Swift.Array&lt;Swift.UInt8&gt;</span> <span class="string">+</span> <span class="number">4</span>  <span class="number">0x1000010ba</span> <span class="string">+</span> <span class="number">0x613e</span> <span class="string">=</span>  <span class="number">0x1000071F8</span> <span class="string">将11赋值给c.radiu</span>  <span class="string">c的内存存的就是radiu</span></span><br><span class="line">    <span class="number">0x1000010ba</span> <span class="string">&lt;+74&gt;:</span>  <span class="string">leaq</span>   <span class="number">-0x20</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x1000010be</span> <span class="string">&lt;+78&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100005448</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x1000010c3</span> <span class="string">&lt;+83&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x612e</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.c :</span> <span class="string">sudy.Circle//0x1000071F8</span></span><br><span class="line">    <span class="number">0x1000010ca</span> <span class="string">&lt;+90&gt;:</span>  <span class="string">xorl</span>   <span class="string">%r8d,</span> <span class="string">%r8d</span></span><br><span class="line">    <span class="number">0x1000010cd</span> <span class="string">&lt;+93&gt;:</span>  <span class="string">movl</span>   <span class="string">%r8d,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x1000010d0</span> <span class="string">&lt;+96&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span>  <span class="string">//rdi</span> <span class="string">:</span> <span class="number">0x1000071F8</span></span><br><span class="line">    <span class="number">0x1000010d3</span> <span class="string">&lt;+99&gt;:</span>  <span class="string">leaq</span>   <span class="number">-0x38</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x1000010d7</span> <span class="string">&lt;+103&gt;:</span> <span class="string">movl</span>   <span class="string">$0x21,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x1000010dc</span> <span class="string">&lt;+108&gt;:</span> <span class="string">callq</span>  <span class="number">0x10000542a</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">    <span class="number">0x1000010e1</span> <span class="string">&lt;+113&gt;:</span> <span class="string">movl</span>   <span class="string">$0xc,</span> <span class="string">%edi</span> <span class="string">//</span> <span class="string">将12</span> <span class="string">赋给edi</span></span><br><span class="line">    <span class="number">0x1000010e6</span> <span class="string">&lt;+118&gt;:</span> <span class="string">leaq</span>   <span class="number">0x610b</span><span class="string">(%rip),</span> <span class="string">%r13</span>        <span class="string">;</span> <span class="attr">sudy.c :</span> <span class="string">sudy.Circle</span> <span class="string">//0x1000071F8</span> <span class="string">赋值给</span> <span class="number">13</span></span><br><span class="line">    <span class="number">0x1000010ed</span> <span class="string">&lt;+125&gt;:</span> <span class="string">callq</span>  <span class="number">0x100001220</span>               <span class="string">;</span> <span class="attr">sudy.Circle.diameter.setter :</span> <span class="string">Swift.Int</span> <span class="string">at</span> <span class="string">main.swift:7//调用diameter.setter方法</span></span><br><span class="line">    <span class="number">0x1000010f2</span> <span class="string">&lt;+130&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x38</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x1000010f6</span> <span class="string">&lt;+134&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005448</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x1000010fb</span> <span class="string">&lt;+139&gt;:</span> <span class="string">leaq</span>   <span class="number">0x60f6</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.c :</span> <span class="string">sudy.Circle</span></span><br><span class="line">    <span class="number">0x100001102</span> <span class="string">&lt;+146&gt;:</span> <span class="string">xorl</span>   <span class="string">%r8d,</span> <span class="string">%r8d</span></span><br><span class="line">    <span class="number">0x100001105</span> <span class="string">&lt;+149&gt;:</span> <span class="string">movl</span>   <span class="string">%r8d,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x100001108</span> <span class="string">&lt;+152&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x10000110b</span> <span class="string">&lt;+155&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x50</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x10000110f</span> <span class="string">&lt;+159&gt;:</span> <span class="string">movl</span>   <span class="string">$0x20,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x100001114</span> <span class="string">&lt;+164&gt;:</span> <span class="string">callq</span>  <span class="number">0x10000542a</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">    <span class="number">0x100001119</span> <span class="string">&lt;+169&gt;:</span> <span class="string">movq</span>   <span class="number">0x60d8</span><span class="string">(%rip),</span> <span class="string">%rdi</span>        <span class="string">;</span> <span class="attr">sudy.c :</span> <span class="string">sudy.Circle</span> <span class="string">//0x1000071F8</span> <span class="string">赋值给</span> <span class="string">rdi</span></span><br><span class="line">    <span class="number">0x100001120</span> <span class="string">&lt;+176&gt;:</span> <span class="string">callq</span>  <span class="number">0x100001180</span>               <span class="string">;</span> <span class="attr">sudy.Circle.diameter.getter :</span> <span class="string">Swift.Int</span> <span class="string">at</span> <span class="string">main.swift:4</span> <span class="string">//</span> <span class="string">调用diameter.getter方法</span></span><br><span class="line">    <span class="number">0x100001125</span> <span class="string">&lt;+181&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">0x60d4</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="attr">sudy.d :</span> <span class="string">Swift.Int</span></span><br><span class="line">    <span class="number">0x10000112c</span> <span class="string">&lt;+188&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x50</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100001130</span> <span class="string">&lt;+192&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005448</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x100001135</span> <span class="string">&lt;+197&gt;:</span> <span class="string">xorl</span>   <span class="string">%eax,</span> <span class="string">%eax</span></span><br><span class="line">    <span class="number">0x100001137</span> <span class="string">&lt;+199&gt;:</span> <span class="string">addq</span>   <span class="string">$0x58,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x10000113b</span> <span class="string">&lt;+203&gt;:</span> <span class="string">popq</span>   <span class="string">%r13</span></span><br><span class="line">    <span class="number">0x10000113d</span> <span class="string">&lt;+205&gt;:</span> <span class="string">popq</span>   <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x10000113e</span> <span class="string">&lt;+206&gt;:</span> <span class="string">retq</span></span><br></pre></td></tr></table></figure><p>计算属性格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> diameter:Int &#123;</span><br><span class="line">       <span class="keyword">get</span>&#123;</span><br><span class="line">              <span class="comment">//</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">set</span>&#123;</span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从上面汇编代码我们可以看出,struct 就存储了radiu 再给diameter赋值时是通过调用它的set方法,获取值时是通过调用它的get方法,因此我们可以得出如下结论:</p><ul><li><p>计算属性本质就是方法(函数)</p></li><li><p>计算属性不占用实例的内存</p></li><li><p>通过它不占用内存我们可知, 枚举,结构体,类都可以定义计算属性,上面我们说枚举不可以定义,存储属性,但是在这里它可以定义计算属性</p></li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举是可以定义计算属性的</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> east,south,west</span><br><span class="line">    <span class="keyword">var</span> number:<span class="type">Int </span>&#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实例计算属性的细节"><a href="#实例计算属性的细节" class="headerlink" title="实例计算属性的细节"></a>实例计算属性的细节</h5><p><img src="../assets/blogImg/jssx01.png" alt><br>定义计算属性只能用var,不能用let ,计算属性的值是可能发生变化的.</p><p><img src="../assets/blogImg/jssx02.png" alt><br>计算属性可以是只读的,但不能是只写的,也就是get无论什么时候都要定义,不管有没有set</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TestEnum</span> : <span class="title">Int</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> test1 = <span class="number">1</span>, test2 = <span class="number">2</span>, test3 = <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">    var <span class="symbol">rawValue:</span> Int &#123;</span><br><span class="line">    switch <span class="keyword">self</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> .<span class="symbol">test1:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="symbol">test2:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="symbol">test3:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">print(TestEnum.test3.rawValue) /<span class="regexp">/12</span></span><br></pre></td></tr></table></figure><p>枚举原始值rawValue的本质就是只读计算属性</p><h5 id="三-延迟存储属性-Lazy-Stored-Property"><a href="#三-延迟存储属性-Lazy-Stored-Property" class="headerlink" title="三 延迟存储属性(Lazy Stored Property)"></a>三 延迟存储属性(Lazy Stored Property)</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Car2 init!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Car2 is running!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car2  = <span class="type">Car2</span>()</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person2 init!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">goOut</span><span class="params">()</span></span>  &#123;</span><br><span class="line">        car2.run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="type">Person2</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"***********"</span>)</span><br><span class="line">person2.goOut()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-----------"</span>)</span><br><span class="line"><span class="comment">//Car2 init!</span></span><br><span class="line"><span class="comment">//person2 init!</span></span><br><span class="line"><span class="comment">//***********</span></span><br><span class="line"><span class="comment">//Car2 is running!z</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Car init!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Car is running!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> car  = <span class="type">Car</span>()  <span class="comment">//使用l延迟属性</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person init!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">goOut</span><span class="params">()</span></span>  &#123;</span><br><span class="line">        car.run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"***********"</span>)</span><br><span class="line">person.goOut()</span><br><span class="line"></span><br><span class="line"><span class="comment">//person init!</span></span><br><span class="line"><span class="comment">//***********</span></span><br><span class="line"><span class="comment">//Car init!</span></span><br><span class="line"><span class="comment">//Car is running!</span></span><br></pre></td></tr></table></figure><p>使用lazy来定义一个延迟属性,lazy定义的属性只有在第一次使用的时候才会进行初始化</p><ul><li>lazy属性必须是var,不能是let ,let必须在实例的初始化方法完成之前就拥有值,而lazy属性在第一次使用才初始化,有可能在类初始化的时候延时属性还没有使用.那它就不会初始化</li></ul><h5 id="延时属性注意点⚠️"><a href="#延时属性注意点⚠️" class="headerlink" title="延时属性注意点⚠️"></a>延时属性注意点⚠️</h5><p>1 多线程情况下第一次访问lazy属性无法保证属性只被初始化一次</p><p> 2  当结构体包含一个延迟存储属性时,只有var才能访问延迟属性</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">0</span></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> z = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="type">Point</span>() <span class="comment">//var</span></span><br><span class="line"><span class="built_in">print</span>(p.z) ❌</span><br></pre></td></tr></table></figure><p>  延迟属性初始化需要改变结构体的内存结构,let 定义的结构体第一次初始化后是不允许改的.</p><h5 id="四-属性观察器"><a href="#四-属性观察器" class="headerlink" title="四 属性观察器"></a>四 属性观察器</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radius:<span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span>&#123; <span class="comment">//会传递新值,默认叫newValue</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"willSet"</span>,newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">didSet</span> &#123;<span class="comment">//会传递旧值,默认叫oldValue</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"didSet"</span>, oldValue, radius)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.radius = <span class="number">1.0</span> <span class="comment">//在初始化器中设置属性值不会触发willSet和didSet</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Circle init!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> circle = <span class="type">Circle</span>() <span class="comment">//Circle init!</span></span><br><span class="line">circle.radius = <span class="number">5.0</span><span class="comment">//willSet 5.0 //didSet 1.0 5.0</span></span><br></pre></td></tr></table></figure><p>可以为非lazy的var 存储属性设置属性观察器, let 不能设置, 计算属性不能设置观察器,因为没必要</p><ul><li><p>willSet会传递新值,默认叫newValue</p></li><li><p>didSet会传递旧值,默认叫oldValue</p></li><li><p>在初始化器中设置属性值不会触发willSet和didSet</p></li><li><p>在属性定义时设置属性值不会触发willSet和didSet</p></li></ul><h5 id="五-输入输出参数在类结构体中的情况-inout"><a href="#五-输入输出参数在类结构体中的情况-inout" class="headerlink" title="五 输入输出参数在类结构体中的情况(inout)"></a>五 输入输出参数在类结构体中的情况(inout)</h5><h5 id="存储属性"><a href="#存储属性" class="headerlink" title="存储属性"></a>存储属性</h5> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> side:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"willSetSide"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"didSetSide"</span>, oldValue,side)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> girth:<span class="type">Int</span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            width = newValue / side</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"setGrith"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"getGirth"</span>)</span><br><span class="line">            <span class="keyword">return</span> width * side</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"width=\(width),side=\(side), girth=\(girth)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="number">_</span> num:<span class="keyword">inout</span> Int)</span></span>  &#123;</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="type">Shape</span>(width: <span class="number">10</span>, side: <span class="number">4</span>)</span><br><span class="line">test(&amp;s.width)</span><br><span class="line">s.show()</span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="comment">//getGirth</span></span><br><span class="line"><span class="comment">//width=20,side=4, girth=80</span></span><br></pre></td></tr></table></figure> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0x1000015c8</span> <span class="string">&lt;+24&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="number">-0x40</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x1000015cc</span> <span class="string">&lt;+28&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x1000015cf</span> <span class="string">&lt;+31&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100002050</span>               <span class="string">;</span> <span class="string">sudy.Shape.init(width:</span> <span class="string">Swift.Int,</span> <span class="attr">side:</span> <span class="string">Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">sudy.Shape</span> <span class="string">at</span> <span class="string">main.swift:1</span></span><br><span class="line">    <span class="number">0x1000015d4</span> <span class="string">&lt;+36&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x6c25</span><span class="string">(%rip),</span> <span class="string">%rsi</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span></span><br><span class="line">    <span class="number">0x1000015db</span> <span class="string">&lt;+43&gt;:</span>  <span class="string">xorl</span>   <span class="string">%ecx,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x1000015dd</span> <span class="string">&lt;+45&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">0x6c1c</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span></span><br><span class="line">    <span class="number">0x1000015e4</span> <span class="string">&lt;+52&gt;:</span>  <span class="string">movq</span>   <span class="string">%rdx,</span> <span class="number">0x6c1d</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span> <span class="string">+</span> <span class="number">8</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x1000015eb</span> <span class="string">&lt;+59&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x1000015ee</span> <span class="string">&lt;+62&gt;:</span>  <span class="string">leaq</span>   <span class="number">-0x18</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x1000015f2</span> <span class="string">&lt;+66&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x21,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x1000015f7</span> <span class="string">&lt;+71&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100006380</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">    <span class="number">0x1000015fc</span> <span class="string">&lt;+76&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x6bfd</span><span class="string">(%rip),</span> <span class="string">%rdi</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span> <span class="string">//将s的地址值当作参数</span></span><br><span class="line">    <span class="number">0x100001603</span> <span class="string">&lt;+83&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100002060</span>               <span class="string">;</span> <span class="string">sudy.test(inout</span> <span class="string">Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">()</span> <span class="string">at</span> <span class="string">main.swift:28</span> <span class="string">//调用test方法</span></span><br><span class="line">    <span class="number">0x100001608</span> <span class="string">&lt;+88&gt;:</span>  <span class="string">leaq</span>   <span class="number">-0x18</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x10000160c</span> <span class="string">&lt;+92&gt;:</span>  <span class="string">callq</span>  <span class="number">0x10000639e</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x100001611</span> <span class="string">&lt;+97&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x6be8</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span></span><br><span class="line">    <span class="number">0x100001618</span> <span class="string">&lt;+104&gt;:</span> <span class="string">xorl</span>   <span class="string">%r8d,</span> <span class="string">%r8d</span></span><br><span class="line">    <span class="number">0x10000161b</span> <span class="string">&lt;+107&gt;:</span> <span class="string">movl</span>   <span class="string">%r8d,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x10000161e</span> <span class="string">&lt;+110&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100001621</span> <span class="string">&lt;+113&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x30</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x100001625</span> <span class="string">&lt;+117&gt;:</span> <span class="string">movl</span>   <span class="string">$0x20,</span> <span class="string">%edx</span></span><br></pre></td></tr></table></figure><p> 存储属性就是普通的地址传递</p><h5 id="属性观察器"><a href="#属性观察器" class="headerlink" title="属性观察器"></a>属性观察器</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> side:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"willSetSide"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"didSetSide"</span>, oldValue,side)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> girth:<span class="type">Int</span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            width = newValue / side</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"setGrith"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"getGirth"</span>)</span><br><span class="line">            <span class="keyword">return</span> width * side</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"width=\(width),side=\(side), girth=\(girth)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="number">_</span> num:<span class="keyword">inout</span> Int)</span></span>  &#123;</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="type">Shape</span>(width: <span class="number">10</span>, side: <span class="number">4</span>)</span><br><span class="line">test(&amp;s.side)</span><br><span class="line">s.show()</span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="comment">//willSetSide 20</span></span><br><span class="line"><span class="comment">//didSetSide 4 20</span></span><br><span class="line"><span class="comment">//getGirth</span></span><br><span class="line"><span class="comment">//width=10,side=20, girth=200</span></span><br></pre></td></tr></table></figure> <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">0x10000151d</span> &lt;+<span class="number">61</span>&gt;:  movq   <span class="symbol">%rsi</span>, <span class="symbol">%rdi</span></span><br><span class="line">    <span class="number">0x100001520</span> &lt;+<span class="number">64</span>&gt;:  leaq   <span class="number">-0</span><span class="keyword">x</span><span class="number">20</span>(<span class="symbol">%rbp</span>), <span class="symbol">%rsi</span></span><br><span class="line">    <span class="number">0x100001524</span> &lt;+<span class="number">68</span>&gt;:  movl   $<span class="number">0x21</span>, <span class="symbol">%edx</span></span><br><span class="line">    <span class="number">0x100001529</span> &lt;+<span class="number">73</span>&gt;:  callq  <span class="number">0x100006380</span>               <span class="comment">; symbol stub for: swift_beginAccess</span></span><br><span class="line"><span class="comment">    0x10000152e &lt;+78&gt;:  movq   0x6cd3(%rip), %rax        ; sudy.s : sudy.Shape + 8  // s 的第二个成员的值给rax sid里的内容</span></span><br><span class="line"><span class="comment">    0x100001535 &lt;+85&gt;:  movq   %rax, -0x28(%rbp) // rax里的值赋给一个局部变量</span></span><br><span class="line"><span class="comment">    0x100001539 &lt;+89&gt;:  leaq   -0x28(%rbp), %rdi //局部变量里的地址值当作参数</span></span><br><span class="line"><span class="comment">    0x10000153d &lt;+93&gt;:  callq  0x100001fb0               ; sudy.test(inout Swift.Int) -&gt; () at main.swift:28 //调用test方法</span></span><br><span class="line"><span class="comment">    0x100001542 &lt;+98&gt;:  movq   -0x28(%rbp), %rdi //将局部变量里的内容给rid. 当作参数</span></span><br><span class="line"><span class="comment">    0x100001546 &lt;+102&gt;: leaq   0x6cb3(%rip), %r13        ; sudy.s : sudy.Shape</span></span><br><span class="line"><span class="comment">    0x10000154d &lt;+109&gt;: callq  0x100001640               ;  //调用set 方法sudy.Shape.side.setter : Swift.Int at &lt;compiler-generated&gt;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">set方法里面调用willset.  didset</span></span><br><span class="line"><span class="comment">sudy`Shape.side.setter:</span></span><br><span class="line"><span class="comment">-&gt;  0x100001640 &lt;+0&gt;:  pushq  %rbp</span></span><br><span class="line"><span class="comment">    0x100001641 &lt;+1&gt;:  movq   %rsp, %rbp</span></span><br><span class="line"><span class="comment">    0x100001644 &lt;+4&gt;:  pushq  %r13</span></span><br><span class="line"><span class="comment">    0x100001646 &lt;+6&gt;:  subq   $0x28, %rsp</span></span><br><span class="line"><span class="comment">    0x10000164a &lt;+10&gt;: movq   $0x0, -0x10(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001652 &lt;+18&gt;: movq   $0x0, -0x18(%rbp)</span></span><br><span class="line"><span class="comment">    0x10000165a &lt;+26&gt;: movq   %rdi, -0x10(%rbp)</span></span><br><span class="line"><span class="comment">    0x10000165e &lt;+30&gt;: movq   %r13, -0x18(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001662 &lt;+34&gt;: movq   0x8(%r13), %rax</span></span><br><span class="line"><span class="comment">    0x100001666 &lt;+38&gt;: movq   %rax, %rcx</span></span><br><span class="line"><span class="comment">    0x100001669 &lt;+41&gt;: movq   %rdi, -0x20(%rbp)</span></span><br><span class="line"><span class="comment">    0x10000166d &lt;+45&gt;: movq   %r13, -0x28(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001671 &lt;+49&gt;: movq   %rax, -0x30(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001675 &lt;+53&gt;: callq  0x1000016a0               ; sudy.Shape.side.willset : Swift.Int at main.swift:4</span></span><br><span class="line"><span class="comment">    0x10000167a &lt;+58&gt;: movq   -0x28(%rbp), %rax</span></span><br><span class="line"><span class="comment">    0x10000167e &lt;+62&gt;: movq   -0x20(%rbp), %rcx</span></span><br><span class="line"><span class="comment">    0x100001682 &lt;+66&gt;: movq   %rcx, 0x8(%rax) //开始赋值</span></span><br><span class="line"><span class="comment">    0x100001686 &lt;+70&gt;: movq   -0x30(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x10000168a &lt;+74&gt;: movq   %rax, %r13</span></span><br><span class="line"><span class="comment">    0x10000168d &lt;+77&gt;: callq  0x1000017c0               ; sudy.Shape.side.didset : Swift.Int at main.swift:7</span></span><br><span class="line"><span class="comment">    0x100001692 &lt;+82&gt;: movq   -0x30(%rbp), %rax</span></span><br><span class="line"><span class="comment">    0x100001696 &lt;+86&gt;: addq   $0x28, %rsp</span></span><br><span class="line"><span class="comment">    0x10000169a &lt;+90&gt;: popq   %r13</span></span><br><span class="line"><span class="comment">    0x10000169c &lt;+92&gt;: popq   %rbp</span></span><br><span class="line"><span class="comment">    0x10000169d &lt;+93&gt;: retq</span></span><br></pre></td></tr></table></figure><p> 带有属性观察器属性inout调用流程:</p><ol><li>通过s变量地址 + 8 位拿的第二个属性side的内存地址,然后放到一个临时的变量里</li><li>把临时变量的地址传到test方法里</li><li>test方法操作完毕后,临时变量的值改变了</li><li>最后调用side set方法</li><li>set 方法先调用willset.然后改变side属性值 最后调用didset方法</li></ol><h5 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> side:<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"willSetSide"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"didSetSide"</span>, oldValue,side)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> girth:<span class="type">Int</span>&#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            width = newValue / side</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"setGrith"</span>, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"getGirth"</span>)</span><br><span class="line">            <span class="keyword">return</span> width * side</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"width=\(width),side=\(side), girth=\(girth)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="number">_</span> num:<span class="keyword">inout</span> Int)</span></span>  &#123;</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="type">Shape</span>(width: <span class="number">10</span>, side: <span class="number">4</span>)</span><br><span class="line">test(&amp;s.girth)</span><br><span class="line">s.show()</span><br><span class="line"><span class="comment">//getGirth</span></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="comment">//setGrith 20</span></span><br><span class="line"><span class="comment">//getGirth</span></span><br><span class="line"><span class="comment">//width=5,side=4, girth=20</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x1000015cd</span> <span class="string">&lt;+61&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="string">%rdi</span></span><br><span class="line">   <span class="number">0x1000015d0</span> <span class="string">&lt;+64&gt;:</span>  <span class="string">leaq</span>   <span class="number">-0x20</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">   <span class="number">0x1000015d4</span> <span class="string">&lt;+68&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x21,</span> <span class="string">%edx</span></span><br><span class="line">   <span class="number">0x1000015d9</span> <span class="string">&lt;+73&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100006380</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">   <span class="number">0x1000015de</span> <span class="string">&lt;+78&gt;:</span>  <span class="string">movq</span>   <span class="number">0x6c1b</span><span class="string">(%rip),</span> <span class="string">%rdi</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span></span><br><span class="line">   <span class="number">0x1000015e5</span> <span class="string">&lt;+85&gt;:</span>  <span class="string">movq</span>   <span class="number">0x6c1c</span><span class="string">(%rip),</span> <span class="string">%rsi</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span> <span class="string">+</span> <span class="number">8</span></span><br><span class="line">   <span class="number">0x1000015ec</span> <span class="string">&lt;+92&gt;:</span>  <span class="string">callq</span>  <span class="number">0x1000019b0</span>               <span class="string">;</span> <span class="attr">sudy.Shape.girth.getter :</span> <span class="string">Swift.Int</span> <span class="string">at</span> <span class="string">main.swift:18</span> <span class="string">//调用girth</span> <span class="string">get方法</span> <span class="string">获取girth变量地址</span></span><br><span class="line">   <span class="number">0x1000015f1</span> <span class="string">&lt;+97&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x28</span><span class="string">(%rbp)</span> <span class="string">girth变量地址给</span> <span class="number">-0x28</span><span class="string">(%rbp)临时变量</span> <span class="string">栈空间</span></span><br><span class="line">   <span class="number">0x1000015f5</span> <span class="string">&lt;+101&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x28</span><span class="string">(%rbp),</span> <span class="string">%rdi</span> <span class="string">//</span> <span class="number">-0x28</span><span class="string">(%rbp)临时变量的地址值给</span> <span class="string">rdi</span></span><br><span class="line">   <span class="number">0x1000015f9</span> <span class="string">&lt;+105&gt;:</span> <span class="string">callq</span>  <span class="number">0x100002060</span>               <span class="string">;</span> <span class="string">sudy.test(inout</span> <span class="string">Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">()</span> <span class="string">at</span> <span class="string">main.swift:28</span>        <span class="string">//调用test方法</span></span><br><span class="line">   <span class="number">0x1000015fe</span> <span class="string">&lt;+110&gt;:</span> <span class="string">movq</span>   <span class="number">-0x28</span><span class="string">(%rbp),</span> <span class="string">%rdi</span>   <span class="string">//临时变量里面的值给rdi</span> <span class="string">作为函数参数</span></span><br><span class="line">   <span class="number">0x100001602</span> <span class="string">&lt;+114&gt;:</span> <span class="string">leaq</span>   <span class="number">0x6bf7</span><span class="string">(%rip),</span> <span class="string">%r13</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span></span><br><span class="line">   <span class="number">0x100001609</span> <span class="string">&lt;+121&gt;:</span> <span class="string">callq</span>  <span class="number">0x100001b00</span>               <span class="string">;</span> <span class="attr">sudy.Shape.girth.setter :</span> <span class="string">Swift.Int</span> <span class="string">at</span> <span class="string">main.swift:13</span>  <span class="string">//调用</span> <span class="string">girth</span> <span class="string">set方法</span></span><br><span class="line">   <span class="number">0x10000160e</span> <span class="string">&lt;+126&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x20</span><span class="string">(%rbp),</span> <span class="string">%rdi</span> </span><br><span class="line">   <span class="number">0x100001612</span> <span class="string">&lt;+130&gt;:</span> <span class="string">callq</span>  <span class="number">0x10000639e</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">   <span class="number">0x100001617</span> <span class="string">&lt;+135&gt;:</span> <span class="string">leaq</span>   <span class="number">0x6be2</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span></span><br><span class="line">   <span class="number">0x10000161e</span> <span class="string">&lt;+142&gt;:</span> <span class="string">xorl</span>   <span class="string">%r8d,</span> <span class="string">%r8d</span></span><br><span class="line">   <span class="number">0x100001621</span> <span class="string">&lt;+145&gt;:</span> <span class="string">movl</span>   <span class="string">%r8d,</span> <span class="string">%ecx</span></span><br><span class="line">   <span class="number">0x100001624</span> <span class="string">&lt;+148&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">   <span class="number">0x100001627</span> <span class="string">&lt;+151&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x40</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">   <span class="number">0x10000162b</span> <span class="string">&lt;+155&gt;:</span> <span class="string">movl</span>   <span class="string">$0x20,</span> <span class="string">%edx</span></span><br><span class="line">   <span class="number">0x100001630</span> <span class="string">&lt;+160&gt;:</span> <span class="string">callq</span>  <span class="number">0x100006380</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">   <span class="number">0x100001635</span> <span class="string">&lt;+165&gt;:</span> <span class="string">movq</span>   <span class="number">0x6bc4</span><span class="string">(%rip),</span> <span class="string">%rdi</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span></span><br><span class="line">   <span class="number">0x10000163c</span> <span class="string">&lt;+172&gt;:</span> <span class="string">movq</span>   <span class="number">0x6bc5</span><span class="string">(%rip),</span> <span class="string">%rsi</span>        <span class="string">;</span> <span class="attr">sudy.s :</span> <span class="string">sudy.Shape</span> <span class="string">+</span> <span class="number">8</span></span><br><span class="line">   <span class="number">0x100001643</span> <span class="string">&lt;+179&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x40</span><span class="string">(%rbp),</span> <span class="string">%rax</span></span><br><span class="line">   <span class="number">0x100001647</span> <span class="string">&lt;+183&gt;:</span> <span class="string">movq</span>   <span class="string">%rdi,</span> <span class="number">-0x58</span><span class="string">(%rbp)</span></span><br><span class="line">   <span class="number">0x10000164b</span> <span class="string">&lt;+187&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">   <span class="number">0x10000164e</span> <span class="string">&lt;+190&gt;:</span> <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="number">-0x60</span><span class="string">(%rbp)</span></span><br></pre></td></tr></table></figure><p>计算属性inout调用流程:</p><ol><li>调用girth的get方法拿到girth的内存地址,然后放到一个临时的变量里</li><li>把临时变量的地址传到test方法里</li><li>test方法操作完毕后,临时变量的值改变了</li><li>最后调用girth set方法,并把临时变量当作参数传递到set方法里</li></ol><hr><blockquote><p>总结:</p><p>如果实参有物理内存地址，且没有设置属性观察器</p></blockquote><blockquote><p>直接将实参的内存地址传入函数(实参进行引用传递)</p></blockquote><blockquote><p>如果实参是计算属性 或者 设置了属性观察器</p></blockquote><blockquote><p>采取了Copy In Copy Out的做法</p></blockquote><blockquote><p>调用该函数时，先复制实参的值，产生副本【get】</p></blockquote><blockquote><p>将副本的内存地址传入函数(副本进行引用传递)，在函数内部可以修改副本的值</p></blockquote><blockquote><p>函数返回后，再将副本的值覆盖实参的值【set】</p></blockquote><blockquote><p>总结:inout的本质就是引用传递(地址传递)</p></blockquote><h5 id="六-类型属性"><a href="#六-类型属性" class="headerlink" title="六 类型属性"></a>六 类型属性</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> side:<span class="type">Int</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shaps</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">width</span>:<span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Shap</span>.<span class="built_in">count</span> = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Shap</span>.<span class="built_in">count</span>)</span><br></pre></td></tr></table></figure><p>类型属性: 只能通过类型去访问,可以通过static定义类型属性,如果是类,也可以用关键字class</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">Car</span>.<span class="built_in">count</span> = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">12</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudy`main:</span></span><br><span class="line">    <span class="number">0x100001030</span> <span class="string">&lt;+0&gt;:</span>  <span class="string">pushq</span>  <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100001031</span> <span class="string">&lt;+1&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsp,</span> <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100001034</span> <span class="string">&lt;+4&gt;:</span>  <span class="string">subq</span>   <span class="string">$0x30,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x100001038</span> <span class="string">&lt;+8&gt;:</span>  <span class="string">movq</span>   <span class="string">$0xa,</span> <span class="number">0x62ed</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="string">lazy</span> <span class="string">cache</span> <span class="string">variable</span> <span class="string">for</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Swift.Array&lt;Swift.UInt8&gt;</span> <span class="string">+</span> <span class="attr">4//num1:</span> <span class="number">0x100007330</span></span><br><span class="line">    <span class="number">0x100001043</span> <span class="string">&lt;+19&gt;:</span> <span class="string">movl</span>   <span class="string">%edi,</span> <span class="number">-0x1c</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001046</span> <span class="string">&lt;+22&gt;:</span> <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="number">-0x28</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x10000104a</span> <span class="string">&lt;+26&gt;:</span> <span class="string">callq</span>  <span class="number">0x100001110</span>               <span class="string">;</span> <span class="attr">sudy.Car.count.unsafeMutableAddressor :</span> <span class="string">Swift.Int</span> <span class="string">at</span> <span class="string">main.swift</span></span><br><span class="line">    <span class="number">0x10000104f</span> <span class="string">&lt;+31&gt;:</span> <span class="string">xorl</span>   <span class="string">%edi,</span> <span class="string">%edi</span></span><br><span class="line">    <span class="number">0x100001051</span> <span class="string">&lt;+33&gt;:</span> <span class="string">movl</span>   <span class="string">%edi,</span> <span class="string">%ecx</span></span><br><span class="line">    <span class="number">0x100001053</span> <span class="string">&lt;+35&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x100001056</span> <span class="string">&lt;+38&gt;:</span> <span class="string">movq</span>   <span class="string">%rsi,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100001059</span> <span class="string">&lt;+41&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x18</span><span class="string">(%rbp),</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x10000105d</span> <span class="string">&lt;+45&gt;:</span> <span class="string">movl</span>   <span class="string">$0x21,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x100001062</span> <span class="string">&lt;+50&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x30</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100001066</span> <span class="string">&lt;+54&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000053f0</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_beginAccess</span></span><br><span class="line">    <span class="number">0x10000106b</span> <span class="string">&lt;+59&gt;:</span> <span class="string">movq</span>   <span class="number">-0x30</span><span class="string">(%rbp),</span> <span class="string">%rax</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x10000106f</span> <span class="string">&lt;+63&gt;:</span> <span class="string">movq</span>   <span class="string">$0xb,</span> <span class="string">(%rax)</span> <span class="string">//count</span>  <span class="number">100007338</span></span><br><span class="line">    <span class="number">0x100001076</span> <span class="string">&lt;+70&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x18</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x10000107a</span> <span class="string">&lt;+74&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005414</span>               <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x10000107f</span> <span class="string">&lt;+79&gt;:</span> <span class="string">xorl</span>   <span class="string">%eax,</span> <span class="string">%eax</span></span><br><span class="line">    <span class="number">0x100001081</span> <span class="string">&lt;+81&gt;:</span> <span class="string">movq</span>   <span class="string">$0xc,</span> <span class="number">0x62b4</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="attr">static sudy.Car.count :</span> <span class="string">Swift.Int</span> <span class="string">+</span> <span class="attr">4 //num2:</span> <span class="number">0x100007340</span></span><br><span class="line">    <span class="number">0x10000108c</span> <span class="string">&lt;+92&gt;:</span> <span class="string">addq</span>   <span class="string">$0x30,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x100001090</span> <span class="string">&lt;+96&gt;:</span> <span class="string">popq</span>   <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100001091</span> <span class="string">&lt;+97&gt;:</span> <span class="string">retq</span>   </span><br><span class="line">    </span><br><span class="line">    <span class="string">register</span> <span class="string">read</span> <span class="string">rax</span></span><br><span class="line">     <span class="string">rax</span> <span class="string">=</span> <span class="number">0x0000000100007338</span>  <span class="string">sudy`static</span> <span class="attr">sudy.Car.count :</span> <span class="string">Swift.Int</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">num1 :</span> <span class="number">0x100007330</span></span><br><span class="line"><span class="attr">count:</span> <span class="number">0x100007338</span> </span><br><span class="line"><span class="attr">num2:</span>  <span class="number">0x100007340</span></span><br><span class="line"><span class="string">三个变量内存地址挨着的,都在全局区</span></span><br></pre></td></tr></table></figure><p>类型属性分为:</p><ul><li><p>存储类型属性: 整个程序运行过程中,就只有一份内存,类似于全局变量,它是线程安全的,底层调用了dispatch_once</p></li><li><p>计算类型属性</p></li></ul><h5 id="类型属性细节"><a href="#类型属性细节" class="headerlink" title="类型属性细节"></a>类型属性细节</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span> </span><br><span class="line">    var <span class="built_in">width</span>:Int </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> var <span class="built_in">width</span>:Int ❌</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shaps</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> var <span class="built_in">width</span>:Int ❌</span><br><span class="line">    init() &#123;</span><br><span class="line">        Shap.<span class="built_in">width</span> = <span class="number">0</span> ❌ <span class="comment">//类型属性没有init初始化器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟存储实例属性不同,我们必须给存储类型属性设定初始值,那是因为类型没有init初始化器来初始化类型属性</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> shared = FileManager()</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">init</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存储类型属性默认就是lazy，会在第一次使用的时候才初始化 ,就算被多个线程同时访问，保证只会初始化一次,因此swift写单例很简单</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> west,north</span><br><span class="line">    static var num = <span class="number">10</span></span><br><span class="line">    static var <span class="symbol">hh:</span>Int &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print(Direction.num) /<span class="regexp">/10</span></span><br></pre></td></tr></table></figure><p>枚举也可以定义类型属性(存储类型属性,计算类型属性都可以).  </p><p>为什么可以? </p><p>类型属性类似于全局变量,内存不是存储在对象变量的内存里的,所以枚举不需要存储类型属性</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;swift 属性分为两大类: 实例属性和类型属性,.实例属性又分为:存储实例属性和计算实例属性, 类型属性分为: 存储类型属性和计算类型属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;一-实例存储属性&quot;&gt;&lt;a href=&quot;#一-实例存储属性&quot; class=&quot;headerlink&quot; title=&quot;一 实例存储属性&quot;&gt;&lt;/a&gt;一 实例存储属性&lt;/h5&gt;&lt;figure class=&quot;highlight zephir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct Point &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x:&lt;span class=&quot;keyword&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y:&lt;span class=&quot;keyword&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = Point(x:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,y:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(MemoryLayout.stride(ofValue: p))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Circle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x:&lt;span class=&quot;keyword&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y:&lt;span class=&quot;keyword&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(x:&lt;span class=&quot;keyword&quot;&gt;Int&lt;/span&gt;,y:&lt;span class=&quot;keyword&quot;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.x = x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.y = y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相当于成员变量,属性存储在实例的内存中,只有结构体和类可以定义实例存储属性,枚举不可以定义存储属性.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 枚举为什么不可以定义存储属性呢?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先存储属性是存储在实例内存中的,而枚举实例值存储了case相关值标识,比如枚举原始值,只占1个字节,这里的枚举是无法存储你定义其它非case变量的&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 闭包</title>
    <link href="http://example.com/2019/09/02/swift-%E9%97%AD%E5%8C%85/"/>
    <id>http://example.com/2019/09/02/swift-闭包/</id>
    <published>2019-09-02T07:04:23.000Z</published>
    <updated>2020-12-24T14:03:42.542Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-闭包的定义"><a href="#一-闭包的定义" class="headerlink" title="一 闭包的定义"></a>一 闭包的定义</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Fn</span> = (<span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFn</span><span class="params">()</span></span> -&gt;<span class="type">Fn</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">plus</span><span class="params">(<span class="number">_</span> i:Int)</span></span> -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">        num += i</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plus</span><br><span class="line">&#125; <span class="comment">// 返回的plus和num形成了闭包</span></span><br><span class="line"><span class="keyword">var</span> fn1 = getFn()</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1</span>)) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>一个函数和它所捕获的变量或常量环境组合起来，称为 <strong>闭包</strong></p><ul><li><p>一般指定义在函数内部的函数</p></li><li><p>一般它捕获的是外层函数的局部变量或常量</p></li></ul><a id="more"></a><h5 id="二-闭包表达式"><a href="#二-闭包表达式" class="headerlink" title="二 闭包表达式"></a>二 闭包表达式</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">func</span> sum(_ <span class="built_in">v1</span>:Int, _ <span class="built_in">v2</span>:Int) -&gt; Int &#123;</span><br><span class="line">    <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">var</span> <span class="meta">fn</span> = &#123;</span><br><span class="line">    (<span class="built_in">v1</span>:Int,<span class="built_in">v2</span>:Int) -&gt;Int in</span><br><span class="line">    return <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">print</span>(<span class="meta">fn</span>(<span class="number">10</span>,<span class="number">20</span>)) //<span class="number">30</span></span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">     <span class="function"><span class="params">(参数列表)</span> -&gt;</span> 返回值类型 <span class="keyword">in</span> 函数体代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swift定义函数可以通过func定义一个函数，还可以通过闭包表达式来定义一个函数</p><h5 id="三-闭包表达式简写"><a href="#三-闭包表达式简写" class="headerlink" title="三 闭包表达式简写"></a>三 闭包表达式简写</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">func</span> exec(<span class="built_in">v1</span>:Int,<span class="built_in">v2</span>:Int,<span class="meta">fn</span>:(Int,Int)-&gt;Int) &#123;</span><br><span class="line">    print(<span class="meta">fn</span>(<span class="built_in">v1</span>,<span class="built_in">v2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>,<span class="meta">fn</span>: &#123;  //完整写法</span><br><span class="line">    (<span class="built_in">v1</span>:Int,<span class="built_in">v2</span>:Int) in</span><br><span class="line">    return <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>,<span class="meta">fn</span>:&#123;  //可以省略参数类型</span><br><span class="line">    <span class="built_in">v1</span>,<span class="built_in">v2</span> in return <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>, <span class="meta">fn</span>: &#123; // 省略return</span><br><span class="line">    <span class="built_in">v1</span>,<span class="built_in">v2</span> in <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>, <span class="meta">fn</span>: &#123; // $nuber 获取输入参数</span><br><span class="line">    <span class="number">$0</span> + <span class="number">$1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>, <span class="meta">fn</span>: +) //超变态写法，编译器知道你是要相加两个数</span><br></pre></td></tr></table></figure><h5 id="四-尾随闭包"><a href="#四-尾随闭包" class="headerlink" title="四 尾随闭包"></a>四 尾随闭包</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">func</span> exec(<span class="built_in">v1</span>:Int,<span class="built_in">v2</span>:Int,<span class="meta">fn</span>:(Int,Int)-&gt;Int) &#123;</span><br><span class="line">    print(<span class="meta">fn</span>(<span class="built_in">v1</span>,<span class="built_in">v2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>) &#123; (<span class="built_in">v1</span>, <span class="built_in">v2</span>) -&gt; Int in</span><br><span class="line">    <span class="built_in">v1</span> + <span class="built_in">v2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">exec</span>(<span class="built_in">v1</span>: <span class="number">10</span>, <span class="built_in">v2</span>: <span class="number">20</span>) &#123;</span><br><span class="line">    <span class="number">$0</span> + <span class="number">$1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数表达式作为函数的最后一个实参，才可以使用尾随闭包</p><p>尾随闭包是一个被书写在函数调用括号外面（后面）的闭包表达式</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func <span class="keyword">exec</span>(fn:(Int,Int)-&gt;Int) &#123;</span><br><span class="line">    <span class="keyword">print</span>(fn(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span>(fn: &#123; $0 + $1&#125;)</span><br><span class="line"><span class="keyword">exec</span>()&#123; $0 + $1&#125;</span><br><span class="line"><span class="keyword">exec</span>&#123; $0 + $1&#125;  <span class="comment">//省略了小括号</span></span><br></pre></td></tr></table></figure><p>如果闭包表达式是函数的<strong>唯一</strong>实参，而且使用了尾随闭包的语法，那函数名后面的小括号也可以省略</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">func <span class="keyword">sort</span>(<span class="keyword">by</span> areInIncreasingOrder: (Element, Element) -&gt; Bool)</span><br><span class="line">  <span class="comment">/// 返回true: i1排在i2前面</span></span><br><span class="line"><span class="comment">/// 返回false: i1排在i2后面</span></span><br><span class="line"> </span><br><span class="line">func cmp(i1: Int, i2: Int) -&gt; Bool &#123;</span><br><span class="line"><span class="comment">// 大的排在前面</span></span><br><span class="line">    <span class="keyword">return</span> i1 &gt; i2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nums.<span class="keyword">sort</span>(<span class="keyword">by</span>: &#123;</span><br><span class="line">   (i1: Int, i2: Int) -&gt; Bool <span class="keyword">in</span> <span class="keyword">return</span> i1 &lt; i2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">nums.<span class="keyword">sort</span>(<span class="keyword">by</span>: &#123; i1, i2 <span class="keyword">in</span> <span class="keyword">return</span> i1 &lt; i2 &#125;)</span><br><span class="line">nums.<span class="keyword">sort</span>(<span class="keyword">by</span>: &#123; i1, i2 <span class="keyword">in</span> i1 &lt; i2 &#125;)</span><br><span class="line">nums.<span class="keyword">sort</span>(<span class="keyword">by</span>: &#123; <span class="variable">$0</span> &lt; <span class="variable">$1</span> &#125;)</span><br><span class="line">nums.<span class="keyword">sort</span>(<span class="keyword">by</span>: &lt;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是尾随闭包写法</span></span><br><span class="line">nums.<span class="keyword">sort</span>() &#123; <span class="variable">$0</span> &lt; <span class="variable">$1</span> &#125;</span><br><span class="line">nums.<span class="keyword">sort</span> &#123; <span class="variable">$0</span> &lt; <span class="variable">$1</span> &#125;</span><br><span class="line"><span class="comment">// [2, 5, 6, 11, 18, 45, 68]</span></span><br><span class="line"><span class="keyword">var</span> nums = [11, 2, 18, 6, 5, 68, 45]</span><br><span class="line">nums.<span class="keyword">sort</span>(<span class="keyword">by</span>: cmp)</span><br><span class="line"><span class="comment">// [68, 45, 18, 11, 6, 5, 2]</span></span><br></pre></td></tr></table></figure><p>上面是一个数组排序的示例，可以使用尾随闭包</p><h5 id="五-闭包内存结构"><a href="#五-闭包内存结构" class="headerlink" title="五 闭包内存结构"></a>五 闭包内存结构</h5><p>下面是一段普通的嵌套函数</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typealias <span class="function"><span class="title">Fn</span> = <span class="params">(Int)</span> -&gt;</span> Int</span><br><span class="line">func getFn<span class="function"><span class="params">()</span> -&gt;</span>Fn &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    func plus<span class="function"><span class="params">(_ i:Int)</span> -&gt;</span> Int&#123;</span><br><span class="line"><span class="regexp">//        num += i</span></span><br><span class="line"><span class="regexp">//</span>        <span class="keyword">return</span> num</span><br><span class="line">          <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plus</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn1 = getFn()</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1</span>)) <span class="regexp">//1</span></span><br></pre></td></tr></table></figure><p>底层汇编</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">test`getFn():</span><br><span class="line">    <span class="number">0x1000010b0</span> &lt;+<span class="number">0</span>&gt;:  pushq  %rbp</span><br><span class="line">    <span class="number">0x1000010b1</span> &lt;+<span class="number">1</span>&gt;:  movq   %rsp, %rbp</span><br><span class="line">    <span class="number">0x1000010b4</span> &lt;+<span class="number">4</span>&gt;:  movq   $<span class="number">0x0</span>, -<span class="number">0x8</span>(%rbp)</span><br><span class="line">-&gt;  <span class="number">0x1000010bc</span> &lt;+<span class="number">12</span>&gt;: leaq   <span class="number">0xd</span><span class="function"><span class="params">(%rip)</span>, %<span class="title">rax</span>           ; <span class="title">plus</span> #1 <span class="params">(Swift.Int)</span> -&gt;</span> Swift.Int <span class="keyword">in</span> test.getFn<span class="function"><span class="params">()</span> -&gt;</span> <span class="function"><span class="params">(Swift.Int)</span> -&gt;</span> Swift.Int at main.swift:<span class="number">4</span>//把plus函数地址放到rax  <span class="number">0x1000010c3</span>+<span class="number">0xd</span></span><br><span class="line">    <span class="number">0x1000010c3</span> &lt;+<span class="number">19</span>&gt;: xorl   %ecx, %ecx <span class="regexp">// 清空ecx  0 </span></span><br><span class="line"><span class="regexp">    0x1000010c5 &lt;+21&gt;: movl   %ecx, %edx  //</span>把 <span class="number">0</span> 放到edx</span><br><span class="line">    <span class="number">0x1000010c7</span> &lt;+<span class="number">23</span>&gt;: popq   %rbp</span><br><span class="line">    <span class="number">0x1000010c8</span> &lt;+<span class="number">24</span>&gt;: retq   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="number">0x100000f94</span> &lt;+<span class="number">4</span>&gt;:   pushq  %r13</span><br><span class="line">    <span class="number">0x100000f96</span> &lt;+<span class="number">6</span>&gt;:   subq   $<span class="number">0x78</span>, %rsp</span><br><span class="line">    <span class="number">0x100000f9a</span> &lt;+<span class="number">10</span>&gt;:  movl   %edi, -<span class="number">0x24</span>(%rbp)</span><br><span class="line">    <span class="number">0x100000f9d</span> &lt;+<span class="number">13</span>&gt;:  movq   %rsi, -<span class="number">0x30</span>(%rbp)</span><br><span class="line">    <span class="number">0x100000fa1</span> &lt;+<span class="number">17</span>&gt;:  callq  <span class="number">0x1000010b0</span>              ; test.getFn<span class="function"><span class="params">()</span> -&gt;</span> <span class="function"><span class="params">(Swift.Int)</span> -&gt;</span> Swift.Int at main.swift:<span class="number">2</span> // fn函数调用完毕 </span><br><span class="line">-&gt;  <span class="number">0x100000fa6</span> &lt;+<span class="number">22</span>&gt;:  movq   <span class="number">0x517b</span>(%rip), %rcx        ; (<span class="literal">void</span> *)<span class="number">0x00007fff8591da50</span>: type metadata <span class="keyword">for</span> Any</span><br><span class="line">    <span class="number">0x100000fad</span> &lt;+<span class="number">29</span>&gt;:  addq   $<span class="number">0x8</span>, %rcx</span><br><span class="line">    <span class="number">0x100000fb4</span> &lt;+<span class="number">36</span>&gt;:  movq   %rax, <span class="number">0x6245</span><span class="function"><span class="params">(%rip)</span>        ; <span class="title">test</span>.<span class="title">fn1</span> : <span class="params">(Swift.Int)</span> -&gt;</span> Swift.Int 把函数地址放到fn前八位地址里</span><br><span class="line">    <span class="number">0x100000fbb</span> &lt;+<span class="number">43</span>&gt;:  movq   %rdx, <span class="number">0x6246</span><span class="function"><span class="params">(%rip)</span>        ; <span class="title">test</span>.<span class="title">fn1</span> : <span class="params">(Swift.Int)</span> -&gt;</span> Swift.Int + <span class="number">8</span> //把零放到fn变量后八位地址里</span><br><span class="line">    <span class="number">0x100000fc2</span> &lt;+<span class="number">50</span>&gt;:  movl   $<span class="number">0x1</span>, %edi</span><br><span class="line">    <span class="number">0x100000fc7</span> &lt;+<span class="number">55</span>&gt;:  movq   %rcx, %rsi</span><br><span class="line">    <span class="number">0x100000fca</span> &lt;+<span class="number">58</span>&gt;:  callq  <span class="number">0x10000544c</span>              ; symbol stub for: Swift._allocateUninitializedArray&lt;A&gt;<span class="function"><span class="params">(Builtin.Word)</span> -&gt;</span> (Swift.Array&lt;A&gt;, Builtin.RawPointer)</span><br></pre></td></tr></table></figure><p>fn1内存变量结构如下：<br>fn1  =&gt;  0x100007218: 0x1000010D0<br> 0x100007220:0<br>当调用<code>var fn1 = getFn()</code> 系统会给fn1分配16个字节的内存大小，前8个字节用来存放函数地址，后8个字节用来存放 变量num</p><p>接下来我们看闭包的情况</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typealias <span class="function"><span class="title">Fn</span> = <span class="params">(Int)</span> -&gt;</span> Int</span><br><span class="line">func getFn<span class="function"><span class="params">()</span> -&gt;</span>Fn &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    func plus<span class="function"><span class="params">(_ i:Int)</span> -&gt;</span> Int&#123;</span><br><span class="line">        num += i</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plus</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn1 = getFn()</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1</span>)) <span class="regexp">//1</span></span><br></pre></td></tr></table></figure><p>底层汇编</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">test`getFn():</span></span><br><span class="line">    <span class="number">0x100000f20</span> <span class="string">&lt;+0&gt;:</span>  <span class="string">pushq</span>  <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100000f21</span> <span class="string">&lt;+1&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsp,</span> <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100000f24</span> <span class="string">&lt;+4&gt;:</span>  <span class="string">subq</span>   <span class="string">$0x20,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x100000f28</span> <span class="string">&lt;+8&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x5229</span><span class="string">(%rip),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000f2f</span> <span class="string">&lt;+15&gt;:</span> <span class="string">movl</span>   <span class="string">$0x18,</span> <span class="string">%esi</span> <span class="string">//堆空间大小，需要24</span> <span class="string">但是alloc具体分配多少有操作系统决定</span> <span class="string">ios</span> <span class="number">16</span><span class="string">的倍数</span> <span class="string">这里是32</span> </span><br><span class="line">    <span class="number">0x100000f34</span> <span class="string">&lt;+20&gt;:</span> <span class="string">movl</span>   <span class="string">$0x7,</span> <span class="string">%edx</span>  <span class="string">//</span> <span class="number">1</span><span class="string">赋值</span></span><br><span class="line">    <span class="number">0x100000f39</span> <span class="string">&lt;+25&gt;:</span> <span class="string">callq</span>  <span class="number">0x10000544c</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_allocObject</span> <span class="string">//调用alloc</span> <span class="string">分配堆空间</span> <span class="string">用来放</span> <span class="string">num</span></span><br><span class="line">    <span class="number">0x100000f3e</span> <span class="string">&lt;+30&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rcx</span> <span class="string">//</span> <span class="string">rax</span> <span class="string">存放的是申请的堆空间的地址值</span></span><br><span class="line">    <span class="number">0x100000f41</span> <span class="string">&lt;+33&gt;:</span> <span class="string">addq</span>   <span class="string">$0x10,</span> <span class="string">%rcx</span></span><br><span class="line">    <span class="number">0x100000f45</span> <span class="string">&lt;+37&gt;:</span> <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="string">%rdx</span></span><br><span class="line">    <span class="number">0x100000f48</span> <span class="string">&lt;+40&gt;:</span> <span class="string">movq</span>   <span class="string">$0x0,</span> <span class="number">0x10</span><span class="string">(%rax)</span> <span class="string">//把零存放到堆空间</span> <span class="number">16</span><span class="string">位后的地址</span> <span class="string">其实申请的这块堆空间</span> <span class="string">跟对象的结构类似</span> <span class="number">24</span> <span class="string">前8</span> <span class="string">类型信息</span> <span class="string">中8</span> <span class="string">引用计数相关</span> <span class="string">后8</span> <span class="string">存放num</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x100000f50</span> <span class="string">&lt;+48&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000f53</span> <span class="string">&lt;+51&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x8</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000f57</span> <span class="string">&lt;+55&gt;:</span> <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="number">-0x10</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000f5b</span> <span class="string">&lt;+59&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000054b8</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_retain</span></span><br><span class="line">    <span class="number">0x100000f60</span> <span class="string">&lt;+64&gt;:</span> <span class="string">movq</span>   <span class="number">-0x8</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000f64</span> <span class="string">&lt;+68&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x18</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000f68</span> <span class="string">&lt;+72&gt;:</span> <span class="string">callq</span>  <span class="number">0x1000054b2</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_release</span></span><br><span class="line">    <span class="number">0x100000f6d</span> <span class="string">&lt;+77&gt;:</span> <span class="string">movq</span>   <span class="number">-0x10</span><span class="string">(%rbp),</span> <span class="string">%rax</span></span><br><span class="line">    <span class="number">0x100000f71</span> <span class="string">&lt;+81&gt;:</span> <span class="string">leaq</span>   <span class="number">0x178</span><span class="string">(%rip),</span> <span class="string">%rax</span>         <span class="string">;</span> <span class="string">partial</span> <span class="string">apply</span> <span class="string">forwarder</span> <span class="string">for</span> <span class="string">plus</span> <span class="comment">#1 (Swift.Int) -&gt; Swift.Int in test.getFn() -&gt; (Swift.Int) -&gt; Swift.Int at &lt;compiler-generated&gt; //函数地址给了rax</span></span><br><span class="line">    <span class="number">0x100000f78</span> <span class="string">&lt;+88&gt;:</span> <span class="string">movq</span>   <span class="number">-0x8</span><span class="string">(%rbp),</span> <span class="string">%rdx</span> <span class="string">//堆空间地址值给了rdx</span></span><br><span class="line">    <span class="number">0x100000f7c</span> <span class="string">&lt;+92&gt;:</span> <span class="string">addq</span>   <span class="string">$0x20,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x100000f80</span> <span class="string">&lt;+96&gt;:</span> <span class="string">popq</span>   <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100000f81</span> <span class="string">&lt;+97&gt;:</span> <span class="string">retq</span>   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">0x100000e11</span> <span class="string">&lt;+17&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100000f20</span>              <span class="string">;</span> <span class="string">test.getFn()</span> <span class="string">-&gt;</span> <span class="string">(Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">Swift.Int</span> <span class="string">at</span> <span class="string">main.swift:2</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x100000e16</span> <span class="string">&lt;+22&gt;:</span>  <span class="string">movq</span>   <span class="number">0x530b</span><span class="string">(%rip),</span> <span class="string">%rcx</span>        <span class="string">;</span> <span class="string">(void</span> <span class="string">*)0x00007fff8591da50:</span> <span class="string">type</span> <span class="string">metadata</span> <span class="string">for</span> <span class="string">Any</span></span><br><span class="line">    <span class="number">0x100000e1d</span> <span class="string">&lt;+29&gt;:</span>  <span class="string">addq</span>   <span class="string">$0x8,</span> <span class="string">%rcx</span></span><br><span class="line">    <span class="number">0x100000e24</span> <span class="string">&lt;+36&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">0x63e5</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="attr">test.fn1 :</span> <span class="string">(Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">Swift.Int</span> <span class="string">//函数地址放fn前八位</span></span><br><span class="line">    <span class="number">0x100000e2b</span> <span class="string">&lt;+43&gt;:</span>  <span class="string">movq</span>   <span class="string">%rdx,</span> <span class="number">0x63e6</span><span class="string">(%rip)</span>        <span class="string">;</span> <span class="attr">test.fn1 :</span> <span class="string">(Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">Swift.Int</span> <span class="string">+</span> <span class="number">8</span><span class="string">//</span> <span class="string">堆空间地址放fn后八位</span></span><br><span class="line">    <span class="number">0x100000e32</span> <span class="string">&lt;+50&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x1,</span> <span class="string">%edi</span></span><br><span class="line">    <span class="number">0x100000e37</span> <span class="string">&lt;+55&gt;:</span>  <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="string">%rsi</span></span><br><span class="line">    <span class="number">0x100000e3a</span> <span class="string">&lt;+58&gt;:</span>  <span class="string">callq</span>  <span class="number">0x10000541c</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">Swift._allocateUninitializedArray&lt;A&gt;(Builtin.Word)</span> <span class="string">-&gt;</span> <span class="string">(Swift.Array&lt;A&gt;,</span> <span class="string">Builtin.RawPointer)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">//fn1如何获取num1</span> <span class="string">并操作它的</span> <span class="string">其实plus有两个参数plus(_</span> <span class="string">i:Int</span> <span class="string">,num分配的堆地址值)</span></span><br><span class="line">  <span class="number">0x100000cde</span> <span class="string">&lt;+78&gt;:</span>  <span class="string">movq</span>   <span class="number">0x6533</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="attr">test.fn1 :</span> <span class="string">(Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">Swift.Int</span></span><br><span class="line">    <span class="number">0x100000ce5</span> <span class="string">&lt;+85&gt;:</span>  <span class="string">movq</span>   <span class="number">0x6534</span><span class="string">(%rip),</span> <span class="string">%rcx</span>        <span class="string">;</span> <span class="attr">test.fn1 :</span> <span class="string">(Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">Swift.Int</span> <span class="string">+</span> <span class="number">8</span></span><br><span class="line">    <span class="number">0x100000cec</span> <span class="string">&lt;+92&gt;:</span>  <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000cef</span> <span class="string">&lt;+95&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x58</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000cf3</span> <span class="string">&lt;+99&gt;:</span>  <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="number">-0x60</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000cf7</span> <span class="string">&lt;+103&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005498</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_retain</span></span><br><span class="line">    <span class="number">0x100000cfc</span> <span class="string">&lt;+108&gt;:</span> <span class="string">leaq</span>   <span class="number">-0x20</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000d00</span> <span class="string">&lt;+112&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x68</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000d04</span> <span class="string">&lt;+116&gt;:</span> <span class="string">callq</span>  <span class="number">0x10000545c</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_endAccess</span></span><br><span class="line">    <span class="number">0x100000d09</span> <span class="string">&lt;+121&gt;:</span> <span class="string">movl</span>   <span class="string">$0x1,</span> <span class="string">%edi</span></span><br><span class="line">    <span class="number">0x100000d0e</span> <span class="string">&lt;+126&gt;:</span> <span class="string">movq</span>   <span class="number">-0x60</span><span class="string">(%rbp),</span> <span class="string">%r13</span>   <span class="string">//取fn1后8个字节，堆空间地址值</span></span><br><span class="line">    <span class="number">0x100000d12</span> <span class="string">&lt;+130&gt;:</span> <span class="string">movq</span>   <span class="number">-0x58</span><span class="string">(%rbp),</span> <span class="string">%rax</span>   <span class="string">//取fn1前8个字节</span> <span class="string">，函数地址值</span></span><br><span class="line">    <span class="number">0x100000d16</span> <span class="string">&lt;+134&gt;:</span> <span class="string">callq</span>  <span class="string">*%rax</span>   <span class="string">//调用函数</span></span><br><span class="line">    <span class="number">0x100000d18</span> <span class="string">&lt;+136&gt;:</span> <span class="string">movq</span>   <span class="number">-0x60</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000d1c</span> <span class="string">&lt;+140&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x70</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000d20</span> <span class="string">&lt;+144&gt;:</span> <span class="string">callq</span>  <span class="number">0x100005492</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_release</span></span><br><span class="line">    <span class="number">0x100000d25</span> <span class="string">&lt;+149&gt;:</span> <span class="string">movq</span>   <span class="number">0x53fc</span><span class="string">(%rip),</span> <span class="string">%rax</span>        <span class="string">;</span> <span class="string">(void</span> <span class="string">*)</span></span><br></pre></td></tr></table></figure><p>解析如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      rax <span class="number">0</span>x0000<span class="number">000100001150</span> 函数地址 </span><br><span class="line">      rdx <span class="number">0</span>x0000<span class="number">000100655180</span> 堆空间地址</span><br><span class="line"></span><br><span class="line">fn1 =&gt; <span class="number">0x100007210</span>:<span class="number">0</span>x0000<span class="number">000100001150</span>  函数地址</span><br><span class="line">       <span class="number">0x100007218</span>:<span class="number">0</span>x0000<span class="number">000100655180</span> 堆空间地址   </span><br><span class="line">                                                =&gt;   <span class="number">0x100655180</span>: <span class="number">0</span>x0000<span class="number">000100006180</span> //对象类型信息 <span class="number">0</span>x00000<span class="number">00000000002</span> //引用计数</span><br><span class="line">                                                     <span class="number">0x100655190</span>: <span class="number">0</span>x00000<span class="number">00000000000</span> //num</span><br></pre></td></tr></table></figure><p>当调用<code>var fn1 = getFn()</code>时系统也会为fn1分配16个字节大小的内存，前8个字节指向函数地址，后八个字节指向堆内存地址，这个堆内存结构与类相似，有24个字节，前八个字节是对象类型信息，中8个字节是引用计数相关的数据，后8个字节存放的是num</p><h5 id="闭包捕获变量的时机"><a href="#闭包捕获变量的时机" class="headerlink" title="闭包捕获变量的时机"></a>闭包捕获变量的时机</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Fn</span> = (<span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFn</span><span class="params">()</span></span> -&gt;<span class="type">Fn</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">plus</span><span class="params">(<span class="number">_</span> i:Int)</span></span> -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">        num += i</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">    num = <span class="number">14</span></span><br><span class="line">    <span class="keyword">return</span> plus</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn1 = getFn()</span><br><span class="line">fn1(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>.<span class="built_in">stride</span>(ofValue: fn1)) <span class="comment">//16</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">test`getFn():</span></span><br><span class="line">    <span class="number">0x100000e80</span> <span class="string">&lt;+0&gt;:</span>   <span class="string">pushq</span>  <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100000e81</span> <span class="string">&lt;+1&gt;:</span>   <span class="string">movq</span>   <span class="string">%rsp,</span> <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100000e84</span> <span class="string">&lt;+4&gt;:</span>   <span class="string">subq</span>   <span class="string">$0x20,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x100000e88</span> <span class="string">&lt;+8&gt;:</span>   <span class="string">leaq</span>   <span class="number">0x52f1</span><span class="string">(%rip),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000e8f</span> <span class="string">&lt;+15&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x18,</span> <span class="string">%esi</span></span><br><span class="line">    <span class="number">0x100000e94</span> <span class="string">&lt;+20&gt;:</span>  <span class="string">movl</span>   <span class="string">$0x7,</span> <span class="string">%edx</span></span><br><span class="line">    <span class="number">0x100000e99</span> <span class="string">&lt;+25&gt;:</span>  <span class="string">callq</span>  <span class="number">0x10000542c</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_allocObject</span></span><br><span class="line">    <span class="number">0x100000e9e</span> <span class="string">&lt;+30&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rcx</span></span><br><span class="line">    <span class="number">0x100000ea1</span> <span class="string">&lt;+33&gt;:</span>  <span class="string">addq</span>   <span class="string">$0x10,</span> <span class="string">%rcx</span></span><br><span class="line">    <span class="number">0x100000ea5</span> <span class="string">&lt;+37&gt;:</span>  <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="string">%rdx</span></span><br><span class="line">    <span class="number">0x100000ea8</span> <span class="string">&lt;+40&gt;:</span>  <span class="string">movq</span>   <span class="string">$0x0,</span> <span class="number">0x10</span><span class="string">(%rax)</span>  <span class="string">//</span> <span class="string">先把0</span> <span class="string">给num</span></span><br><span class="line">    <span class="number">0x100000eb0</span> <span class="string">&lt;+48&gt;:</span>  <span class="string">movq</span>   <span class="string">$0xe,</span> <span class="number">0x10</span><span class="string">(%rax)</span>  <span class="string">//</span> <span class="string">然后又把14给num</span></span><br><span class="line"><span class="string">-&gt;</span>  <span class="number">0x100000eb8</span> <span class="string">&lt;+56&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000ebb</span> <span class="string">&lt;+59&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x8</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000ebf</span> <span class="string">&lt;+63&gt;:</span>  <span class="string">movq</span>   <span class="string">%rcx,</span> <span class="number">-0x10</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000ec3</span> <span class="string">&lt;+67&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100005498</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_retain</span></span><br><span class="line">    <span class="number">0x100000ec8</span> <span class="string">&lt;+72&gt;:</span>  <span class="string">movq</span>   <span class="number">-0x8</span><span class="string">(%rbp),</span> <span class="string">%rdi</span></span><br><span class="line">    <span class="number">0x100000ecc</span> <span class="string">&lt;+76&gt;:</span>  <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x18</span><span class="string">(%rbp)</span></span><br><span class="line">    <span class="number">0x100000ed0</span> <span class="string">&lt;+80&gt;:</span>  <span class="string">callq</span>  <span class="number">0x100005492</span>              <span class="string">;</span> <span class="attr">symbol stub for:</span> <span class="string">swift_release</span></span><br><span class="line">    <span class="number">0x100000ed5</span> <span class="string">&lt;+85&gt;:</span>  <span class="string">movq</span>   <span class="number">-0x10</span><span class="string">(%rbp),</span> <span class="string">%rax</span></span><br><span class="line">    <span class="number">0x100000ed9</span> <span class="string">&lt;+89&gt;:</span>  <span class="string">leaq</span>   <span class="number">0x270</span><span class="string">(%rip),</span> <span class="string">%rax</span>         <span class="string">;</span> <span class="string">partial</span> <span class="string">apply</span> <span class="string">forwarder</span> <span class="string">for</span> <span class="string">plus</span> <span class="comment">#1 (Swift.Int) -&gt; Swift.Int in test.getFn() -&gt; (Swift.Int) -&gt; Swift.Int at &lt;compiler-generated&gt;</span></span><br><span class="line">    <span class="number">0x100000ee0</span> <span class="string">&lt;+96&gt;:</span>  <span class="string">movq</span>   <span class="number">-0x8</span><span class="string">(%rbp),</span> <span class="string">%rdx</span></span><br><span class="line">    <span class="number">0x100000ee4</span> <span class="string">&lt;+100&gt;:</span> <span class="string">addq</span>   <span class="string">$0x20,</span> <span class="string">%rsp</span></span><br><span class="line">    <span class="number">0x100000ee8</span> <span class="string">&lt;+104&gt;:</span> <span class="string">popq</span>   <span class="string">%rbp</span></span><br><span class="line">    <span class="number">0x100000ee9</span> <span class="string">&lt;+105&gt;:</span> <span class="string">retq</span></span><br></pre></td></tr></table></figure><p>在调用函数里面返回函数表达式时开始捕获内部引用到的变量</p><h5 id="闭包内部有多个变量时变量是如何捕获的"><a href="#闭包内部有多个变量时变量是如何捕获的" class="headerlink" title="闭包内部有多个变量时变量是如何捕获的"></a>闭包内部有多个变量时变量是如何捕获的</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">typealias Fn = (Int) -&gt; (Int, Int)</span><br><span class="line">func getFns() -&gt; (Fn, Fn) &#123;</span><br><span class="line"><span class="selector-tag">var</span> num1 = <span class="number">0</span></span><br><span class="line"><span class="selector-tag">var</span> num2 = <span class="number">0</span></span><br><span class="line">    func plus(_ <span class="selector-tag">i</span>: Int) -&gt; (Int, Int) &#123;</span><br><span class="line">            num1 += i</span><br><span class="line">            num2 += <span class="selector-tag">i</span> &lt;&lt; <span class="number">1</span></span><br><span class="line">            return (num1, num2)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    func minus(_ <span class="selector-tag">i</span>: Int) -&gt; (Int, Int) &#123;</span><br><span class="line">       num1 -= i</span><br><span class="line">       num2 -= <span class="selector-tag">i</span> &lt;&lt; <span class="number">1</span></span><br><span class="line">        return (num1, num2)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return (plus, minus)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let (<span class="selector-tag">p</span>, m) = getFns()</span><br><span class="line"><span class="function"><span class="title">p</span><span class="params">(<span class="number">5</span>)</span></span> <span class="comment">// (5, 10)</span></span><br><span class="line"><span class="function"><span class="title">m</span><span class="params">(<span class="number">4</span>)</span></span> <span class="comment">// (1, 2)</span></span><br><span class="line"><span class="function"><span class="title">p</span><span class="params">(<span class="number">3</span>)</span></span> <span class="comment">// (4, 8)</span></span><br><span class="line"><span class="function"><span class="title">m</span><span class="params">(<span class="number">2</span>)</span></span> <span class="comment">// (2, 4)</span></span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">test`getFns():</span><br><span class="line">    <span class="number">0x100001790</span> &lt;+<span class="number">0</span>&gt;:   pushq  <span class="symbol">%rbp</span></span><br><span class="line">    <span class="number">0x100001791</span> &lt;+<span class="number">1</span>&gt;:   movq   <span class="symbol">%rsp</span>, <span class="symbol">%rbp</span></span><br><span class="line">    <span class="number">0x100001794</span> &lt;+<span class="number">4</span>&gt;:   subq   $<span class="number">0x70</span>, <span class="symbol">%rsp</span></span><br><span class="line">    <span class="number">0x100001798</span> &lt;+<span class="number">8</span>&gt;:   leaq   <span class="number">0x69b1</span>(<span class="symbol">%rip</span>), <span class="symbol">%rax</span></span><br><span class="line">    <span class="number">0x10000179f</span> &lt;+<span class="number">15</span>&gt;:  movl   $<span class="number">0x18</span>, <span class="symbol">%ecx</span></span><br><span class="line">    <span class="number">0x1000017a4</span> &lt;+<span class="number">20</span>&gt;:  movl   $<span class="number">0x7</span>, <span class="symbol">%edx</span></span><br><span class="line">    <span class="number">0x1000017a9</span> &lt;+<span class="number">25</span>&gt;:  movq   <span class="symbol">%rax</span>, <span class="symbol">%rdi</span></span><br><span class="line">    <span class="number">0x1000017ac</span> &lt;+<span class="number">28</span>&gt;:  movq   <span class="symbol">%rcx</span>, <span class="symbol">%rsi</span></span><br><span class="line">    <span class="number">0x1000017af</span> &lt;+<span class="number">31</span>&gt;:  movq   <span class="symbol">%rdx</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">8</span>(<span class="symbol">%rbp</span>)</span><br><span class="line">    <span class="number">0x1000017b3</span> &lt;+<span class="number">35</span>&gt;:  movq   <span class="symbol">%rax</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">10</span>(<span class="symbol">%rbp</span>)</span><br><span class="line">    <span class="number">0x1000017b7</span> &lt;+<span class="number">39</span>&gt;:  movq   <span class="symbol">%rcx</span>, <span class="number">-0</span><span class="keyword">x</span><span class="number">18</span>(<span class="symbol">%rbp</span>)</span><br><span class="line">    <span class="number">0x1000017bb</span> &lt;+<span class="number">43</span>&gt;:  callq  <span class="number">0x100007406</span>               <span class="comment">; symbol stub for: swift_allocObject  //生成堆内存空间</span></span><br><span class="line"><span class="comment">    0x1000017c0 &lt;+48&gt;:  movq   %rax, %rcx</span></span><br><span class="line"><span class="comment">    0x1000017c3 &lt;+51&gt;:  addq   $0x10, %rcx</span></span><br><span class="line"><span class="comment">    0x1000017c7 &lt;+55&gt;:  movq   %rcx, %rdx</span></span><br><span class="line"><span class="comment">    0x1000017ca &lt;+58&gt;:  movq   $0x0, 0x10(%rax)</span></span><br><span class="line"><span class="comment">    0x1000017d2 &lt;+66&gt;:  movq   -0x10(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x1000017d6 &lt;+70&gt;:  movq   -0x18(%rbp), %rsi</span></span><br><span class="line"><span class="comment">    0x1000017da &lt;+74&gt;:  movq   -0x8(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x1000017de &lt;+78&gt;:  movq   %rax, -0x20(%rbp)</span></span><br><span class="line"><span class="comment">    0x1000017e2 &lt;+82&gt;:  movq   %rcx, -0x28(%rbp)</span></span><br><span class="line"><span class="comment">    0x1000017e6 &lt;+86&gt;:  callq  0x100007406               ; symbol stub for: swift_allocObject  //生成堆内存空间</span></span><br><span class="line"><span class="comment">    0x1000017eb &lt;+91&gt;:  movq   %rax, %rcx</span></span><br><span class="line"><span class="comment">    0x1000017ee &lt;+94&gt;:  addq   $0x10, %rcx</span></span><br><span class="line"><span class="comment">    0x1000017f2 &lt;+98&gt;:  movq   %rcx, %rdx</span></span><br><span class="line"><span class="comment">    0x1000017f5 &lt;+101&gt;: movq   $0x0, 0x10(%rax)</span></span><br><span class="line"><span class="comment">    0x1000017fd &lt;+109&gt;: movq   -0x20(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x100001801 &lt;+113&gt;: movq   %rax, -0x30(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001805 &lt;+117&gt;: movq   %rcx, -0x38(%rbp)</span></span><br><span class="line"><span class="comment">-&gt;  0x100001809 &lt;+121&gt;: callq  0x100007472               ; symbol stub for: swift_retain</span></span><br><span class="line"><span class="comment">    0x10000180e &lt;+126&gt;: movq   -0x30(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x100001812 &lt;+130&gt;: movq   %rax, -0x40(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001816 &lt;+134&gt;: callq  0x100007472               ; symbol stub for: swift_retain</span></span><br><span class="line"><span class="comment">    0x10000181b &lt;+139&gt;: leaq   0x6956(%rip), %rdi</span></span><br><span class="line"><span class="comment">    0x100001822 &lt;+146&gt;: movl   $0x20, %ecx</span></span><br><span class="line"><span class="comment">    0x100001827 &lt;+151&gt;: movq   %rcx, %rsi</span></span><br><span class="line"><span class="comment">    0x10000182a &lt;+154&gt;: movq   -0x8(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x10000182e &lt;+158&gt;: movq   %rax, -0x48(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001832 &lt;+162&gt;: movq   %rcx, -0x50(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001836 &lt;+166&gt;: callq  0x100007406               ; symbol stub for: swift_allocObject</span></span><br><span class="line"><span class="comment">    0x10000183b &lt;+171&gt;: movq   -0x20(%rbp), %rcx</span></span><br><span class="line"><span class="comment">    0x10000183f &lt;+175&gt;: movq   %rcx, 0x10(%rax)</span></span><br><span class="line"><span class="comment">    0x100001843 &lt;+179&gt;: movq   -0x30(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x100001847 &lt;+183&gt;: movq   %rdx, 0x18(%rax)</span></span><br><span class="line"><span class="comment">    0x10000184b &lt;+187&gt;: movq   %rcx, %rdi</span></span><br><span class="line"><span class="comment">    0x10000184e &lt;+190&gt;: movq   %rax, -0x58(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001852 &lt;+194&gt;: callq  0x100007472               ; symbol stub for: swift_retain</span></span><br><span class="line"><span class="comment">    0x100001857 &lt;+199&gt;: movq   -0x30(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x10000185b &lt;+203&gt;: movq   %rax, -0x60(%rbp)</span></span><br><span class="line"><span class="comment">    0x10000185f &lt;+207&gt;: callq  0x100007472               ; symbol stub for: swift_retain</span></span><br><span class="line"><span class="comment">    0x100001864 &lt;+212&gt;: leaq   0x6935(%rip), %rdi</span></span><br><span class="line"><span class="comment">    0x10000186b &lt;+219&gt;: movq   -0x50(%rbp), %rsi</span></span><br><span class="line"><span class="comment">    0x10000186f &lt;+223&gt;: movq   -0x8(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x100001873 &lt;+227&gt;: movq   %rax, -0x68(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001877 &lt;+231&gt;: callq  0x100007406               ; symbol stub for: swift_allocObject</span></span><br><span class="line"><span class="comment">    0x10000187c &lt;+236&gt;: movq   -0x20(%rbp), %rcx</span></span><br><span class="line"><span class="comment">    0x100001880 &lt;+240&gt;: movq   %rcx, 0x10(%rax)</span></span><br><span class="line"><span class="comment">    0x100001884 &lt;+244&gt;: movq   -0x30(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x100001888 &lt;+248&gt;: movq   %rdx, 0x18(%rax)</span></span><br><span class="line"><span class="comment">    0x10000188c &lt;+252&gt;: movq   %rdx, %rdi</span></span><br><span class="line"><span class="comment">    0x10000188f &lt;+255&gt;: movq   %rax, -0x70(%rbp)</span></span><br><span class="line"><span class="comment">    0x100001893 &lt;+259&gt;: callq  0x10000746c               ; symbol stub for: swift_release</span></span><br><span class="line"><span class="comment">    0x100001898 &lt;+264&gt;: movq   -0x20(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x10000189c &lt;+268&gt;: callq  0x10000746c               ; symbol stub for: swift_release</span></span><br><span class="line"><span class="comment">    0x1000018a1 &lt;+273&gt;: movq   -0x28(%rbp), %rax</span></span><br><span class="line"><span class="comment">    0x1000018a5 &lt;+277&gt;: movq   -0x38(%rbp), %rcx</span></span><br><span class="line"><span class="comment">    0x1000018a9 &lt;+281&gt;: leaq   0xc00(%rip), %rax         ; partial apply forwarder for plus #1 (Swift.Int) -&gt; (Swift.Int, Swift.Int) in test.getFns() -&gt; ((Swift.Int) -&gt; (Swift.Int, Swift.Int), (Swift.Int) -&gt; (Swift.Int, Swift.Int)) at &lt;compiler-generated&gt;</span></span><br><span class="line"><span class="comment">    0x1000018b0 &lt;+288&gt;: leaq   0x17e9(%rip), %rcx        ; partial apply forwarder for minus #1 (Swift.Int) -&gt; (Swift.Int, Swift.Int) in test.getFns() -&gt; ((Swift.Int) -&gt; (Swift.Int, Swift.Int), (Swift.Int) -&gt; (Swift.Int, Swift.Int)) at &lt;compiler-generated&gt;</span></span><br><span class="line"><span class="comment">    0x1000018b7 &lt;+295&gt;: movq   -0x58(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x1000018bb &lt;+299&gt;: movq   -0x70(%rbp), %r8</span></span><br><span class="line"><span class="comment">    0x1000018bf &lt;+303&gt;: addq   $0x70, %rsp</span></span><br><span class="line"><span class="comment">    0x1000018c3 &lt;+307&gt;: popq   %rbp</span></span><br><span class="line"><span class="comment">    0x1000018c4 &lt;+308&gt;: retq</span></span><br></pre></td></tr></table></figure><p>类比类来说 num1 num2就是类的成员变量 plus, minus就是类的两个方法<code>let (p, m) = getFns()</code> 就相当于生成了一个对象，同一个对象里面的成员变量肯定是共享的</p><h5 id="如果是全局变量会捕获么？"><a href="#如果是全局变量会捕获么？" class="headerlink" title="如果是全局变量会捕获么？"></a>如果是全局变量会捕获么？</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Fn</span> = (<span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFn</span><span class="params">()</span></span> -&gt;<span class="type">Fn</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">plus</span><span class="params">(<span class="number">_</span> i:Int)</span></span> -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">        num += i</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">    num = <span class="number">14</span></span><br><span class="line">    <span class="keyword">return</span> plus</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn1 = getFn()</span><br><span class="line">fn1(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>.<span class="built_in">stride</span>(ofValue: fn1)) <span class="comment">//16</span></span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">test`getFn():</span><br><span class="line">    <span class="number">0x100000f00</span> &lt;+<span class="number">0</span>&gt;:  pushq  <span class="symbol">%rbp</span></span><br><span class="line">    <span class="number">0x100000f01</span> &lt;+<span class="number">1</span>&gt;:  movq   <span class="symbol">%rsp</span>, <span class="symbol">%rbp</span></span><br><span class="line">    <span class="number">0x100000f04</span> &lt;+<span class="number">4</span>&gt;:  subq   $<span class="number">0x30</span>, <span class="symbol">%rsp</span></span><br><span class="line">    <span class="number">0x100000f08</span> &lt;+<span class="number">8</span>&gt;:  leaq   <span class="number">0x6309</span>(<span class="symbol">%rip</span>), <span class="symbol">%rdi</span>        <span class="comment">; test.num : Swift.Int</span></span><br><span class="line"><span class="comment">    0x100000f0f &lt;+15&gt;: xorl   %eax, %eax</span></span><br><span class="line"><span class="comment">    0x100000f11 &lt;+17&gt;: movl   %eax, %ecx</span></span><br><span class="line"><span class="comment">    0x100000f13 &lt;+19&gt;: leaq   -0x18(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x100000f17 &lt;+23&gt;: movl   $0x21, %esi</span></span><br><span class="line"><span class="comment">    0x100000f1c &lt;+28&gt;: movq   %rsi, -0x20(%rbp)</span></span><br><span class="line"><span class="comment">    0x100000f20 &lt;+32&gt;: movq   %rdx, %rsi</span></span><br><span class="line"><span class="comment">    0x100000f23 &lt;+35&gt;: movq   -0x20(%rbp), %r8</span></span><br><span class="line"><span class="comment">    0x100000f27 &lt;+39&gt;: movq   %rdx, -0x28(%rbp)</span></span><br><span class="line"><span class="comment">    0x100000f2b &lt;+43&gt;: movq   %r8, %rdx</span></span><br><span class="line"><span class="comment">    0x100000f2e &lt;+46&gt;: movq   %rcx, -0x30(%rbp)</span></span><br><span class="line"><span class="comment">    0x100000f32 &lt;+50&gt;: callq  0x100005448               ; symbol stub for: swift_beginAccess</span></span><br><span class="line"><span class="comment">    0x100000f37 &lt;+55&gt;: movq   $0xe, 0x62d6(%rip)        ; demangling cache variable for type metadata for Swift.Array&lt;Swift.UInt8&gt; + 4</span></span><br><span class="line"><span class="comment">    0x100000f42 &lt;+66&gt;: movq   -0x28(%rbp), %rdi</span></span><br><span class="line"><span class="comment">    0x100000f46 &lt;+70&gt;: callq  0x10000546c               ; symbol stub for: swift_endAccess</span></span><br><span class="line"><span class="comment">-&gt;  0x100000f4b &lt;+75&gt;: leaq   0xe(%rip), %rax           ; plus #1 (Swift.Int) -&gt; Swift.Int in test.getFn() -&gt; (Swift.Int) -&gt; Swift.Int at main.swift:5</span></span><br><span class="line"><span class="comment">    0x100000f52 &lt;+82&gt;: movq   -0x30(%rbp), %rdx</span></span><br><span class="line"><span class="comment">    0x100000f56 &lt;+86&gt;: addq   $0x30, %rsp</span></span><br><span class="line"><span class="comment">    0x100000f5a &lt;+90&gt;: popq   %rbp</span></span><br><span class="line"><span class="comment">    0x100000f5b &lt;+91&gt;: retq</span></span><br></pre></td></tr></table></figure><p>通过汇编可以看出，函数内部并没有看到有堆内存的申请所以不会捕获。为什么不捕获？首先为什么要捕获？捕获的目的要保持num生命周期保证它不会被回收，栈上会释放 ，所以要拷贝到堆， 全局变量在全局区程序运行期间会一直存在不会释放 ,所以不需要捕获<br>可以直接访问</p><h5 id="六-自动闭包"><a href="#六-自动闭包" class="headerlink" title="六 自动闭包"></a>六 自动闭包</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFirstPositive</span><span class="params">(<span class="number">_</span> v1:Int, <span class="number">_</span> v2:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; <span class="number">0</span> ? v1 : v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num1 = getFirstPositive(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">let</span> num2 = getFirstPositive(-<span class="number">2</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(num1) <span class="comment">//10</span></span><br><span class="line"><span class="built_in">print</span>(num2) <span class="comment">//20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getClusureFirstPositive</span><span class="params">(<span class="number">_</span> v1:Int, <span class="number">_</span> v2:<span class="params">()</span></span></span>-&gt;<span class="type">Int</span>) -&gt; <span class="type">Int?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; <span class="number">0</span> ? v1 : v2()</span><br><span class="line">&#125;</span><br><span class="line">getClusureFirstPositive(-<span class="number">4</span>) &#123; <span class="number">20</span> &#125; <span class="comment">//v2会延迟加载，但是这样调用看起来很别扭</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAutoClusureFirstPositive</span><span class="params">(<span class="number">_</span> v1:Int, <span class="number">_</span> v2:@autoclosure <span class="params">()</span></span></span>-&gt;<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; <span class="number">0</span> ? v1 : v2()</span><br><span class="line">&#125;</span><br><span class="line">getAutoClusureFirstPositive(-<span class="number">4</span>,<span class="number">20</span>) <span class="comment">//编译器会自动把20包装成闭包&#123;20&#125;</span></span><br></pre></td></tr></table></figure><p>为了避免与期望冲突，使用了@autoclosure的地方最好明确注释清楚:这个值会被推迟执行<br>@autoclosure 会自动将 20 封装成闭包 { 20 }<br>@autoclosure 只支持 () -&gt; T 格式的参数 n@autoclosure 并非只支持最后1个参数<br>空合并运算符 ?? 使用了 @autoclosure 技术<br>有@autoclosure、无@autoclosure，构成了函数重载</p><h5 id="七-逃逸闭包和非逃逸闭包"><a href="#七-逃逸闭包和非逃逸闭包" class="headerlink" title="七 逃逸闭包和非逃逸闭包"></a>七 逃逸闭包和非逃逸闭包</h5><p><strong>非逃逸闭包</strong>: 闭包调用发生在函数结束前,闭包调用在函数作用域内</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func test(_ fn: ()-&gt;()) &#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">test </span>&#123;</span><br><span class="line">    print("hello world")</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包fn调用在test函数作用域内.</p><p><strong>逃逸闭包</strong>: 闭包有可能在函数结束后调用,闭包调用逃离了函数的作用域,需要通过@escaping声明</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gFn:<span class="function"><span class="params">(()-&gt;())</span>?</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">test</span><span class="params">(_ fn:@escaping ()-&gt;())</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">gFn</span> = <span class="title">fn</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">test</span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"hello world"</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"------"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">gFn</span>!<span class="params">()</span></span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  Dispatch</span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Fn</span> = ()-&gt;()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn:<span class="type">Fn</span></span><br><span class="line">    <span class="keyword">init</span>(fn:@escaping <span class="type">Fn</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.fn = fn</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">            <span class="keyword">self</span>.fn()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包fn有可能在test函数外调用,这就是逃逸闭包,参数声明要加上@escaping</p><p>其实逃逸闭包,非逃逸闭包,一般都是当作参数传递给函数</p><p>逃逸闭包还有一些注意事项⚠️</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Fn</span> = () -&gt; ()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">other1</span><span class="params">(<span class="number">_</span> fn: Fn)</span></span> &#123; fn() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">other2</span><span class="params">(<span class="number">_</span> fn: @escaping Fn)</span></span> &#123; fn() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(value: <span class="keyword">inout</span> Int)</span></span> -&gt; <span class="type">Fn</span> &#123;</span><br><span class="line">other1 &#123; value += <span class="number">1</span> &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// ❌error: 逃逸闭包不能捕获inout参数</span></span><br><span class="line">other2 &#123; value += <span class="number">1</span> &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plus</span><span class="params">()</span></span> &#123; value += <span class="number">1</span> &#125;</span><br><span class="line"><span class="comment">// ❌error: 逃逸闭包不能捕获inout参数 return plus</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逃逸闭包不可以捕获inout参数,因为逃逸闭包在哪调用是不确定的,如果一个逃逸闭包捕获了一个局部变量,那么当这个局部变量销毁了,你再调用闭包就会出错,非逃逸闭包捕获inout参数不会报错,那是因为非逃逸闭包调用的作用域是确定的.</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-闭包的定义&quot;&gt;&lt;a href=&quot;#一-闭包的定义&quot; class=&quot;headerlink&quot; title=&quot;一 闭包的定义&quot;&gt;&lt;/a&gt;一 闭包的定义&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Fn&lt;/span&gt; = (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getFn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt;&lt;span class=&quot;type&quot;&gt;Fn&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; i:Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num += i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; plus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 返回的plus和num形成了闭包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn1 = getFn()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(fn1(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个函数和它所捕获的变量或常量环境组合起来，称为 &lt;strong&gt;闭包&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般指定义在函数内部的函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般它捕获的是外层函数的局部变量或常量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 结构体和类</title>
    <link href="http://example.com/2019/09/01/swift-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%B1%BB/"/>
    <id>http://example.com/2019/09/01/swift-结构体和类/</id>
    <published>2019-09-01T02:40:23.000Z</published>
    <updated>2020-12-05T11:57:12.873Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-结构体"><a href="#一-结构体" class="headerlink" title="一 结构体"></a>一 结构体</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  struct Date &#123;</span><br><span class="line">    var year: Int</span><br><span class="line">    var month: Int</span><br><span class="line">    var day: Int</span><br><span class="line">&#125;</span><br><span class="line">var date = Date(year: <span class="number">2019</span>, month: <span class="number">6</span>, day: <span class="number">20</span>)</span><br><span class="line">print(date.year,date.month,date.day)<span class="regexp">//</span><span class="number">2019</span> <span class="number">6</span> <span class="number">20</span></span><br><span class="line"><span class="regexp">//</span>Program ended with <span class="keyword">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>swift标准库中，绝大多数的公开类型都是结构体，枚举只占很小一部分，像，Bool, Int, Double, String, Array, Dictionary等常见类型都是结构体</p><h5 id="二-结构体的初始化器"><a href="#二-结构体的初始化器" class="headerlink" title="二 结构体的初始化器"></a>二 结构体的初始化器</h5><p><img src="../assets/blogImg/jiegouti01.png" alt></p><p>❌错误改正图片中最后一个date4 要改成date5，提示是对的</p><p>所有的结构体都有一个编译器自动生成的初始化器（initializer）</p><p>编译器会根据情况，可能会为结构体生成多个初始化器，<strong>它要保证所有成员都有初始值</strong></p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">struct <span class="built_in">Date</span> &#123;</span><br><span class="line">    var <span class="built_in">year</span>: <span class="built_in">Int</span>?</span><br><span class="line">    var <span class="built_in">month</span>: <span class="built_in">Int</span>?</span><br><span class="line">    var <span class="built_in">day</span>: <span class="built_in">Int</span>?</span><br><span class="line">&#125;</span><br><span class="line">var <span class="built_in">date</span> =  <span class="built_in">Date</span>(<span class="built_in">year</span>: <span class="number">2019</span>, <span class="built_in">month</span>: <span class="number">6</span>, <span class="built_in">day</span>: <span class="number">20</span>)</span><br><span class="line">var date2 = <span class="built_in">Date</span>(<span class="built_in">year</span>: <span class="number">2019</span>)</span><br><span class="line">var date3 = <span class="built_in">Date</span>(<span class="built_in">month</span>: <span class="number">6</span>)</span><br><span class="line">var date4 = <span class="built_in">Date</span>(<span class="built_in">day</span>: <span class="number">20</span>)</span><br><span class="line">var date5 = <span class="built_in">Date</span>()</span><br></pre></td></tr></table></figure><p>这个会报错么，能编译通过么？？</p><p>不会报错，可选项都有个默认值nil，编译器会生成多个初始化方法，同时它也能保证所有变量都有初始值</p><a id="more"></a><h5 id="三-自定义初始化器"><a href="#三-自定义初始化器" class="headerlink" title="三 自定义初始化器"></a>三 自定义初始化器</h5><p><img src="../assets/blogImg/jiegouti02.png" alt></p><ul><li><p>自定义结构体初始化器时，要保证每个结构体成员都会被初始化</p></li><li><p>一旦自定义了结构体初始化器，编译器就不会再帮它自动生成其他初始化器了</p></li></ul><h5 id="四-结构体初始化器的本质"><a href="#四-结构体初始化器的本质" class="headerlink" title="四 结构体初始化器的本质"></a>四 结构体初始化器的本质</h5><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func testStruct()&#123;</span><br><span class="line">    struct Point&#123;</span><br><span class="line">        var y:Int</span><br><span class="line">        var <span class="keyword">x</span>:Int</span><br><span class="line">        init() &#123;</span><br><span class="line">            self.y = <span class="number">0</span></span><br><span class="line">            self.<span class="keyword">x</span> = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    let p<span class="number">1</span> = Point()</span><br><span class="line">     /*-&gt;  <span class="number">0x1000007ef</span> &lt;+<span class="number">15</span>&gt;: callq  <span class="number">0x100000810</span>               <span class="comment">; init() -&gt; Point #1 in test.testStrunct() -&gt; () in Point #1 in</span></span><br><span class="line"><span class="comment">        调用了init()初始化器</span></span><br><span class="line"><span class="comment">        test`init() in Point #1 in testStrunct():</span></span><br><span class="line"><span class="comment">    -&gt;  0x100000810 &lt;+0&gt;:  pushq  %rbp</span></span><br><span class="line"><span class="comment">        0x100000811 &lt;+1&gt;:  movq   %rsp, %rbp</span></span><br><span class="line"><span class="comment">        0x100000814 &lt;+4&gt;:  xorps  %xmm0, %xmm0</span></span><br><span class="line"><span class="comment">        0x100000817 &lt;+7&gt;:  movaps %xmm0, -0x10(%rbp)</span></span><br><span class="line"><span class="comment">        0x10000081b &lt;+11&gt;: movq   $0x0, -0x10(%rbp) //赋值 y</span></span><br><span class="line"><span class="comment">        0x100000823 &lt;+19&gt;: movq   $0x0, -0x8(%rbp)  // 赋值 x</span></span><br><span class="line"><span class="comment">        0x10000082b &lt;+27&gt;: xorl   %eax, %eax</span></span><br><span class="line"><span class="comment">        0x10000082d &lt;+29&gt;: movl   %eax, %ecx</span></span><br><span class="line"><span class="comment">        0x10000082f &lt;+31&gt;: movq   %rcx, %rax</span></span><br><span class="line"><span class="comment">        0x100000832 &lt;+34&gt;: movq   %rcx, %rdx</span></span><br><span class="line"><span class="comment">        0x100000835 &lt;+37&gt;: popq   %rbp</span></span><br><span class="line"><span class="comment">        0x100000836 &lt;+38&gt;: retq</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">testStruct()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func teststruct2() &#123;</span></span><br><span class="line"><span class="comment">    struct Point2&#123;</span></span><br><span class="line"><span class="comment">        var y:Int = 0</span></span><br><span class="line"><span class="comment">        var x:Int = 0</span></span><br><span class="line"><span class="comment">       </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    let p2 = Point2()</span></span><br><span class="line"><span class="comment">    /*</span></span><br><span class="line"><span class="comment">     -&gt;  0x10000088f &lt;+15&gt;: callq  0x1000008b0               ; init() -&gt; Point #1 in test.testStruct() -&gt; () in Point #1 in</span></span><br><span class="line"><span class="comment">     test`init() in Point #1 in testStruct():</span></span><br><span class="line"><span class="comment">     -&gt;  0x1000008b0 &lt;+0&gt;:  pushq  %rbp</span></span><br><span class="line"><span class="comment">         0x1000008b1 &lt;+1&gt;:  movq   %rsp, %rbp</span></span><br><span class="line"><span class="comment">         0x1000008b4 &lt;+4&gt;:  xorps  %xmm0, %xmm0</span></span><br><span class="line"><span class="comment">         0x1000008b7 &lt;+7&gt;:  movaps %xmm0, -0x10(%rbp)</span></span><br><span class="line"><span class="comment">         0x1000008bb &lt;+11&gt;: movq   $0x0, -0x10(%rbp) //赋值 y</span></span><br><span class="line"><span class="comment">         0x1000008c3 &lt;+19&gt;: movq   $0x0, -0x8(%rbp)  //赋值 x</span></span><br><span class="line"><span class="comment">         0x1000008cb &lt;+27&gt;: xorl   %eax, %eax</span></span><br><span class="line"><span class="comment">         0x1000008cd &lt;+29&gt;: movl   %eax, %ecx</span></span><br><span class="line"><span class="comment">         0x1000008cf &lt;+31&gt;: movq   %rcx, %rax</span></span><br><span class="line"><span class="comment">         0x1000008d2 &lt;+34&gt;: movq   %rcx, %rdx</span></span><br><span class="line"><span class="comment">         0x1000008d5 &lt;+37&gt;: popq   %rbp</span></span><br><span class="line"><span class="comment">         0x1000008d6 &lt;+38&gt;: retq</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">teststruct2()</span></span><br></pre></td></tr></table></figure><p>通过汇编代码可以看出上面两个结构体定义不同但是底层的汇编代码确是一样的，所以我们手动定义初始化器，跟编译器自动生成初始化器其实本质是一样的</p><h5 id="五-结构体的内存结构"><a href="#五-结构体的内存结构" class="headerlink" title="五 结构体的内存结构"></a>五 结构体的内存结构</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct Point &#123;</span><br><span class="line">    <span class="selector-tag">var</span> x:Int = <span class="number">10</span>  <span class="comment">//8</span></span><br><span class="line">    <span class="selector-tag">var</span> y:Int = <span class="number">20</span> <span class="comment">//8</span></span><br><span class="line">    <span class="selector-tag">var</span> origin:Bool = false  <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> point = Point()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.size(ofValue: point)</span></span>)     <span class="comment">//17</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.stride(ofValue: point)</span></span>)   <span class="comment">//24</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.alignment(ofValue: point)</span></span>)<span class="comment">//8</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"-----------------------------"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Point&gt;.size)</span></span>     <span class="comment">//17</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Point&gt;.stride)</span></span>   <span class="comment">//24</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Point&gt;.alignment)</span></span><span class="comment">//8</span></span><br></pre></td></tr></table></figure><p>结构体内存结构跟枚举差不多，成员变量的值也是存储在，结构体变量内存里面的</p><p><img src="../assets/blogImg/jiegouti03.png" alt></p><hr><h5 id="六-类"><a href="#六-类" class="headerlink" title="六 类"></a>六 类</h5><p><img src="../assets/blogImg/lei01.png" alt></p><p>1 类的定义和结构体类似，但是编译器并没有为类自动生成<strong>可以传入成员值的初始化器</strong></p><p>2 如果类的所有成员都在定义的时候指定了初始值，编译器会为类生成无参的初始化器，成员的初始化是在这个初始化器中完成的</p><h5 id="七-自定义类的初始化器"><a href="#七-自定义类的初始化器" class="headerlink" title="七 自定义类的初始化器"></a>七 自定义类的初始化器</h5><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y:<span class="keyword">Int</span></span><br><span class="line">    <span class="keyword">var</span> x:<span class="keyword">Int</span></span><br><span class="line">    init(y:<span class="keyword">Int</span>,x:<span class="keyword">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.y = y</span><br><span class="line">        <span class="keyword">self</span>.x = x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = Point(y: <span class="number">20</span>, x: <span class="number">30</span>)</span><br><span class="line"><span class="keyword">print</span>(p1.x, p1.y) <span class="comment">//30 20</span></span><br></pre></td></tr></table></figure><p>自定义类的初始化器要保证所有的成员都要进行初始化，而且编译器不会再自动生成无参的初始化器了</p><h5 id="八-类对象变量的内存结构"><a href="#八-类对象变量的内存结构" class="headerlink" title="八 类对象变量的内存结构"></a>八 类对象变量的内存结构</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> height = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = Size()</span><br></pre></td></tr></table></figure><p><img src="../assets/blogImg/lei02.png" alt></p><p>前8位是指向类型信息，接着8位存放引用计数相关内容，后面是成员变量内容，类的实例对象是分配在堆空间的</p><h5 id="九-对象对空间申请过程"><a href="#九-对象对空间申请过程" class="headerlink" title="九 对象对空间申请过程"></a>九 对象对空间申请过程</h5><p>在Swift中，创建类的实例对象，要向堆空间申请内存，大概流程如下：</p><p>1 Class.__allocating_init()</p><p>2 libswiftCore.dylib:_swift_allocObject_</p><p>3 libswiftCore.dylib:swift_slowAlloc</p><p>4 libsystem_malloc.dylib:malloc</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Foundation</span><br><span class="line">class Point&#123;</span><br><span class="line">    <span class="comment">//16</span></span><br><span class="line">    <span class="selector-tag">var</span> x = <span class="number">11</span> <span class="comment">//8</span></span><br><span class="line">    <span class="selector-tag">var</span> test = true <span class="comment">//1</span></span><br><span class="line">    <span class="selector-tag">var</span> y = <span class="number">22</span><span class="comment">//8</span></span><br><span class="line">&#125;<span class="comment">//33 实际利用到的内存空间  内存对齐需要 40是需要占用的内存空间</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">p</span> = Point()  <span class="comment">//调用malloc 分配大小是16的倍数， 所以实际分配48大小</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(class_getInstanceSize(type(of:p)</span></span>)) <span class="comment">//40</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(class_getInstanceSize(Point.self)</span></span>)  <span class="comment">//40</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.size(ofRef: p)</span></span>)  <span class="comment">//48 实际分配的控件大小</span></span><br></pre></td></tr></table></figure><p>在 Mac , iOS中的malloc函数分配的内存大小总是16的倍数</p><p>通过class_getInstatnceSize可以得知：类的对象至少需要占用多少内存</p><h5 id="十-结构体与类的本质区别"><a href="#十-结构体与类的本质区别" class="headerlink" title="十 结构体与类的本质区别"></a>十 结构体与类的本质区别</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> height = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">3</span></span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> size = <span class="type">Size</span>()</span><br><span class="line">    <span class="keyword">var</span> point = <span class="type">Point</span>()</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p><img src="../assets/blogImg/jiegouti04.png" alt></p><p>1 结构体是值类型（枚举也是值类型）</p><p>2 类是引用类型（指针类型）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="function">func <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Size</span> &#123;</span></span><br><span class="line">        var <span class="built_in">width</span> = <span class="number">1</span></span><br><span class="line">        var <span class="built_in">height</span> = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct Point &#123;</span><br><span class="line">        var x = <span class="number">3</span></span><br><span class="line">        var y = <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">    var <span class="built_in">size</span> = Size()</span><br><span class="line">    <span class="built_in">print</span>(MemoryLayout&lt;Size&gt;.stride) <span class="comment">//8  size指针变量就是占8个字节</span></span><br><span class="line">    <span class="built_in">print</span>(MemoryLayout&lt;Point&gt;.stride)<span class="comment">//16</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(Mems.<span class="built_in">size</span>(ofRef: <span class="built_in">size</span>))  <span class="comment">//32  size所指向堆空间的大小</span></span><br><span class="line">    <span class="built_in">print</span>(malloc_size(Mems.ptr(ofRef: <span class="built_in">size</span>))) <span class="comment">//32 同上</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(Mems.ptr(ofVal: &amp;<span class="built_in">size</span>))  <span class="comment">//0x00007ffeefbff520  size的地址</span></span><br><span class="line">    <span class="built_in">print</span>(Mems.memStr(ofVal: &amp;<span class="built_in">size</span>)) <span class="comment">//0x0000000100453d40  size变量的内存</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"-----------------------"</span>)</span><br><span class="line">    <span class="built_in">print</span>(Mems.ptr(ofRef: <span class="built_in">size</span>))  <span class="comment">//0x0000000100453d40 size所指向内存的地址 ,就是size变量的内存</span></span><br><span class="line">    <span class="built_in">print</span>(Mems.memStr(ofRef: <span class="built_in">size</span>)) <span class="comment">// 0x00000001000082a8 0x0000000200000002 0x0000000000000001 0x0000000000000002   size所指向内存地址里的内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"_________________________"</span>)</span><br><span class="line">    var <span class="built_in">point</span> = Point()</span><br><span class="line">    <span class="built_in">print</span>(Mems.ptr(ofVal: &amp;<span class="built_in">point</span>))   <span class="comment">//0x00007ffeefbff500  内存地址</span></span><br><span class="line">    <span class="built_in">print</span>(Mems.memStr(ofVal: &amp;<span class="built_in">point</span>)) <span class="comment">//0x0000000000000003 0x0000000000000004  内存地址存的内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//point 变量跟 size变量是挨在一起的，地址很相近，它们都是分配在栈空间的，但是它里面的内容不一样的，size变量内存是一个堆地址</span></span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><h5 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">func</span> <span class="string">testValues()</span>  <span class="string">&#123;</span></span><br><span class="line">    <span class="string">struct</span> <span class="string">Point</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">var x:</span> <span class="string">Int</span></span><br><span class="line">        <span class="attr">var y:</span> <span class="string">Int</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">var</span> <span class="string">p1</span> <span class="string">=</span> <span class="string">Point(x:10,</span> <span class="string">y:20)</span></span><br><span class="line">    <span class="string">var</span> <span class="string">p2</span> <span class="string">=</span> <span class="string">p1</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">//</span>    <span class="string">test`testValues():</span>  <span class="string">汇编解析</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e00</span> <span class="string">&lt;+0&gt;:</span>  <span class="string">pushq</span>  <span class="string">%rbp</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e01</span> <span class="string">&lt;+1&gt;:</span>  <span class="string">movq</span>   <span class="string">%rsp,</span> <span class="string">%rbp</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e04</span> <span class="string">&lt;+4&gt;:</span>  <span class="string">subq</span>   <span class="string">$0x20,</span> <span class="string">%rsp</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e08</span> <span class="string">&lt;+8&gt;:</span>  <span class="string">xorps</span>  <span class="string">%xmm0,</span> <span class="string">%xmm0</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e0b</span> <span class="string">&lt;+11&gt;:</span> <span class="string">movaps</span> <span class="string">%xmm0,</span> <span class="number">-0x10</span><span class="string">(%rbp)</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e0f</span> <span class="string">&lt;+15&gt;:</span> <span class="string">movaps</span> <span class="string">%xmm0,</span> <span class="number">-0x20</span><span class="string">(%rbp)</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e13</span> <span class="string">&lt;+19&gt;:</span> <span class="string">movl</span>   <span class="string">$0xa,</span> <span class="string">%edi</span>   <span class="string">//10</span> <span class="string">给eid</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e18</span> <span class="string">&lt;+24&gt;:</span> <span class="string">movl</span>   <span class="string">$0x14,</span> <span class="string">%esi</span>  <span class="string">//20</span> <span class="string">给esi</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e1d</span> <span class="string">&lt;+29&gt;:</span> <span class="string">callq</span>  <span class="number">0x100000e40</span>               <span class="string">;</span> <span class="string">init(x:</span> <span class="string">Swift.Int,</span> <span class="attr">y:</span> <span class="string">Swift.Int)</span> <span class="string">-&gt;</span> <span class="string">Point</span> <span class="comment">#1 in test.testValues() -&gt; () in Point #1 in test.testValues() -&gt; () at main.swift:3  //传入两个参数还是调用初始化方法</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e22</span> <span class="string">&lt;+34&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x10</span><span class="string">(%rbp)</span>  <span class="string">//</span> <span class="number">0x100000e26</span> <span class="number">-0x10</span> <span class="number">10</span> <span class="string">赋值给p1</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e26</span> <span class="string">&lt;+38&gt;:</span> <span class="string">movq</span>   <span class="string">%rdx,</span> <span class="number">-0x8</span><span class="string">(%rbp)</span>  <span class="string">//</span> <span class="number">0x100000e2a</span> <span class="bullet">-</span> <span class="number">0x8</span> <span class="number">20</span> <span class="string">赋值给p1</span></span><br><span class="line"><span class="string">//</span>    <span class="string">-&gt;</span>  <span class="number">0x100000e2a</span> <span class="string">&lt;+42&gt;:</span> <span class="string">movq</span>   <span class="string">%rax,</span> <span class="number">-0x20</span><span class="string">(%rbp)</span> <span class="number">0x100000e2e</span> <span class="number">-0x20</span>  <span class="string">//</span> <span class="number">10</span> <span class="string">赋值给p2</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e2e</span> <span class="string">&lt;+46&gt;:</span> <span class="string">movq</span>   <span class="string">%rdx,</span> <span class="number">-0x18</span><span class="string">(%rbp)</span>   <span class="string">//</span> <span class="number">0x100000e32</span> <span class="bullet">-</span> <span class="number">0x18</span> <span class="number">20</span> <span class="string">赋值给p2</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e32</span> <span class="string">&lt;+50&gt;:</span> <span class="string">addq</span>   <span class="string">$0x20,</span> <span class="string">%rsp</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e36</span> <span class="string">&lt;+54&gt;:</span> <span class="string">popq</span>   <span class="string">%rbp</span></span><br><span class="line"><span class="string">//</span>        <span class="number">0x100000e37</span> <span class="string">&lt;+55&gt;:</span> <span class="string">retq</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">testValues()</span></span><br></pre></td></tr></table></figure><p><img src="../assets/blogImg/zhileixing01.png" alt></p><p>值类型赋值给var, let或者给函数传参，是直接将所有内容拷贝一份，属于深拷贝</p><p>汇编小技巧： 内存地址格式为：0xcdf(%rip),一般是全局变量， 内存地址格式为：-0xcdf(%rbp),一般是局部变量，内存地址格式为：-0x10(%rax),一般是堆空间</p><h5 id="值类型的赋值操作"><a href="#值类型的赋值操作" class="headerlink" title="值类型的赋值操作"></a>值类型的赋值操作</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="selector-tag">var</span> s1 = <span class="string">"Rose"</span></span><br><span class="line"><span class="selector-tag">var</span> s2 = s1  </span><br><span class="line">s2.append(<span class="string">"_Mars"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s1)</span></span><span class="comment">//Rose</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s2)</span></span><span class="comment">//Rose_Mars</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组赋值</span></span><br><span class="line"><span class="selector-tag">var</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="selector-tag">var</span> a2 = a1</span><br><span class="line">a2.append(<span class="number">4</span>)</span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a1)</span></span> <span class="comment">//[2, 2, 3]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a2)</span></span>  <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字典赋值</span></span><br><span class="line"><span class="selector-tag">var</span> d1 = [<span class="string">"max"</span>:<span class="number">10</span>, <span class="string">"min"</span>:<span class="number">4</span>]</span><br><span class="line"><span class="selector-tag">var</span> d2 = d1</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.ptr(ofVal: &amp;d1)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.ptr(ofVal: &amp;d2)</span></span>)</span><br><span class="line">d1[<span class="string">"other"</span>] = <span class="number">7</span></span><br><span class="line">d2[<span class="string">"max"</span>] = <span class="number">30</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(d1)</span></span> <span class="comment">//["max": 10, "min": 4, "other": 7]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(d2)</span></span> <span class="comment">//["max": 30, "min": 4]</span></span><br></pre></td></tr></table></figure><p>在Swift标准库中，为了提升性能，String、Array、Dictionary、Set采取了Copy On Write的技术</p><p>比如仅当有“写”操作时，才会真正执行拷贝操作</p><p>对于标准库值类型的赋值操作，Swift 能确保最佳性能，所有没必要为了保证最佳性能来避免赋值</p><p>建议:不需要修改的，尽量定义成let</p><h5 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span>&#123;</span></span><br><span class="line">    var <span class="built_in">width</span>:Int</span><br><span class="line">    var <span class="built_in">height</span>:Int</span><br><span class="line">    init(<span class="built_in">width</span>:Int,<span class="built_in">height</span>:Int) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">        self.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func test()&#123;</span><br><span class="line">    var s1 = Size(<span class="built_in">width</span>: <span class="number">10</span>, <span class="built_in">height</span>: <span class="number">20</span>)</span><br><span class="line">    var s2 = s1</span><br><span class="line">  </span><br><span class="line">    s2.<span class="built_in">width</span> = <span class="number">11</span></span><br><span class="line">    s2.<span class="built_in">height</span> = <span class="number">22</span></span><br><span class="line">    <span class="built_in">print</span>(Mems.memStr(ofVal: &amp;s1)) <span class="comment">//0x000000010041cc80</span></span><br><span class="line">    <span class="built_in">print</span>(Mems.memStr(ofVal: &amp;s2)) <span class="comment">//0x000000010041cc80</span></span><br><span class="line">    <span class="built_in">print</span>(s1.<span class="built_in">width</span>,s1.<span class="built_in">height</span>) <span class="comment">//11 22  //取出对象内存后面16位赋值</span></span><br><span class="line">    <span class="built_in">print</span>(s2.<span class="built_in">width</span>,s2.<span class="built_in">height</span>) <span class="comment">//11 22</span></span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>引用类型赋值给let,var或者给函数参数，是将内存地址拷贝一份，类似于文件链接，快捷方式，指向的是同一个文件，属于浅拷贝</p><h5 id="引用类型的赋值操作"><a href="#引用类型的赋值操作" class="headerlink" title="引用类型的赋值操作"></a>引用类型的赋值操作</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span>&#123;</span></span><br><span class="line">    var <span class="built_in">width</span>:Int</span><br><span class="line">    var <span class="built_in">height</span>:Int</span><br><span class="line">    init(<span class="built_in">width</span>:Int,<span class="built_in">height</span>:Int) &#123;</span><br><span class="line">        self.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">        self.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var s1 = Size(<span class="built_in">width</span>: <span class="number">10</span>, <span class="built_in">height</span>: <span class="number">20</span>)  <span class="comment">//分配一块内存空间</span></span><br><span class="line"><span class="built_in">print</span>(Mems.memStr(ofVal: &amp;s1)) <span class="comment">//0x000000010042c220</span></span><br><span class="line">s1 = Size(<span class="built_in">width</span>: <span class="number">30</span>, <span class="built_in">height</span>: <span class="number">40</span>)   <span class="comment">// 有分配一块内存空间，s1的指针指向这块内存空间</span></span><br><span class="line"><span class="built_in">print</span>(Mems.memStr(ofVal: &amp;s1)) <span class="comment">//0x000000010042e0b0</span></span><br><span class="line"><span class="built_in">print</span>(s1.<span class="built_in">width</span>,s1.<span class="built_in">height</span>) <span class="comment">//30 40  //取出对象内存后面16位赋值</span></span><br></pre></td></tr></table></figure><h5 id="十一-值类型-引用类型的let"><a href="#十一-值类型-引用类型的let" class="headerlink" title="十一 值类型 引用类型的let"></a>十一 值类型 引用类型的let</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Size &#123;</span><br><span class="line">    <span class="selector-tag">var</span> <span class="attribute">width</span>:Int</span><br><span class="line">    <span class="selector-tag">var</span> <span class="attribute">height</span>:Int</span><br><span class="line">    init(<span class="attribute">width</span>:Int, height:Int) &#123;</span><br><span class="line">        self<span class="selector-class">.width</span> = <span class="attribute">width</span></span><br><span class="line">        self<span class="selector-class">.height</span> = <span class="attribute">height</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let <span class="selector-tag">p</span> = Point(x: <span class="number">10</span>, y: <span class="number">20</span>)</span><br><span class="line"><span class="selector-tag">p</span> = Point(x: <span class="number">30</span>, y: <span class="number">40</span>)  <span class="comment">//p 内存不可以修改❌</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.x</span> = <span class="number">20</span> <span class="comment">//p 内存不可以修改❌</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.y</span> = <span class="number">50</span>  <span class="comment">//p 内存不可以修改❌</span></span><br><span class="line"></span><br><span class="line">let s = Size(<span class="attribute">width</span>: <span class="number">20</span>, height: <span class="number">30</span>)</span><br><span class="line">s<span class="selector-class">.height</span> = <span class="number">10</span>  <span class="comment">//s指向对象里面的值可以改✅</span></span><br><span class="line">s<span class="selector-class">.width</span> = <span class="number">20</span>  <span class="comment">//✅</span></span><br><span class="line">s = Size(<span class="attribute">width</span>: <span class="number">30</span>, height: <span class="number">50</span>) //s指针指向内容不能改❌</span><br></pre></td></tr></table></figure><h5 id="枚举-，结构体，-类里面定义方法"><a href="#枚举-，结构体，-类里面定义方法" class="headerlink" title="枚举 ，结构体， 类里面定义方法"></a>枚举 ，结构体， 类里面定义方法</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> y:<span class="type">Int</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span>  &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"x= \(x),y=\(y)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="type">Point</span>(x: <span class="number">20</span>, y: <span class="number">40</span>)</span><br><span class="line">p.show() <span class="comment">//x= 20,y=40</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> height:<span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(width:<span class="type">Int</span>, height:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.width = width</span><br><span class="line">        <span class="keyword">self</span>.height = height</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span>  &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"width\(width),height=\(height)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> size = <span class="type">Size</span>(width: <span class="number">20</span>, height: <span class="number">30</span>)</span><br><span class="line">size.show() <span class="comment">//width20,height=30</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PockeFace</span>:<span class="title">Character</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> spades=<span class="string">"x"</span>,hearts=<span class="string">"y"</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span>  &#123;</span><br><span class="line">        <span class="built_in">print</span>(rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pp = <span class="type">PockeFace</span>.spades</span><br><span class="line">pp.show() <span class="comment">//x</span></span><br></pre></td></tr></table></figure><p>方法都不占用变量内存，方法的本质就是函数，它都是存放在代码段，那我们怎么知道哪个方法是属于哪个结构体 枚举或者类的呢，其实每个方法都有默人传入了当前对象，就像下面这样</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(_self:Point)</span></span>  &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"x= \(x),y=\(y)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-结构体&quot;&gt;&lt;a href=&quot;#一-结构体&quot; class=&quot;headerlink&quot; title=&quot;一 结构体&quot;&gt;&lt;/a&gt;一 结构体&lt;/h5&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  struct Date &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var year: Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var month: Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var day: Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var date = Date(year: &lt;span class=&quot;number&quot;&gt;2019&lt;/span&gt;, month: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, day: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(date.year,date.month,date.day)&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2019&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;Program ended with &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt; code: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;swift标准库中，绝大多数的公开类型都是结构体，枚举只占很小一部分，像，Bool, Int, Double, String, Array, Dictionary等常见类型都是结构体&lt;/p&gt;
&lt;h5 id=&quot;二-结构体的初始化器&quot;&gt;&lt;a href=&quot;#二-结构体的初始化器&quot; class=&quot;headerlink&quot; title=&quot;二 结构体的初始化器&quot;&gt;&lt;/a&gt;二 结构体的初始化器&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;../assets/blogImg/jiegouti01.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;❌错误改正图片中最后一个date4 要改成date5，提示是对的&lt;/p&gt;
&lt;p&gt;所有的结构体都有一个编译器自动生成的初始化器（initializer）&lt;/p&gt;
&lt;p&gt;编译器会根据情况，可能会为结构体生成多个初始化器，&lt;strong&gt;它要保证所有成员都有初始值&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight vbscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var &lt;span class=&quot;built_in&quot;&gt;year&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var &lt;span class=&quot;built_in&quot;&gt;month&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var &lt;span class=&quot;built_in&quot;&gt;day&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; =  &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;year&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2019&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;month&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;day&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var date2 = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;year&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2019&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var date3 = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;month&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var date4 = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;day&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var date5 = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个会报错么，能编译通过么？？&lt;/p&gt;
&lt;p&gt;不会报错，可选项都有个默认值nil，编译器会生成多个初始化方法，同时它也能保证所有变量都有初始值&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift枚举</title>
    <link href="http://example.com/2019/08/28/swift%E6%9E%9A%E4%B8%BE/"/>
    <id>http://example.com/2019/08/28/swift枚举/</id>
    <published>2019-08-28T02:45:49.000Z</published>
    <updated>2020-12-05T06:41:26.861Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-枚举的基本用法"><a href="#一-枚举的基本用法" class="headerlink" title="一 枚举的基本用法"></a>一 枚举的基本用法</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> north</span><br><span class="line">    <span class="keyword">case</span> south</span><br><span class="line">    <span class="keyword">case</span> east</span><br><span class="line">    <span class="keyword">case</span> west</span><br><span class="line">&#125;</span><br><span class="line">var dir = Direction.west</span><br><span class="line">dir = .north</span><br><span class="line">print(dir)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> spring, summer,autumn, winter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var season = Season.summer</span><br><span class="line">switch season &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="symbol">spring:</span></span><br><span class="line">    print(<span class="string">"spring"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="symbol">summer:</span></span><br><span class="line">    print(<span class="string">"summer"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="symbol">autumn:</span></span><br><span class="line">    print(<span class="string">"autumn"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="symbol">winter:</span></span><br><span class="line">    print(<span class="string">"winter"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于有限固定值的定义成枚举比较合适,比如,季节,请求状态,物流流转状态,订单状态,等等</p><h5 id="二-关联值"><a href="#二-关联值" class="headerlink" title="二 关联值"></a>二 关联值</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Score</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> points(Int)</span><br><span class="line">    <span class="keyword">case</span> grade(Character)</span><br><span class="line">&#125;</span><br><span class="line">var score = Score.points(<span class="number">96</span>)</span><br><span class="line">score = .grade(<span class="string">"A"</span>)</span><br><span class="line">switch score &#123;</span><br><span class="line"><span class="keyword">case</span> let .points(point):</span><br><span class="line">    print(point)</span><br><span class="line"><span class="keyword">case</span> .grade(var grade):</span><br><span class="line">    grade = <span class="string">"B"</span></span><br><span class="line">    print(grade)</span><br><span class="line">&#125;/<span class="regexp">/B</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p>可在.points前面整体定义 它定义什么类型，那三个变量就是什么类型，var 或let,也可以单独定义比如.grade<br>关联值是存储在枚举变量内存里面的</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Password &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">number</span>(<span class="built_in">Int</span>,<span class="built_in">Int</span>,<span class="built_in">Int</span>,<span class="built_in">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> gesture(<span class="built_in">String</span>)</span><br><span class="line">&#125;</span><br><span class="line">var pwd = Password.<span class="built_in">number</span>(<span class="number">5</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>)</span><br><span class="line">pwd = .gesture(<span class="string">"13456"</span>)</span><br><span class="line"><span class="keyword">switch</span> pwd &#123;</span><br><span class="line"><span class="keyword">case</span> let .<span class="built_in">number</span>(n1, n2, n3, n4):</span><br><span class="line">    print(n1,n2,n3,n4)</span><br><span class="line"><span class="keyword">case</span>  .gesture(let gesture):</span><br><span class="line">    print(gesture)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密码有数字密码和手势密码,这两种方式是固定的,对于有限固定值我们定义成枚举,但是每个人定义设定的数字和手势密码都不同,那我们就定义几个关联值,与这个枚举进行关联</p><a id="more"></a><h5 id="三-原始值"><a href="#三-原始值" class="headerlink" title="三 原始值"></a>三 原始值</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">enum PokeSuit:Character &#123;</span><br><span class="line">    case spade = <span class="string">"♠️"</span></span><br><span class="line">    case heart = <span class="string">"♥️"</span></span><br><span class="line">    case diamond = <span class="string">"♦️"</span></span><br><span class="line">    case club = <span class="string">"♣️"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> suite = PokeSuit.heart</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(suite)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(suite.rawValue)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(PokeSuit.club.rawValue)</span></span><span class="comment">//heart</span></span><br><span class="line"><span class="comment">//♥️</span></span><br><span class="line"><span class="comment">//♣️</span></span><br><span class="line"><span class="comment">//Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p>枚举成员可以使用<strong>相同类型</strong>的默认值预先对应,这个默认值叫做原始值,枚举变量通过rawValue拿到原始值,原始值不占用枚举变量内存,它的值可以在rawValue调用时根据枚举值直接返回,比如如下的方式实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PokeSuit</span>:<span class="title">Character</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> spade = <span class="string">"♠️"</span></span><br><span class="line">    <span class="keyword">case</span> heart = <span class="string">"♥️"</span></span><br><span class="line">    <span class="keyword">case</span> diamond = <span class="string">"♦️"</span></span><br><span class="line">    <span class="keyword">case</span> club = <span class="string">"♣️"</span></span><br><span class="line">    <span class="keyword">var</span> rawValue:<span class="type">Character</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">         <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> .spade:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"h"</span></span><br><span class="line">                <span class="keyword">case</span> .heart:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"♥️"</span></span><br><span class="line">                <span class="keyword">case</span> .diamond:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"♦️"</span></span><br><span class="line">                <span class="keyword">case</span> .club:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"♣️"</span></span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> suite = <span class="type">PokeSuit</span>.spade</span><br><span class="line"><span class="built_in">print</span>(suite.rawValue)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">PokeSuit</span>.club.rawValue)</span><br><span class="line"><span class="comment">//output :h</span></span><br><span class="line"><span class="comment">//        ♣️</span></span><br></pre></td></tr></table></figure><h5 id="四-隐式原始值"><a href="#四-隐式原始值" class="headerlink" title="四 隐式原始值"></a>四 隐式原始值</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span>:<span class="title">String</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> north = <span class="string">"north"</span></span><br><span class="line">    <span class="keyword">case</span> south = <span class="string">"south"</span></span><br><span class="line">    <span class="keyword">case</span> east = <span class="string">"east"</span></span><br><span class="line">    <span class="keyword">case</span> west = <span class="string">"west"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction2</span> :<span class="title">String</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> north,south,east,west</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(Direction.north.rawValue)</span><br><span class="line">print(Direction2.north.rawValue)/<span class="regexp">/north</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/north</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p>如果枚举的原始值类型是<strong>Int</strong>,<strong>String</strong>,<strong>double</strong>,<strong>float</strong>Swift会自动分配原始值,String类型的原始值,就是枚举值本身</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum Season: Int &#123;</span><br><span class="line">    case spring, summer, autumn, winter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.spring.rawValue)</span></span> <span class="comment">//0</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.summer.rawValue)</span></span> <span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.autumn.rawValue)</span></span> <span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season.winter.rawValue)</span></span> <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">enum Season2: Int &#123;</span><br><span class="line">    case spring = <span class="number">1</span>, summer, autumn = <span class="number">4</span>, winter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season2.spring.rawValue)</span></span><span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season2.summer.rawValue)</span></span><span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season2.autumn.rawValue)</span></span><span class="comment">//4</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Season2.winter.rawValue)</span></span><span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>Int类型的原始值默认从零开始步长为1往上递增,如果有前一个枚举有定义值,后一个就在前一个基础上加1</p><p><img src="../assets/blogImg/meiju01.png" alt><br>除了上面的类型,其他类型都不会自动分配原始值,比如我们指定类型为Character就会报错. 其实这个时候系统怎么给默认值呢,比如spring,它该拿哪个字符作为默认值呢, 而且它也无法抉择你调用rawvalue,该把那个字符返回给你,如果把spring返回给你,但是它的类型是Character,返回给你字符串,这也不合适,编译器无法抉择,所以要我们自己指定 ,当然这个原因是我瞎猜的😜.</p><h5 id="五-递归枚举"><a href="#五-递归枚举" class="headerlink" title="五 递归枚举"></a>五 递归枚举</h5><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">indirect enum ArithExpr &#123;</span><br><span class="line">    <span class="keyword">case</span><span class="built_in"> number</span>(Int)</span><br><span class="line">    <span class="keyword">case</span><span class="built_in"> sum</span>(ArithExpr, ArithExpr)</span><br><span class="line">    <span class="keyword">case</span> difference(ArithExpr, ArithExpr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> five = ArithExpr<span class="built_in">.number</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> four = ArithExpr<span class="built_in">.number</span>(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> two = ArithExpr<span class="built_in">.number</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span><span class="built_in"> sum</span> = ArithExpr<span class="built_in">.sum</span>(five, four)</span><br><span class="line"><span class="keyword">let</span> difference = ArithExpr.difference<span class="built_in">(sum</span>, two)</span><br><span class="line"></span><br><span class="line">func calculate(<span class="number">_</span> expr: ArithExpr) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">switch</span> expr &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> <span class="built_in">.number</span>(<span class="keyword">value</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> <span class="built_in">.sum</span>(n1, n2):</span><br><span class="line">        <span class="keyword">return</span> calculate(n1) + calculate(n2)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .difference(n1, n2):</span><br><span class="line">        <span class="keyword">return</span> calculate(n1) - calculate(n2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print(calculate(difference))//<span class="number">7</span></span><br><span class="line">//Program ended with exit code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>递归枚举要用<strong>indirect</strong>标识, 自己嵌套自己</p><h5 id="六-MemoryLayout"><a href="#六-MemoryLayout" class="headerlink" title="六 MemoryLayout"></a>六 MemoryLayout</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">enum Password &#123;</span><br><span class="line">   case number(Int, Int, Int, Int)</span><br><span class="line">   case other</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Password&gt;.stride)</span></span> <span class="comment">//40</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Password&gt;.size)</span></span> <span class="comment">//33</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;Password&gt;.alignment)</span></span> <span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> pwd = Password.number(<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line">pwd = .other</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.stride(ofValue: pwd)</span></span>)  <span class="comment">//40</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.size(ofValue: pwd)</span></span>) <span class="comment">//33</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.alignment(ofValue: pwd)</span></span>) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>可以使用MemoryLayout获取数据类型占用的内存大小</p><ul><li>MemoryLayout<object>.stride<br>系统分配占用的空间大小</object></li><li>MemoryLayout<object>.size<br>实际用到的空间大小</object></li><li>MemoryLayout<object>.alignment<br>对齐参数,内存对齐参数,什么是内存对齐参考baidu</object></li></ul><hr><p>🦐</p><h5 id="七-枚举变量的内存布局"><a href="#七-枚举变量的内存布局" class="headerlink" title="七 枚举变量的内存布局"></a>七 枚举变量的内存布局</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum TestEnum &#123;</span><br><span class="line">    case test1, test2, test3</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> t = TestEnum.test1</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(Mems.ptr(ofVal: &amp;t)</span></span>)</span><br><span class="line">t = .test2</span><br><span class="line">t = .test3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.stride(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.size(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.alignment(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"-------"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.stride)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.size)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.alignment)</span></span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/CoderMJLee/Mems" target="_blank" rel="noopener">Mems</a><br>通过打印我们可以看出 分配的内存,实际占用的内存,内存对齐参数都是1,对于普通的枚举通过1个字节来存储,里面存储的是0,1,2,3… 根据case的顺序来排的,一个字节能代表多少个case呢 256个,超过256个case, 枚举就会占用两个字节<br><img src="../assets/blogImg/meiju02.png" alt><br><img src="../assets/blogImg/meiju03.png" alt><br><img src="../assets/blogImg/meiju04.png" alt></p><h5 id="枚举指定原始值时内存布局情况"><a href="#枚举指定原始值时内存布局情况" class="headerlink" title="枚举指定原始值时内存布局情况"></a>枚举指定原始值时内存布局情况</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">enum TestEnum:Int &#123;</span><br><span class="line">    case test1 = <span class="number">1</span>, test = <span class="number">2</span>, test3 = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> t = TestEnum.test1</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.stride(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.size(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.alignment(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"-------------"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.stride)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.size)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.alignment)</span></span></span><br><span class="line"></span><br><span class="line">enum TestEnum2:String &#123;</span><br><span class="line">    case test1 = <span class="string">"hello"</span>, test2 = <span class="string">"world"</span>, test3 = <span class="string">"nihao"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> t2 = TestEnum2.test1</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.stride(ofValue: t2)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.size(ofValue: t2)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.alignment(ofValue: t2)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"-------------"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum2&gt;.stride)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum2&gt;.size)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum2&gt;.alignment)</span></span></span><br><span class="line"><span class="comment">//-------------</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//-------------</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure><p> 通过打印结果我们可以知道不管你枚举指定的原始值类型是什么,也不管你的每个枚举值指定的是什么,还是占用一个字节<br> <img src="../assets/blogImg/meiju05.png" alt><br><img src="../assets/blogImg/meiju06.png" alt><br><img src="../assets/blogImg/meiju07.png" alt></p><h5 id="枚举指定关联值时内存布局情况"><a href="#枚举指定关联值时内存布局情况" class="headerlink" title="枚举指定关联值时内存布局情况"></a>枚举指定关联值时内存布局情况</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">enum TestEnum &#123;</span><br><span class="line">    case test1(Int,Int,Int)</span><br><span class="line">    case test2(Int,Int)</span><br><span class="line">    case test3(Int)</span><br><span class="line">    case test4(Bool)</span><br><span class="line">    case test5</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> t = TestEnum.test1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">t = .test2(<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line">t = .test3(<span class="number">100</span>)</span><br><span class="line">t = .test4(true)</span><br><span class="line">t = .test5</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.stride(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.size(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.alignment(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"----------------------------"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.stride)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.size)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.alignment)</span></span></span><br><span class="line"><span class="comment">//32</span></span><br><span class="line"><span class="comment">//25</span></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="comment">//32</span></span><br><span class="line"><span class="comment">//25</span></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line"><span class="comment">//Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p>当为关联值时内存布局就不一样了,上面我们讲过,枚举的关联值存储在枚举变量的内存中,我们可以看到上面的枚举 系统分配了32 字节大小, 它实际使用了25字节, 内存对齐为8个字节 那为什么回事这样的呢: 那是因为 我们枚举的关联值在最大字节的是Int类型,Int 在32占4字节 64位系统占8个字节, 所以内存对齐为8  需要存储最大占用字节的case 是test1(Int,Int,Int),它占用3*8 = 24  ,其它几个case都没有它占用的内存空间大,所以完全可以共享test1的空间, 我们可以看到枚举实际占用25个字节,最大的case占24,那多的一个字节是存什么的呢? 跟上面的枚举一样,是来存储case标识的,0,1,2,3…. 用来区别你赋值的是哪个case的</p><p><img src="../assets/blogImg/meiju08.png" alt><br><img src="../assets/blogImg/meiju09.png" alt><br><img src="../assets/blogImg/meiju10.png" alt><br><img src="../assets/blogImg/meiju11.png" alt><br><img src="../assets/blogImg/meiju12.png" alt></p><h5 id="1-个case的枚举内存布局"><a href="#1-个case的枚举内存布局" class="headerlink" title="1 个case的枚举内存布局"></a>1 个case的枚举内存布局</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">enum TestEnum &#123;</span><br><span class="line">    case test</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> t = TestEnum.test</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.stride(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.size(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.alignment(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"----------------------------"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.stride)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.size)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.alignment)</span></span><span class="comment">//1</span></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>枚举占用空间为零,以前有个1字节来标识是那个case,现在就一个case ,就没必要标识了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> enum TestEnum &#123;</span><br><span class="line">    case test(Int)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> t = TestEnum.test(<span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.stride(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.size(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout.alignment(ofValue: t)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"----------------------------"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.stride)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.size)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(MemoryLayout&lt;TestEnum&gt;.alignment)</span></span><span class="comment">//8</span></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line"><span class="comment">//8</span></span><br></pre></td></tr></table></figure><p>一个case 不需要标识位,所以 最大case需要多少字节,枚举就实际需要多少空间</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-枚举的基本用法&quot;&gt;&lt;a href=&quot;#一-枚举的基本用法&quot; class=&quot;headerlink&quot; title=&quot;一 枚举的基本用法&quot;&gt;&lt;/a&gt;一 枚举的基本用法&lt;/h5&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Direction&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; north&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; south&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; east&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; west&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var dir = Direction.west&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dir = .north&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Season&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; spring, summer,autumn, winter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var season = Season.summer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch season &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;symbol&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;spring&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;symbol&quot;&gt;summer:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;summer&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;symbol&quot;&gt;autumn:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;autumn&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;symbol&quot;&gt;winter:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;winter&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于有限固定值的定义成枚举比较合适,比如,季节,请求状态,物流流转状态,订单状态,等等&lt;/p&gt;
&lt;h5 id=&quot;二-关联值&quot;&gt;&lt;a href=&quot;#二-关联值&quot; class=&quot;headerlink&quot; title=&quot;二 关联值&quot;&gt;&lt;/a&gt;二 关联值&lt;/h5&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Score&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; points(Int)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; grade(Character)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var score = Score.points(&lt;span class=&quot;number&quot;&gt;96&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;score = .grade(&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch score &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; let .points(point):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .grade(var grade):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grade = &lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(grade)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;/&lt;span class=&quot;regexp&quot;&gt;/B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Program ended with exit code: 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可在.points前面整体定义 它定义什么类型，那三个变量就是什么类型，var 或let,也可以单独定义比如.grade&lt;br&gt;关联值是存储在枚举变量内存里面的&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Password &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; gesture(&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var pwd = Password.&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd = .gesture(&lt;span class=&quot;string&quot;&gt;&quot;13456&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; pwd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; let .&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;(n1, n2, n3, n4):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(n1,n2,n3,n4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;  .gesture(let gesture):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(gesture)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;密码有数字密码和手势密码,这两种方式是固定的,对于有限固定值我们定义成枚举,但是每个人定义设定的数字和手势密码都不同,那我们就定义几个关联值,与这个枚举进行关联&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift 可选项(Optional)</title>
    <link href="http://example.com/2019/08/21/swift-%E5%8F%AF%E9%80%89%E9%A1%B9-Optional/"/>
    <id>http://example.com/2019/08/21/swift-可选项-Optional/</id>
    <published>2019-08-21T11:32:28.000Z</published>
    <updated>2020-12-12T10:38:39.256Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-可选项定义"><a href="#一-可选项定义" class="headerlink" title="一 可选项定义"></a>一 可选项定义</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name:<span class="type">String?</span> = <span class="string">"Jack"</span></span><br><span class="line">name = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age:<span class="type">Int?</span></span><br><span class="line">age = <span class="number">10</span></span><br><span class="line">age = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">15</span>,<span class="number">40</span>,<span class="number">29</span>]</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index:Int)</span></span> -&gt; <span class="type">Int?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= array.<span class="built_in">count</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array[index]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">get</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">get</span>(-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">get</span>(<span class="number">4</span>))<span class="comment">//Optional(15)</span></span><br><span class="line"><span class="comment">//nil</span></span><br><span class="line"><span class="comment">//nil</span></span><br></pre></td></tr></table></figure><p>可选项,一般也叫可选类型,它允许将值设置为nil,在类型名称后面加个问号❓来定义一个可选项, 通过打印我们看到可选项打印出来是Optional(15),那么这个Optional(15)我们该怎么用呢</p><h5 id="二-强制解包"><a href="#二-强制解包" class="headerlink" title="二 强制解包"></a>二 强制解包</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var age:Int? = <span class="number">10</span></span><br><span class="line">var ageInt:Int = age!</span><br><span class="line">ageInt += <span class="number">10</span></span><br><span class="line">print(ageInt)<span class="regexp">//</span><span class="number">20</span></span><br><span class="line"><span class="regexp">//</span>Program ended with <span class="keyword">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果要从可选项中取出被包装的数据,需要使用感叹号❕</p><p><img src="../assets/blogImg/kexuanxiang01.png" alt><br>对值为nil的可选项进行强制解包,将会产生运行时错误</p><h5 id="判断可选项是否包含值"><a href="#判断可选项是否包含值" class="headerlink" title="判断可选项是否包含值"></a>判断可选项是否包含值</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="type">Int</span>(<span class="string">"123"</span>)</span><br><span class="line"><span class="keyword">if</span> number != <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"字符串转换整数成功:\(number)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"字符串转换整数失败"</span>)</span><br><span class="line">&#125;<span class="comment">//字符串转换整数成功:Optional(123)</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="三-可选项绑定"><a href="#三-可选项绑定" class="headerlink" title="三 可选项绑定"></a>三 可选项绑定</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> number = <span class="type">Int</span>(<span class="string">"123"</span>) &#123;</span><br><span class="line">    <span class="comment">// number 是强制解包后的Int值</span></span><br><span class="line">    <span class="comment">// number 作用域仅限于这个大括号,如果不仅限 使用guard</span></span><br><span class="line">    <span class="built_in">print</span>(number)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"转换失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span>:<span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> spring = <span class="number">1</span> ,summer, autum, winter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> season = <span class="type">Season</span>(rawValue: <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> season &#123;</span><br><span class="line">    <span class="keyword">case</span> .spring:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">"spring season"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"the other season"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"no such season"</span>)</span><br><span class="line">&#125;<span class="comment">//123</span></span><br><span class="line"><span class="comment">//no such season</span></span><br></pre></td></tr></table></figure><h5 id="可选项多值链接-通过逗号"><a href="#可选项多值链接-通过逗号" class="headerlink" title="可选项多值链接 通过逗号"></a>可选项多值链接 通过逗号</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">let</span> <span class="built_in">first</span> = Int(<span class="string">"4"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">let</span> <span class="built_in">second</span> = Int(<span class="string">"42"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">first</span> &lt; <span class="built_in">second</span> &amp;&amp; <span class="built_in">second</span> &lt; <span class="number">100</span> &#123;</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">"\(first) &lt; \(second) &lt; 100"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">let</span> <span class="built_in">first</span> = Int(<span class="string">"4"</span>),</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">second</span> = Int(<span class="string">"42"</span>),</span><br><span class="line">    <span class="built_in">first</span> &lt; <span class="built_in">second</span> &amp;&amp; <span class="built_in">second</span> &lt; <span class="number">100</span> &#123;</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"\(first) &lt; \(second) &lt; 100"</span>)</span><br><span class="line">&#125;</span><br><span class="line">//<span class="number">4</span> &lt; <span class="number">42</span> &lt; <span class="number">100</span></span><br><span class="line">//<span class="number">4</span> &lt; <span class="number">42</span> &lt; <span class="number">100</span></span><br></pre></td></tr></table></figure><h5 id="while循环中使用可选项绑定"><a href="#while循环中使用可选项绑定" class="headerlink" title="while循环中使用可选项绑定"></a>while循环中使用可选项绑定</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> strs = [<span class="string">"10"</span>,<span class="string">"20"</span>,<span class="string">"bcd"</span>,<span class="string">"-20"</span>, <span class="string">"30"</span>]</span><br><span class="line"><span class="built_in">var</span> index = <span class="number">0</span></span><br><span class="line"><span class="built_in">var</span> <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">let</span> <span class="built_in">num</span> = Int(strs[index]), <span class="built_in">num</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">sum</span> += <span class="built_in">num</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>遍历数组,将遇到的整数都加起来,遇到负数,或非数字,跳过</p><h5 id="四-空合并运算符"><a href="#四-空合并运算符" class="headerlink" title="四 空合并运算符 ??"></a>四 空合并运算符 ??</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:<span class="type">Int?</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b:<span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = a ?? b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a=\(a),b=\(b),c=\(c)"</span>) <span class="comment">//a=Optional(1),b=Optional(2),c=Optional(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1:<span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b1:<span class="type">Int?</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c1 = a1 ?? b1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a1=\(a1),b1=\(b1),c1=\(c1)"</span>)  <span class="comment">//a1=nil,b1=Optional(2),c1=Optional(2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2:<span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b2:<span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> c2 = a2 ?? b2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a2=\(a2),b2=\(b2),c2=\(c2)"</span>) <span class="comment">//a2=nil,b2=nil,c2=nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a3:<span class="type">Int?</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b3:<span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c3 = a3 ?? b3</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a3=\(a3),b3=\(b3),c3=\(c3)"</span>) <span class="comment">//a3=Optional(1),b3=2,c3=1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a4:<span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> b4:<span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c4 = a4 ?? b4</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a4=\(a4),b4=\(b4),c4=\(c4)"</span>) <span class="comment">//a4=nil,b4=2,c4=2</span></span><br></pre></td></tr></table></figure><p>可选项要求</p><ul><li><p>a ?? b</p></li><li><p>a是可选项</p></li><li><p>b 是或者不是可选项都行</p></li><li><p>a 跟 b的存储类型必须相同</p></li><li><p>如果a 不为空就返回a</p></li><li><p>如果a 为空就返回b</p></li><li><p>如果 b 不是可选项,返回a 会自动解包</p></li></ul><p>?? 运算符定义</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ?? &lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ?? &lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T?</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T?</span></span><br></pre></td></tr></table></figure><h5 id="五-guard语句"><a href="#五-guard语句" class="headerlink" title="五 guard语句"></a>五 guard语句</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(<span class="number">_</span> info:[String:String])</span></span>  &#123;</span><br><span class="line">    <span class="keyword">let</span> username:<span class="type">String</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> tmp = info[<span class="string">"username"</span>] &#123;</span><br><span class="line">        username = tmp</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入用户名"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> password:<span class="type">String</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> tmp = info[<span class="string">"password"</span>] &#123;</span><br><span class="line">        password = tmp</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入密码"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"用户名:\(username), 密码:\(password)"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">login([<span class="string">"username"</span>:<span class="string">"jack"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>]) <span class="comment">//用户名:jack, 密码:123456</span></span><br><span class="line">login([<span class="string">"password"</span>:<span class="string">"123456"</span>]) <span class="comment">//请输入用户名</span></span><br><span class="line">login([<span class="string">"username"</span>:<span class="string">"jack"</span>]) <span class="comment">// 请输入密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">guardLogin</span><span class="params">(<span class="number">_</span> info:[String:String])</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> username = info[<span class="string">"username"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入用户名"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> password = info[<span class="string">"password"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请输入密码"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">"用户名:\(username), 密码:\(password)"</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">guard 条件 <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="regexp">//</span> <span class="keyword">do</span> something....</span><br><span class="line">退出当前作用域</span><br><span class="line"><span class="regexp">//</span> return、<span class="keyword">break</span>、<span class="keyword">continue</span>、throw error</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当guard语句的条件为false时,就会执行大括号里面的代码<br>当guard语句的条件为true时,就会跳过guard语句<br>当使用guard语句进行可选项绑定时,绑定的常量(let),变量(var)也能在外层作用域中使用</p><h5 id="六-隐式解包"><a href="#六-隐式解包" class="headerlink" title="六 隐式解包"></a>六 隐式解包</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1:<span class="type">Int!</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> num2:<span class="type">Int</span> = num1</span><br><span class="line"><span class="keyword">if</span> num1 != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(num1 + <span class="number">6</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> num3 = num1 &#123;</span><br><span class="line">    <span class="built_in">print</span>(num3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num1:<span class="type">Int!</span> = <span class="literal">nil</span><span class="comment">// Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value</span></span><br><span class="line"><span class="keyword">let</span> num2:<span class="type">Int</span> = num1</span><br></pre></td></tr></table></figure><ul><li><p>在某些情况下，可选项一旦被设定值之后，就会一直拥有值</p></li><li><p>在这种情况下，可以去掉检查，也不必每次访问的时候都进行解包，因为它能确定每次访问的时候都有值</p></li><li><p>可以在类型后面加个感叹号 ! 定义一个隐式解包的可选项</p></li></ul><h5 id="七-多重可选项"><a href="#七-多重可选项" class="headerlink" title="七 多重可选项"></a>七 多重可选项</h5><p><img src="../assets/blogImg/kexuanxiang02.png" alt><br><img src="../assets/blogImg/kexuanxiang03.png" alt></p><h5 id="八-可选项的本质"><a href="#八-可选项的本质" class="headerlink" title="八 可选项的本质"></a>八 可选项的本质</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a:Int</span>? = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">b:Optional</span><span class="symbol">&lt;Int&gt;</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">a</span> == <span class="keyword">b</span>) //true</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> enum Optional&lt;Wrapped&gt; : ExpressibleByNilLiteral &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The absence of a value.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// In code, the absence of a value is typically written using the `nil`</span></span><br><span class="line">    <span class="comment">/// literal rather than the explicit `.none` enumeration case.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">none</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The presence of a value, stored as `Wrapped`.</span></span><br><span class="line">    <span class="keyword">case</span> some(Wrapped)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Creates an instance that stores the given value.</span></span><br><span class="line">    <span class="keyword">public</span> init(_ some: Wrapped)</span><br><span class="line">       <span class="params">...</span><span class="params">...</span><span class="params">...</span><span class="params">...</span><span class="params">...</span>.</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可选项本质就是一个枚举, Wrapped就是要包装的类型, Int? 包装的就是Int类型, 通过第7节我们的打印可以看出,对于可选项变量赋值,底层就是用some关联值进行存储,返回会做判断,不为空就返回some关联值, 为空就返回none</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-可选项定义&quot;&gt;&lt;a href=&quot;#一-可选项定义&quot; class=&quot;headerlink&quot; title=&quot;一 可选项定义&quot;&gt;&lt;/a&gt;一 可选项定义&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name:&lt;span class=&quot;type&quot;&gt;String?&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age:&lt;span class=&quot;type&quot;&gt;Int?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;age = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;age = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; index:Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int?&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; index &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || index &amp;gt;= array.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;//Optional(15)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可选项,一般也叫可选类型,它允许将值设置为nil,在类型名称后面加个问号❓来定义一个可选项, 通过打印我们看到可选项打印出来是Optional(15),那么这个Optional(15)我们该怎么用呢&lt;/p&gt;
&lt;h5 id=&quot;二-强制解包&quot;&gt;&lt;a href=&quot;#二-强制解包&quot; class=&quot;headerlink&quot; title=&quot;二 强制解包&quot;&gt;&lt;/a&gt;二 强制解包&lt;/h5&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var age:Int? = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ageInt:Int = age!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ageInt += &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(ageInt)&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;Program ended with &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt; code: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要从可选项中取出被包装的数据,需要使用感叹号❕&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/blogImg/kexuanxiang01.png&quot; alt&gt;&lt;br&gt;对值为nil的可选项进行强制解包,将会产生运行时错误&lt;/p&gt;
&lt;h5 id=&quot;判断可选项是否包含值&quot;&gt;&lt;a href=&quot;#判断可选项是否包含值&quot; class=&quot;headerlink&quot; title=&quot;判断可选项是否包含值&quot;&gt;&lt;/a&gt;判断可选项是否包含值&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; number = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;123&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; number != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;字符串转换整数成功:\(number)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;字符串转换整数失败&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//字符串转换整数成功:Optional(123)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift函数</title>
    <link href="http://example.com/2019/08/15/swift%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2019/08/15/swift函数/</id>
    <published>2019-08-15T10:59:24.000Z</published>
    <updated>2020-12-05T12:01:44.466Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-函数的定义"><a href="#一-函数的定义" class="headerlink" title="一 函数的定义"></a>一 函数的定义</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pi</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.1415926</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(v1:Int, v2:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayWorld</span><span class="params">(v1:Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(v1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形参默认是let,也只能是let</p><h5 id="二-函数的文档注释"><a href="#二-函数的文档注释" class="headerlink" title="二 函数的文档注释"></a>二 函数的文档注释</h5><figure class="highlight plain"><figcaption><span>返回多个值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">///</span><br><span class="line">/// 返回两个数的和 差 平均值</span><br><span class="line">///</span><br><span class="line">/// - Parameter v1: 第一个整数</span><br><span class="line">/// - Parameter v2: 第二个整数</span><br><span class="line">/// - Returns: sum:Int, difference:Int, average:Int</span><br><span class="line">///</span><br><span class="line">/// - Note:通过一个元组实现多返回值</span><br><span class="line">func calculate(v1:Int, v2:Int) -&gt; (sum:Int, difference:Int, average:Int) &#123;</span><br><span class="line">    let sum = v1 + v2</span><br><span class="line">    return (sum,v1-v2, sum &gt;&gt; 1)</span><br><span class="line">&#125;</span><br><span class="line">let result = calculate(v1: 20, v2: 10)</span><br></pre></td></tr></table></figure><p>对着函数调用按住option键即可查看注释效果</p><p><img src="../assets/blogImg/hanshu01.jpg" alt><br><a href="https://swift.org/documentation/api-design-guidelines/" target="_blank" rel="noopener">更多注释规范 点此查看</a></p><a id="more"></a><h5 id="三-函数隐式返回"><a href="#三-函数隐式返回" class="headerlink" title="三 函数隐式返回"></a>三 函数隐式返回</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> sum(v1:Int, v2:Int) -&gt; Int &#123;</span><br><span class="line">    v1 + v2</span><br><span class="line">&#125;</span><br><span class="line">let isum = sum(v1: <span class="number">10</span>, v2: <span class="number">20</span>)</span><br><span class="line">print(isum)<span class="regexp">//</span><span class="number">30</span></span><br><span class="line"><span class="regexp">//</span>Program ended with <span class="keyword">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果整个函数体是一个单一表达式,那么函数会隐式返回这个表达式</p><h5 id="四-实现多返回值"><a href="#四-实现多返回值" class="headerlink" title="四 实现多返回值"></a>四 实现多返回值</h5><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func calculate(v1:<span class="built_in">Int</span>, v2:<span class="built_in">Int</span>) -&gt; (<span class="built_in">sum</span>:<span class="built_in">Int</span>, difference:<span class="built_in">Int</span>, average:<span class="built_in">Int</span>) &#123;</span><br><span class="line">    let <span class="built_in">sum</span> = v1 + v2</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">sum</span>,v1-v2, <span class="built_in">sum</span> &gt;&gt; <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">let result = calculate(v1: <span class="number">20</span>, v2: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">sum</span>)</span><br><span class="line"><span class="built_in">print</span>(result.difference)</span><br><span class="line"><span class="built_in">print</span>(result.average)//<span class="number">30</span></span><br><span class="line">//<span class="number">10</span></span><br><span class="line">//<span class="number">15</span></span><br><span class="line">//<span class="function"><span class="keyword">Program</span></span> ended with <span class="keyword">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>我们通过返回一个元组来实现多个返回值</p><h5 id="五-参数标签-Argument-Lable"><a href="#五-参数标签-Argument-Lable" class="headerlink" title="五 参数标签 (Argument Lable)"></a>五 参数标签 (Argument Lable)</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">goBackHome</span>(at <span class="attribute">time</span>:String) &#123;   <span class="comment">//可以修改参数标签</span></span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">"go back home at \(time)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">goBackHome</span>(<span class="attribute">at</span>: <span class="string">"08:00"</span>) <span class="comment">// go back home at 08:00 语句是不是很通顺</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">goBackHome</span>(<span class="attribute">time</span>:String) &#123;  <span class="comment">//平时参数声明</span></span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">"go back home  \(time)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">goBackHome</span>(<span class="attribute">time</span>: <span class="string">"08:00"</span>) <span class="comment">// // go back home time 08:00 语句通顺么???</span></span><br></pre></td></tr></table></figure><p>参数标签是函数更加语意化,更友好通顺. 这个功能真的是perfect 👍</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func <span class="built_in">sum</span>(_ <span class="symbol">v1</span>: <span class="built_in">Int</span>, _ <span class="symbol">v2</span>:<span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="symbol">v1</span> + <span class="symbol">v2</span></span><br><span class="line"><span class="symbol"></span>&#125;</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>可以使用下划线_ 省略参数标签</p><h5 id="六-默认参数值"><a href="#六-默认参数值" class="headerlink" title="六 默认参数值"></a>六 默认参数值</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">check</span>(<span class="attribute">name</span>:String = <span class="string">"nobody"</span>, <span class="attribute">age</span>:Int, <span class="attribute">job</span>:String=<span class="string">"none"</span>) &#123;</span><br><span class="line">    <span class="selector-tag">print</span>(<span class="string">"name=\(name) , age=\(age), job=\(job)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">age</span>: <span class="number">20</span>)</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">name</span>: <span class="string">"hello"</span>, <span class="attribute">age</span>: <span class="number">30</span>, <span class="attribute">job</span>: <span class="string">"softdeveloper"</span>)</span><br><span class="line"><span class="selector-tag">check</span>(<span class="attribute">age</span>:<span class="number">30</span>, <span class="attribute">job</span>: <span class="string">"anmoshi"</span>)</span><br></pre></td></tr></table></figure><p>其他语言默认参数必须从右往左设置,swift不需要,swift参数都有标签标示,所以不需要顺序声明,它根据标签都能找到,但是有时候你使用了省略标签就要注意了<br><img src="../assets/blogImg/hanshu02.jpg" alt><br>标签都省略,它就没办法找到哪个没有默认值了.反正要实际看待,不管怎么定义,你要保证他能找到未赋值的参数</p><h5 id="七-可变参数"><a href="#七-可变参数" class="headerlink" title="七 可变参数"></a>七 可变参数</h5><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func <span class="built_in">sum</span>(numbers: <span class="built_in">Int</span>...) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">    var total = <span class="number">0</span></span><br><span class="line">    for <span class="keyword">number</span> <span class="keyword">in</span> numbers&#123;</span><br><span class="line">        total += <span class="keyword">number</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(numbers: <span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>))</span><br></pre></td></tr></table></figure><p>参数类型后面加三个点… 这个参数就是可变参数了,一个函数最多只能有1个可变参数</p><p><img src="../assets/blogImg/hanshu03.png" alt><br>紧跟在可变参数后面的参数不能省略参数标签</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(<span class="number">_</span> items: <span class="keyword">Any</span>..., separator: String = <span class="string">" "</span>, terminator: String = <span class="string">"\n"</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">//这样打印也是可以的</span></span><br></pre></td></tr></table></figure><p>swift自带的print函数就有可变参数,也有参数默认值</p><h5 id="八-输入输出参数"><a href="#八-输入输出参数" class="headerlink" title="八 输入输出参数"></a>八 输入输出参数</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapValues</span><span class="params">(<span class="number">_</span> v1: <span class="keyword">inout</span> Int, <span class="number">_</span> v2: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    (v1, v2) = (v2, v1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span></span><br><span class="line"><span class="built_in">swap</span>(&amp;num1, &amp;num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"num1:\(num1)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"num2:\(num2)"</span>)<span class="comment">//num1:20</span></span><br><span class="line"><span class="comment">//num2:10</span></span><br><span class="line"><span class="comment">//Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p>可以用inout定义一个输入输出参数:可以在函数内部修改外部实参的值</p><p>注意⚠️:</p><ul><li>可变参数不能标记为inout.   num:inout Int… ❌</li><li>inout参数不能有默认值 ❌</li><li>inout 参数不能传入只能赋值一次的, 常量就不行 ❌ </li></ul><p><strong>inout参数本质是地址传递(引用传递)</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intValue</span><span class="params">(<span class="number">_</span> v1: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    v1 = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line">intValue(&amp;num1)</span><br></pre></td></tr></table></figure><p><img src="../assets/blogImg/函数04.jpg" alt></p><h5 id="九-函数重载"><a href="#九-函数重载" class="headerlink" title="九 函数重载"></a>九 函数重载</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">sum</span>(<span class="attribute">v1</span>:Int, <span class="attribute">v2</span>:Int) <span class="selector-tag">-</span>&gt; <span class="selector-tag">Int</span> &#123;</span><br><span class="line">    <span class="selector-tag">v1</span> + <span class="selector-tag">v2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">sum</span>(<span class="attribute">v1</span>:Int, <span class="attribute">v2</span>:Int, <span class="attribute">v3</span>:Int) <span class="selector-tag">-</span>&gt; <span class="selector-tag">Int</span> &#123;</span><br><span class="line">    <span class="selector-tag">v1</span> + <span class="selector-tag">v2</span> + <span class="selector-tag">v3</span></span><br><span class="line">&#125; <span class="comment">//参数个数不同</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">sum</span>(<span class="attribute">v1</span>:Double,<span class="attribute">v2</span>:Double) <span class="selector-tag">-</span>&gt; <span class="selector-tag">Int</span> &#123;</span><br><span class="line">    <span class="selector-tag">Int</span>(v1) + <span class="selector-tag">Int</span>(v2)</span><br><span class="line">&#125; <span class="comment">//参数类型不同</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">sum</span>(<span class="attribute">a</span>:Int, <span class="attribute">b</span>:Int) <span class="selector-tag">-</span>&gt; <span class="selector-tag">Int</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> + <span class="selector-tag">b</span></span><br><span class="line">&#125; <span class="comment">//参数标签不同</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">print</span>(sum(<span class="attribute">v1</span>: <span class="number">20</span>, <span class="attribute">v2</span>: <span class="number">10</span>))</span><br><span class="line"><span class="selector-tag">print</span>(sum(<span class="attribute">v1</span>: <span class="number">20.0</span>, <span class="attribute">v2</span>: <span class="number">30.5</span>))</span><br><span class="line"><span class="selector-tag">print</span>(sum(<span class="attribute">v1</span>: <span class="number">20</span>, <span class="attribute">v2</span>: <span class="number">30</span>, <span class="attribute">v3</span>:<span class="number">40</span>))</span><br><span class="line"><span class="selector-tag">print</span>(sum(<span class="attribute">a</span>: <span class="number">10</span>, <span class="attribute">b</span>:<span class="number">20</span>))<span class="comment">//30</span></span><br><span class="line"><span class="comment">//50</span></span><br><span class="line"><span class="comment">//90</span></span><br><span class="line"><span class="comment">//30</span></span><br><span class="line"><span class="comment">//Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p><strong>规则:</strong></p><ul><li>函数名称相同</li><li>参数个数不同 || 参数类型不同 || 参数标签不同<br>通过上面三种我们都能够区分你调用的是哪个函数,如果你定义的函数不能区分你调用的是那个,那就不允许重载</li></ul><p><img src="../assets/blogImg/hanshu05.png" alt></p><h5 id="十-内联函数"><a href="#十-内联函数" class="headerlink" title="十 内联函数"></a>十 内联函数</h5><p>如果开启了编译器优化(Release模式默认会开启优化), 编译器会自动将某些函数变成内联函数</p><p><img src="../assets/blogImg/hanshu06.jpg" alt><br><img src="../assets/blogImg/hanshu07.jpg" alt><br><img src="../assets/blogImg/hanshu08.jpg" alt><br><img src="../assets/blogImg/hanshu09.jpg" alt></p><p><strong>哪些函数不会被自动内联</strong></p><ul><li><p>函数体比较长</p></li><li><p>包含递归调用</p></li><li><p>包含动态派发 继承调用</p></li><li><p>………..</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//永远不会被内联(即使开启了编译器优化)</span></span><br><span class="line">@inline(never) <span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启了编译器优化后,即使代码很长,也会被内联(递归函数,动态派发的函数除外)</span></span><br><span class="line">@inline(__always) <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@inline可以一定程度上控制是否要被内联</p><h5 id="十一-函数类型"><a href="#十一-函数类型" class="headerlink" title="十一 函数类型"></a>十一 函数类型</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> sum(a:Int,b:Int) -&gt;Int &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br><span class="line">var fn:(Int,Int)-&gt;Int = sum</span><br><span class="line">print(fn(<span class="number">20</span>,<span class="number">30</span>))<span class="regexp">//</span><span class="number">50</span></span><br><span class="line"><span class="regexp">//</span>Program ended with <span class="keyword">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>每一个函数都是有类型的,函数类型由,<strong>形式参数类型</strong>, <strong>返回值类型</strong>组成</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func sum(<span class="selector-tag">a</span>:Int,<span class="selector-tag">b</span>:Int) -&gt;Int &#123;</span><br><span class="line">    <span class="selector-tag">a</span> + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func difference(<span class="selector-tag">a</span>:Int,<span class="selector-tag">b</span>:Int) -&gt;Int&#123;</span><br><span class="line">    <span class="selector-tag">a</span> - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func result(_ mathFun:(Int,Int)-&gt;Int, _ <span class="selector-tag">a</span>:Int, _ <span class="selector-tag">b</span>:Int)&#123;</span><br><span class="line">    print(<span class="string">"result:\(mathFun(a,b))"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">result</span><span class="params">(sum, <span class="number">10</span>, <span class="number">20</span>)</span></span>  <span class="comment">//调用时不需要参数标签</span></span><br><span class="line"><span class="function"><span class="title">result</span><span class="params">(difference,<span class="number">30</span>,<span class="number">40</span>)</span></span><span class="comment">//result:30</span></span><br><span class="line"><span class="comment">//result:-10</span></span><br><span class="line"><span class="comment">//Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p>函数类型作为函数参数, 有点block的意思</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">func sum(<span class="selector-tag">a</span>:Int,<span class="selector-tag">b</span>:Int) -&gt;Int &#123;</span><br><span class="line">    <span class="selector-tag">a</span> + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func difference(<span class="selector-tag">a</span>:Int,<span class="selector-tag">b</span>:Int) -&gt;Int&#123;</span><br><span class="line">    <span class="selector-tag">a</span> - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func result(_ <span class="selector-tag">a</span>:Int) -&gt; (Int,Int)-&gt;Int&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="selector-tag">a</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">        return sum</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        return difference</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(result(-<span class="number">1</span>)</span><span class="params">(<span class="number">20</span>,<span class="number">30</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(result(<span class="number">1</span>)</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span></span>)<span class="comment">//-10</span></span><br><span class="line"><span class="comment">//30</span></span><br><span class="line"><span class="comment">//Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><p>函数类型也可作为函数的返回值, 也叫高阶函数</p><h5 id="typealias"><a href="#typealias" class="headerlink" title="typealias"></a>typealias</h5><p>用来给类型起别名</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Byte</span> = <span class="type">Int8</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Short</span> = <span class="type">Int16</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Long</span> = <span class="type">Int64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Date</span> = (year:<span class="type">Int</span>, month:<span class="type">Int</span>, day:<span class="type">Int</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">time</span><span class="params">(<span class="number">_</span> date:Date)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(date.year)</span><br><span class="line">    <span class="built_in">print</span>(date.month)</span><br><span class="line">    <span class="built_in">print</span>(date.day)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">InrFn</span> = (<span class="type">Int</span>,<span class="type">Int</span>)-&gt;<span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">difference</span><span class="params">(v1:Int,v2:Int)</span></span> -&gt;<span class="type">Int</span> &#123;</span><br><span class="line">    </span><br><span class="line">    v1  - v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn:<span class="type">InrFn</span> = difference</span><br><span class="line"><span class="built_in">print</span>(difference(v1: <span class="number">10</span>, v2: <span class="number">20</span>))</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setFn</span><span class="params">(<span class="number">_</span> fn:InrFn)</span></span> &#123;&#125;</span><br><span class="line">setFn(difference)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFn</span><span class="params">()</span></span> -&gt; <span class="type">InrFn</span> &#123;</span><br><span class="line">    difference</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 元组 基本类型等都可以起别名</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> -&gt; <span class="title">Void</span> &#123; &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> -&gt; <span class="params">()</span> &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>这两个函数是等价的 跟进去看Void定义<br><img src="../assets/blogImg/hanshu10.jpg" alt><br>Void就是空元组的别名</p><h5 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forward</span><span class="params">(<span class="number">_</span> forward: Bool)</span></span> -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        input + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previous</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">         input - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> forward ? next : previous</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(forward(<span class="literal">true</span>)(<span class="number">3</span>) )<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">print</span>(forward(<span class="literal">false</span>)(<span class="number">3</span>) )<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>函数里面套函数,没啥可讲的,除了调用的时候感觉绕一点</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-函数的定义&quot;&gt;&lt;a href=&quot;#一-函数的定义&quot; class=&quot;headerlink&quot; title=&quot;一 函数的定义&quot;&gt;&lt;/a&gt;一 函数的定义&lt;/h5&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//无参有返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3.1415926&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//有参有返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(v1:Int, v2:Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v1 + v2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//无参无返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//有参无返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayWorld&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(v1:Int)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(v1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;形参默认是let,也只能是let&lt;/p&gt;
&lt;h5 id=&quot;二-函数的文档注释&quot;&gt;&lt;a href=&quot;#二-函数的文档注释&quot; class=&quot;headerlink&quot; title=&quot;二 函数的文档注释&quot;&gt;&lt;/a&gt;二 函数的文档注释&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;返回多个值&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// 返回两个数的和 差 平均值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - Parameter v1: 第一个整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - Parameter v2: 第二个整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - Returns: sum:Int, difference:Int, average:Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - Note:通过一个元组实现多返回值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func calculate(v1:Int, v2:Int) -&amp;gt; (sum:Int, difference:Int, average:Int) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let sum = v1 + v2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (sum,v1-v2, sum &amp;gt;&amp;gt; 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let result = calculate(v1: 20, v2: 10)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对着函数调用按住option键即可查看注释效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/blogImg/hanshu01.jpg&quot; alt&gt;&lt;br&gt;&lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;更多注释规范 点此查看&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift流程控制</title>
    <link href="http://example.com/2019/08/10/swift%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2019/08/10/swift流程控制/</id>
    <published>2019-08-10T09:15:16.000Z</published>
    <updated>2020-12-05T06:41:26.861Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-if-else"><a href="#一-if-else" class="headerlink" title="一 if else"></a>一 if else</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let age = 30</span><br><span class="line"><span class="keyword">if</span> age &gt;= 22 &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"Get married"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> age &gt;= 18 &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"Being a adult"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"listening tu ta zi jiao huan"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if 后面的条件可以省略小括号<br>条件后面的大括号不可以省略<br><img src="../assets/blogImg/if01.jpg" alt><br>if 后面的条件只能是Bool类型</p><h5 id="二-while"><a href="#二-while" class="headerlink" title="二 while"></a>二 while</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">num</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"num is \(num)"</span>)</span><br><span class="line">    <span class="built_in">num</span> -= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">-1</span></span><br><span class="line">repeat &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"num2 is \(num2)"</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> num2 &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p>repeat-while相当于C语言中的do-while<br>从Swift3开始,去除了自增(++),自减(–)运算符,为啥去除呢,可能为了更严谨吧.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> number = <span class="number">0</span></span><br><span class="line">let <span class="selector-tag">b</span> = ++ number + number++</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(b)</span></span> <span class="comment">//?? 你能快速算出b是几么?</span></span><br></pre></td></tr></table></figure><p>swift去除自增自减,也是为了更明确简洁吧.</p><a id="more"></a><h5 id="三-for"><a href="#三-for" class="headerlink" title="三 for"></a>三 for</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let names = [<span class="string">"Anna"</span>, <span class="string">"AlX"</span>, <span class="string">"BTAD"</span>, <span class="string">"MOKY"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 0 <span class="built_in">..</span>. 3 &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(names[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭区间运算符: a … b,  相当于  a &lt;= 取值 &lt;= b</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let names = [<span class="string">"Anna"</span>, <span class="string">"AlX"</span>, <span class="string">"BTAD"</span>, <span class="string">"MOKY"</span>]</span><br><span class="line"><span class="keyword">for</span> var i <span class="keyword">in</span> 0 <span class="built_in">..</span>. 3 &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(names[i])</span><br><span class="line">    i += 5</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>i默认是let, 想修改它可以声明为var</p><p><img src="../assets/blogImg/for01.jpg" alt><br>i 如果没有用到可以使用_</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">range</span>:ClosedRange<span class="symbol">&lt;Int&gt;</span> = <span class="number">1</span> ... <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span> &#123;</span><br><span class="line">    <span class="keyword">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以定义个区间类型的变量</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="selector-tag">a</span> ... <span class="selector-tag">b</span> &#123;</span><br><span class="line">   print(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量之间的区间, 此时定义成字符串也可以”aa” … “bb”</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 <span class="built_in">..</span>&lt; 5 &#123;</span><br><span class="line">   <span class="builtin-name">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>半开区间运算符 a ..&lt;b, a &lt;= 取值 &lt; b</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let names = [<span class="string">"Anna"</span>, <span class="string">"AlX"</span>, <span class="string">"BTAD"</span>, <span class="string">"MOKY"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[0 <span class="built_in">..</span>. 3] &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 区间运算符用在数组上</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let names = [<span class="string">"Anna"</span>, <span class="string">"AlX"</span>, <span class="string">"BTAD"</span>, <span class="string">"MOKY"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[2<span class="built_in">..</span>.] &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name2 <span class="keyword">in</span> names[<span class="built_in">..</span>.2] &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(name2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name3 <span class="keyword">in</span> names[<span class="built_in">..</span>&lt;2] &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(name3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单侧区间: 让区间朝一个方向尽可能的远, 最远到数组的尽头</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> range1: ClosedRange&lt;<span class="built_in">Int</span>&gt; = <span class="number">1.</span>.<span class="number">.3</span>  <span class="comment">//闭合区间</span></span><br><span class="line"><span class="keyword">let</span> range2: Range&lt;<span class="built_in">Int</span>&gt; = <span class="number">1.</span>.&lt;<span class="number">3</span><span class="comment">//半开区间</span></span><br><span class="line"><span class="keyword">let</span> range3: PartialRangeThrough&lt;<span class="built_in">Int</span>&gt; = ..<span class="number">.5</span> <span class="comment">//单侧区间</span></span><br></pre></td></tr></table></figure><p>3种区间类型</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">let</span> <span class="string">hours</span> <span class="string">=</span> <span class="number">11</span></span><br><span class="line"><span class="string">let</span> <span class="string">hourInterval</span> <span class="string">=</span> <span class="number">2</span></span><br><span class="line"><span class="string">for</span> <span class="string">time</span> <span class="string">in</span> <span class="string">stride(from:</span> <span class="number">4</span><span class="string">,</span> <span class="attr">through:</span> <span class="string">hours,</span> <span class="attr">by:</span> <span class="string">hourInterval)</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">print(time)</span></span><br><span class="line"><span class="string">&#125;</span> <span class="string">//</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>带间隔的区间值</strong></p><h5 id="四-switch"><a href="#四-switch" class="headerlink" title="四 switch"></a>四 switch</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number is one"</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number is other"</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125; <span class="comment">//number is one</span></span><br></pre></td></tr></table></figure><p>case, default后面不能写大括号{}</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number is one"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number is other"</span>)</span><br><span class="line">&#125; <span class="comment">//number is one</span></span><br></pre></td></tr></table></figure><p>默认可以不写break 并不会贯穿到后面的条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number is one"</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number is other"</span>)</span><br><span class="line">&#125;<span class="comment">//number is one</span></span><br><span class="line"><span class="comment">//number is other</span></span><br></pre></td></tr></table></figure><p>要想贯穿可以使用 <strong>fallthrough</strong>,  我的妈妈✌️,想的真周到</p><p>—————————-switch注意点⚠️————————-</p><p><img src="../assets/blogImg/switch01.jpg" alt></p><p>switch 必须要保证能处理所有的情况, 可以加default来解决</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Answer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span>, wrong</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> answer = <span class="type">Answer</span>.<span class="keyword">right</span></span><br><span class="line"><span class="keyword">switch</span> answer &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">Answer</span>.<span class="keyword">right</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"right"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">Answer</span>.wrong:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"wrong"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定是Answer类型可以省略Answer</span></span><br><span class="line"><span class="keyword">switch</span> answer &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="keyword">right</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"right"</span>)</span><br><span class="line"><span class="keyword">case</span> .wrong:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"wrong"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果能保证已处理所有情况, 也可以不必使用default</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">string</span> = <span class="string">"Jack"</span></span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">string</span> &#123;  <span class="comment">//String 类型</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"Jack"</span>:</span><br><span class="line">    fallthrough</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Rose"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"Right person"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125; <span class="comment">//Right person</span></span><br><span class="line"></span><br><span class="line">let <span class="keyword">character</span>: Character = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">switch</span> <span class="keyword">character</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"a"</span>, <span class="string">"A"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"the letter A"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"Not the letter A"</span>)</span><br><span class="line">&#125; <span class="comment">//the letter A</span></span><br></pre></td></tr></table></figure><p>switch也支持Character,String类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">count</span> = <span class="number">40</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">count</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"none"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> ..&lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a few"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span> ..&lt; <span class="number">50</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"just soso"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">50</span> ..&lt; <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"good"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"so many"</span>)</span><br><span class="line">&#125; <span class="comment">//just soso</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point = (<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>,<span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the origin"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">_</span>,<span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"在x轴"</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>,<span class="number">_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"在y轴"</span>)</span><br><span class="line"><span class="keyword">case</span> (-<span class="number">2</span>...<span class="number">2</span>, -<span class="number">2</span>...<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"在这个框内"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"不在此框"</span>)</span><br><span class="line">&#125; <span class="comment">//在这个框内</span></span><br></pre></td></tr></table></figure><p>switch也支持区间匹配,元组匹配</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point = (<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">switch point &#123;</span><br><span class="line"><span class="built_in">case</span> (<span class="keyword">let</span> x, <span class="number">0</span>):</span><br><span class="line">    <span class="keyword">print</span>(x)</span><br><span class="line"><span class="built_in">case</span> (<span class="number">0</span>,<span class="keyword">let</span> y):</span><br><span class="line">    <span class="keyword">print</span>(y)</span><br><span class="line">case <span class="keyword">let</span> (x ,y):</span><br><span class="line">    <span class="keyword">print</span>(x,y)</span><br><span class="line">&#125; <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>值绑定, let 也可以改为var ,那样就可以修改x,y的值了</p><h5 id="五-where"><a href="#五-where" class="headerlink" title="五 where"></a>五 where</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将所有正数加起来</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">10</span>,<span class="number">15</span>,-<span class="number">10</span>,-<span class="number">20</span>,<span class="number">40</span>,-<span class="number">100</span>]</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers <span class="keyword">where</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">    sum += num</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sum)<span class="comment">//65</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point = (<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == y:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"on the line x == y"</span>) <span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == -y:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"on the line x == -y"</span>) <span class="keyword">case</span> <span class="keyword">let</span> (x, y):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"(\(x), \(y)) is just some arbitrary point"</span>) &#125; <span class="comment">// on the line x == -y</span></span><br></pre></td></tr></table></figure><h5 id="六-标签语句"><a href="#六-标签语句" class="headerlink" title="六 标签语句"></a>六 标签语句</h5><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">outer</span>: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">4</span> &#123; <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">1</span>...<span class="number">4</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span> <span class="keyword">outer</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="keyword">outer</span> &#125;</span><br><span class="line">        print(<span class="string">"i == \(i), k == \(k)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一-if-else&quot;&gt;&lt;a href=&quot;#一-if-else&quot; class=&quot;headerlink&quot; title=&quot;一 if else&quot;&gt;&lt;/a&gt;一 if else&lt;/h5&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let age = 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= 22 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;builtin-name&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Get married&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; age &amp;gt;= 18 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;builtin-name&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Being a adult&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;builtin-name&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;listening tu ta zi jiao huan&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;if 后面的条件可以省略小括号&lt;br&gt;条件后面的大括号不可以省略&lt;br&gt;&lt;img src=&quot;../assets/blogImg/if01.jpg&quot; alt&gt;&lt;br&gt;if 后面的条件只能是Bool类型&lt;/p&gt;
&lt;h5 id=&quot;二-while&quot;&gt;&lt;a href=&quot;#二-while&quot; class=&quot;headerlink&quot; title=&quot;二 while&quot;&gt;&lt;/a&gt;二 while&lt;/h5&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;num is \(num)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repeat &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;num2 is \(num2)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; num2 &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;repeat-while相当于C语言中的do-while&lt;br&gt;从Swift3开始,去除了自增(++),自减(–)运算符,为啥去除呢,可能为了更严谨吧.&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let &lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt; = ++ number + number++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//?? 你能快速算出b是几么?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;swift去除自增自减,也是为了更明确简洁吧.&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift基础语法</title>
    <link href="http://example.com/2019/07/30/swift%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2019/07/30/swift基础语法/</id>
    <published>2019-07-30T05:42:31.000Z</published>
    <updated>2020-12-05T11:56:11.570Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-Hello-World"><a href="#一-Hello-World" class="headerlink" title="一 Hello World"></a>一 Hello World</h4><h4 id="二-注释"><a href="#二-注释" class="headerlink" title="二 注释"></a>二 注释</h4><h4 id="三-常量"><a href="#三-常量" class="headerlink" title="三 常量"></a>三 常量</h4><h4 id="四-标识符"><a href="#四-标识符" class="headerlink" title="四 标识符"></a>四 标识符</h4><h4 id="五-常见数据类型"><a href="#五-常见数据类型" class="headerlink" title="五 常见数据类型"></a>五 常见数据类型</h4><h4 id="六-字面量"><a href="#六-字面量" class="headerlink" title="六 字面量"></a>六 字面量</h4><h4 id="七-元组"><a href="#七-元组" class="headerlink" title="七 元组"></a>七 元组</h4><h5 id="一-Hellow-World"><a href="#一-Hellow-World" class="headerlink" title="一  Hellow World"></a>一  Hellow World</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloworld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"你好,世界"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output: 你好,世界</span><br><span class="line">Program ended with <span class="keyword">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>1 不用像OC那样需要main函数,Swift会将全局内的首句可执行代码作为程序入口, 其实它还是有main函数的,底层做的,不需要我们手动写了</p><p>2 相比OC我们语句后面也不用写  “ ; ”了,但是多个语句在一行还是需要的.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="number">10</span></span><br><span class="line">var b = <span class="number">20</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line"><span class="regexp">//</span>a = <span class="number">100</span>  xxx</span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> <span class="number">100</span></span><br><span class="line">Program ended with <span class="keyword">exit</span> code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>1 用<strong>var</strong> 定义变量, 变量可修改值</p><p>2 用<strong>let</strong> 定义常量,值不可修改</p><p>有点像javasript常 变量的定义</p><a id="more"></a><h5 id="二-注释-1"><a href="#二-注释-1" class="headerlink" title="二 注释"></a>二 注释</h5><p>swift 有单行注释和多行注释,多行注释支持嵌套, ~  (注释方式都支持Markup语法,但是只在Playgroun中有效)~</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment"> /*  支持注释嵌套</span></span><br><span class="line"><span class="comment">func helloworld() &#123;</span></span><br><span class="line"><span class="comment"> print("hello world")</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="comment">//print("你好,世界") 单行注释</span></span><br><span class="line">let <span class="selector-tag">a</span> = <span class="number">10</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="number">20</span></span><br><span class="line"><span class="selector-tag">b</span> = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a,b)</span></span></span><br></pre></td></tr></table></figure><p>–<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 多行注释</span><br><span class="line"> /*:  支持注释嵌套</span><br><span class="line"> ####  标题一</span><br><span class="line"> [<span class="string">链接</span>](<span class="link">http://www.lerpo.github.io</span>)</span><br><span class="line">func helloworld() &#123;</span><br><span class="line"> print("hello world")</span><br><span class="line">&#125;</span><br><span class="line"> */</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><p>markup 语法只在Playground中有效果,Editor -&gt; Show Rendered Markup</p><h5 id="三-常量-1"><a href="#三-常量-1" class="headerlink" title="三 常量"></a>三 常量</h5><p><img src="../assets/blogImg/let01.png" alt><br>1 常量用<strong>let</strong> 定义</p><p>2 只能赋值一次,超过一次就报错<br><img src="../assets/blogImg/let02.png" alt><br><img src="../assets/blogImg/let03.png" alt><br>3 它的值不要求在编译时期确定,但使用前必须赋值一次</p><h5 id="四-标识符-1"><a href="#四-标识符-1" class="headerlink" title="四 标识符"></a>四 标识符</h5><p>标识符不能以数字开头，不能包含空白字符、制表符、箭头等特殊字符<br>太简单了,没啥可讲的</p><h5 id="五-常见的数据类型"><a href="#五-常见的数据类型" class="headerlink" title="五 常见的数据类型"></a>五 常见的数据类型</h5><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">值类型(value type)</td><td style="text-align:center">枚举(enum)</td><td style="text-align:center">Optional</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">结构体(struct)</td><td style="text-align:center">Bool, Int, Float,Double, Character,String,Array,Dictionary,Set</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">引用类型(reference type)</td><td style="text-align:center">类(class)</td><td style="text-align:center"></td></tr></tbody></table><p>数据类型转换</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数转换</span></span><br><span class="line"><span class="keyword">let</span> int1: UInt16 = <span class="number">1</span>_000</span><br><span class="line"><span class="keyword">let</span> int2: UInt8 = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> int3 = int1 + UInt16(int2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数 浮点数 转换</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">int</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">double</span> = <span class="number">0.1234</span></span><br><span class="line"><span class="keyword">let</span> pi = <span class="keyword">Double</span>(<span class="keyword">int</span>) + <span class="keyword">double</span></span><br><span class="line"><span class="keyword">let</span> intPi = <span class="keyword">Int</span>(pi)</span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量可以直接相加,因为数字字面量本身没有明确的类型</span></span><br><span class="line"><span class="keyword">let</span> redult = <span class="number">3</span> + <span class="number">0.14234</span></span><br></pre></td></tr></table></figure><p>要转换类型,一般以要转换类型加小括号,小括号里面是你要转换的数据</p><h5 id="六-字面量-1"><a href="#六-字面量-1" class="headerlink" title="六 字面量"></a>六 字面量</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔</span></span><br><span class="line"> <span class="keyword">let</span> <span class="keyword">bool</span> = <span class="literal">true</span> <span class="comment">// 取反h是false  OC is YES OR NO</span></span><br><span class="line"> <span class="comment">//整数</span></span><br><span class="line"> <span class="keyword">let</span> intDecimal = <span class="number">30</span> <span class="comment">//十进制</span></span><br><span class="line"> <span class="keyword">let</span> intBinary = <span class="number">0b10001</span> <span class="comment">//二进制</span></span><br><span class="line"> <span class="keyword">let</span> intOctal = <span class="number">0</span>o21 <span class="comment">//八进制</span></span><br><span class="line"> <span class="keyword">let</span> intHexadecimal = <span class="number">0x11</span> <span class="comment">// 十六进制</span></span><br><span class="line"> <span class="comment">// 字符串</span></span><br><span class="line"> <span class="keyword">let</span> <span class="keyword">string</span> = <span class="string">"lerpo"</span></span><br><span class="line"> <span class="comment">//字符 要加Character类型,否则会默认成字符串</span></span><br><span class="line"> <span class="keyword">let</span> character:Character = <span class="string">"🍺"</span></span><br><span class="line"> <span class="comment">//浮点数</span></span><br><span class="line"> <span class="keyword">let</span> doubeleDecimal = <span class="number">125.0</span></span><br><span class="line"> <span class="comment">//数组</span></span><br><span class="line"> <span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"> <span class="comment">//字典</span></span><br><span class="line"> <span class="keyword">let</span> dictionary = [<span class="string">"age"</span>: <span class="number">20</span>,<span class="string">"height"</span>: <span class="number">185</span>]</span><br></pre></td></tr></table></figure><p>整数和浮点数可以添加额外的零或者添加下划线来增强可读性 100_0000、 1_000_000.000_000_1、 000123.456</p><h5 id="七-元组-1"><a href="#七-元组-1" class="headerlink" title="七 元组"></a>七 元组</h5><p>元组(tuples)把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型。</p><p>下面这个例子中， (404, “Not Found”) 是一个描述<em> HTTP 状态码(HTTP status code)的元组。HTTP 状态码是 当你请求网页的时候 web </em>服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个 <em>404 Not Found </em>状态码。</p><figure class="highlight plain"><figcaption><span>http404Error </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// http404Error 的类型是 (Int, String)，值是 (404, &quot;Not Found&quot;)</span><br><span class="line">(404, &quot;Not Found&quot;) 元组把一个* Int 值和一个 String 值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为 (Int, String) *的元组”。</span><br><span class="line"></span><br><span class="line">你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为 (Int, Int, Int) 或者 (String, Bool) 或者其他任何你想要的组合的元组。</span><br><span class="line"></span><br><span class="line">你可以将一个元组的内容分解* (decompose)* 成单独的常量和变量，然后你就可以正常使用它们了:</span><br></pre></td></tr></table></figure><p>let (statusCode, statusMessage) = http404Error<br>print(“The status code is (statusCode)”)<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 输出 "The status code is 404"</span></span><br></pre></td></tr></table></figure></p><p>print(“The status message is (statusMessage)”)<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// 输出 "The status message is Not Found"</span></span><br><span class="line">如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线* （_） *标记：</span><br><span class="line"></span><br><span class="line">```<span class="keyword">let</span> (justTheStatusCode, _) = http404Error</span><br><span class="line"><span class="keyword">print</span>(<span class="string">"The status code is \(justTheStatusCode)"</span>)</span><br></pre></td></tr></table></figure></p><p> // 输出 “The status code is 404”<br>此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：</p><figure class="highlight plain"><figcaption><span>status code is \(http404Error.0)")```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 输出 &quot;The status code is 404&quot;</span><br><span class="line"></span><br><span class="line">```print(&quot;The status message is \(http404Error.1)&quot;)</span><br></pre></td></tr></table></figure><p>// 输出 “The status message is Not Found”<br>你可以在定义元组的时候给单个元素命名：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let http200Status = (<span class="string">statusCode:</span> <span class="number">200</span>, <span class="string">description:</span> <span class="string">"OK"</span>)</span><br></pre></td></tr></table></figure><p>给元组中的元素命名后，你可以通过名字来获取这些元素的值：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"The status code is \(http200Status.statusCode)"</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>// 输出 “The status code is 200”</p><figure class="highlight plain"><figcaption><span>status message is \(http200Status.description)")</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 输出 &quot;The status message is OK&quot;</span><br></pre></td></tr></table></figure><p>作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个<em> (Int, String) </em>元组来描述是否 获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一-Hello-World&quot;&gt;&lt;a href=&quot;#一-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;一 Hello World&quot;&gt;&lt;/a&gt;一 Hello World&lt;/h4&gt;&lt;h4 id=&quot;二-注释&quot;&gt;&lt;a href=&quot;#二-注释&quot; class=&quot;headerlink&quot; title=&quot;二 注释&quot;&gt;&lt;/a&gt;二 注释&lt;/h4&gt;&lt;h4 id=&quot;三-常量&quot;&gt;&lt;a href=&quot;#三-常量&quot; class=&quot;headerlink&quot; title=&quot;三 常量&quot;&gt;&lt;/a&gt;三 常量&lt;/h4&gt;&lt;h4 id=&quot;四-标识符&quot;&gt;&lt;a href=&quot;#四-标识符&quot; class=&quot;headerlink&quot; title=&quot;四 标识符&quot;&gt;&lt;/a&gt;四 标识符&lt;/h4&gt;&lt;h4 id=&quot;五-常见数据类型&quot;&gt;&lt;a href=&quot;#五-常见数据类型&quot; class=&quot;headerlink&quot; title=&quot;五 常见数据类型&quot;&gt;&lt;/a&gt;五 常见数据类型&lt;/h4&gt;&lt;h4 id=&quot;六-字面量&quot;&gt;&lt;a href=&quot;#六-字面量&quot; class=&quot;headerlink&quot; title=&quot;六 字面量&quot;&gt;&lt;/a&gt;六 字面量&lt;/h4&gt;&lt;h4 id=&quot;七-元组&quot;&gt;&lt;a href=&quot;#七-元组&quot; class=&quot;headerlink&quot; title=&quot;七 元组&quot;&gt;&lt;/a&gt;七 元组&lt;/h4&gt;&lt;h5 id=&quot;一-Hellow-World&quot;&gt;&lt;a href=&quot;#一-Hellow-World&quot; class=&quot;headerlink&quot; title=&quot;一  Hellow World&quot;&gt;&lt;/a&gt;一  Hellow World&lt;/h5&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helloworld&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;你好,世界&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;output: 你好,世界&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Program ended with &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt; code: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1 不用像OC那样需要main函数,Swift会将全局内的首句可执行代码作为程序入口, 其实它还是有main函数的,底层做的,不需要我们手动写了&lt;/p&gt;
&lt;p&gt;2 相比OC我们语句后面也不用写  “ ; ”了,但是多个语句在一行还是需要的.&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;a = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;  xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(a,b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Program ended with &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt; code: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1 用&lt;strong&gt;var&lt;/strong&gt; 定义变量, 变量可修改值&lt;/p&gt;
&lt;p&gt;2 用&lt;strong&gt;let&lt;/strong&gt; 定义常量,值不可修改&lt;/p&gt;
&lt;p&gt;有点像javasript常 变量的定义&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift简介</title>
    <link href="http://example.com/2019/07/20/Swift%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2019/07/20/Swift简介/</id>
    <published>2019-07-20T15:00:48.000Z</published>
    <updated>2020-12-05T06:41:26.859Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Swift是Apple在2014年6月WWDC发布的全新编程语言，中文名和LOGO是“雨燕” Swift之父Chris Lattner pClang编译器作者、LLVM项目的主要发起人 从Apple离职后，先后跳槽到Tesla、Google p目前在Google Brain从事AI研究</p></blockquote><p>历时5年发展，从Swift1.x发展到了Swift5.x版本，经历了多次重大改变，<strong>ABI</strong>终于稳定 <strong>API(Application Programming Interface)</strong>:应用程序编程接口</p><p>源代码和库之间的接口<br>ABI(Application Binary Interface):应用程序二进制接口<br> 应用程序与操作系统之间的底层接口<br>涉及的内容有: <strong>目标文件格式、数据类型的大小\布局\对齐、函数调用约定等等 </strong>  随着ABI的稳定，Swift语法基本不会再有太大的变动,截止至2019年6月，目前最新版本:Swift5.1<br>Swift完全开源: <a href="https://github.com/apple/swift" target="_blank" rel="noopener">https://github.com/apple/swift</a>，主要采用C++编写</p><h5 id="一-swift-编译流程"><a href="#一-swift-编译流程" class="headerlink" title="一  swift 编译流程"></a>一  swift 编译流程</h5><p><img src="../assets/blogImg/binyiliucheng1.png" alt="编译流程"><br>首先我们要知道编译器分为前端和后端：<br>前端：词法分析<br>后端：生成对应平台的二进制代码</p><p>Swift与OC和C的编译流程区别：C和OC编译器的前端是Clang，也就是以前的OC代码通过Clang这个编译器的前端进行处理，转交给LLVM这个编译器的后端，最后生成ARM的二进制代码。而Swift的编译器的前端是swiftc，通过swiftc进行词法分析和语法树处理，然后交给LLVM的后端编译器，最后生成ARM格式的二进制代码<br><img src="../assets/blogImg/bianyiliucheng2.png" alt="编译流程"><br>Swift代码–&gt;通过swiftc生成Swift AST(Swift语法树)–&gt;Raw Swift IL(Swift特有的中间代码)–&gt;Canonical Swift IL(更简洁的Swift代码)–&gt;转交给后端生成LLVM代码–&gt;Assembly(汇编代码)–&gt;Executable(二进制代码)<br><a href="https://swift.org/swift-compiler/" target="_blank" rel="noopener">每个阶段具体介绍</a></p><a id="more"></a><h5 id="二-swiftc"><a href="#二-swiftc" class="headerlink" title="二 swiftc"></a>二 swiftc</h5><p>Swift的编译器的前端是swiftc，通过swiftc进行词法分析和语法树处理,我们可以使用它提供的一些命令对swift文件进行一些操作.</p><ul><li><p>生成语法树: <figure class="highlight plain"><figcaption><span>-dump-ast main.swift ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 生成最简洁的SIL代码:```swiftc -emit-sil main.swift</span><br></pre></td></tr></table></figure></p></li><li><p>生成LLVM IR代码: <figure class="highlight plain"><figcaption><span>-emit-ir main.swift -o main.ll ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 生成汇编代码:``` swiftc -emit-assembly main.swift -o main.s</span><br></pre></td></tr></table></figure></p></li></ul><p>想知道它更多的命令我们可以通过<figure class="highlight plain"><figcaption><span>-h```查看</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">macbookdeMacBook-Pro:Log mac$ swiftc -h</span><br><span class="line"></span><br><span class="line">OVERVIEW: Swift compiler</span><br><span class="line">USAGE: swiftc</span><br><span class="line"></span><br><span class="line">MODES:</span><br><span class="line">  -dump-ast              Parse and type-check input file(s) and dump AST(s)</span><br><span class="line">  </span><br><span class="line">  -dump-parse            Parse input file(s) and dump AST(s)</span><br><span class="line">  </span><br><span class="line">  -dump-scope-maps &lt;expanded-or-list-of-line:column&gt;</span><br><span class="line">                         Parse and type-check input file(s) and dump the scope map(s)</span><br><span class="line">                         </span><br><span class="line">  -dump-type-info        Output YAML dump of fixed-size types from all imported modules</span><br><span class="line">  </span><br><span class="line">  -dump-type-refinement-contexts</span><br><span class="line">                         Type-check input file(s) and dump type refinement contexts(s)</span><br><span class="line">                         </span><br><span class="line">  -emit-assembly         Emit assembly file(s) (-S)</span><br><span class="line">  </span><br><span class="line">  -emit-bc               Emit LLVM BC file(s)</span><br><span class="line">  </span><br><span class="line">  -emit-executable       Emit a linked executable</span><br><span class="line">  </span><br><span class="line">  -emit-imported-modules Emit a list of the imported modules</span><br><span class="line">  </span><br><span class="line">  -emit-ir               Emit LLVM IR file(s)</span><br><span class="line">  </span><br><span class="line">  -emit-library          Emit a linked library</span><br><span class="line">  </span><br><span class="line">  -emit-object           Emit object file(s) (-c)</span><br><span class="line">  </span><br><span class="line">  -emit-sibgen           Emit serialized AST + raw SIL file(s)</span><br><span class="line">  </span><br><span class="line">  -emit-sib              Emit serialized AST + canonical SIL file(s)</span><br><span class="line">  </span><br><span class="line">  -emit-silgen           Emit raw SIL file(s)</span><br><span class="line">  </span><br><span class="line">  -emit-sil              Emit canonical SIL file(s)</span><br><span class="line">  </span><br><span class="line">  -index-file            Produce index data for a source file</span><br><span class="line">  </span><br><span class="line">  -parse                 Parse input file(s)</span><br><span class="line">  </span><br><span class="line">  -print-ast             Parse and type-check input file(s) and pretty print AST(s)</span><br><span class="line">  </span><br><span class="line">  -resolve-imports       Parse and resolve imports in input file(s)</span><br><span class="line">  </span><br><span class="line">  -typecheck             Parse and type-check input file(s)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">  -api-diff-data-dir &lt;path&gt;</span><br><span class="line">                          Load platform and version specific API migration data files from &lt;path&gt;. Ignored if -api-diff-data-file is specified.</span><br><span class="line">                          </span><br><span class="line">  -api-diff-data-file &lt;path&gt;</span><br><span class="line">                          API migration data is from &lt;path&gt;</span><br><span class="line">                          </span><br><span class="line">  -application-extension  Restrict code to those available for App Extensions</span><br><span class="line">  </span><br><span class="line">  -assert-config &lt;value&gt;  Specify the assert_configuration replacement. Possible values are Debug, Release, Unchecked, DisableReplacement.</span><br><span class="line">  </span><br><span class="line">  -continue-building-after-errors</span><br><span class="line">                          Continue building, even after errors are encountered</span><br><span class="line">                          </span><br><span class="line">  -debug-info-format=&lt;value&gt;</span><br><span class="line">                          Specify the debug info format type to either &apos;dwarf&apos; or &apos;codeview&apos;</span><br><span class="line">                          </span><br><span class="line">  -debug-info-store-invocation</span><br><span class="line">                          Emit the compiler invocation in the debug info.</span><br><span class="line">                          </span><br><span class="line">  -debug-prefix-map &lt;value&gt;</span><br><span class="line">                          Remap source paths in debug info</span><br><span class="line">                          </span><br><span class="line">  -disable-autolinking-runtime-compatibility-dynamic-replacements</span><br><span class="line">                          Do not use autolinking for the dynamic replacement runtime compatibility library</span><br><span class="line">                          </span><br><span class="line">  -disable-autolinking-runtime-compatibility</span><br><span class="line">                          Do not use autolinking for runtime compatibility libraries</span><br><span class="line">                          </span><br><span class="line">  -disable-migrator-fixits</span><br><span class="line">                          Disable the Migrator phase which automatically applies fix-its</span><br><span class="line">                          </span><br><span class="line">  -driver-time-compilation</span><br><span class="line">                          Prints the total time it took to execute all compilation tasks</span><br><span class="line">                          </span><br><span class="line">  -dump-migration-states-dir &lt;path&gt;</span><br><span class="line">                          Dump the input text, output text, and states for migration to &lt;path&gt;</span><br><span class="line">                          </span><br><span class="line">  -dump-usr               Dump USR for each declaration reference</span><br><span class="line">  </span><br><span class="line">  -D &lt;value&gt;              Marks a conditional compilation flag as true</span><br><span class="line">  </span><br><span class="line">  -embed-bitcode-marker   Embed placeholder LLVM IR data as a marker</span><br><span class="line">  </span><br><span class="line">  -embed-bitcode          Embed LLVM IR bitcode as data</span><br><span class="line">  </span><br><span class="line">  -emit-dependencies      Emit basic Make-compatible dependencies files</span><br><span class="line">  </span><br><span class="line">  -emit-loaded-module-trace-path &lt;path&gt;</span><br><span class="line">                          Emit the loaded module trace JSON to &lt;path&gt;</span><br><span class="line">                          </span><br><span class="line">  -emit-loaded-module-trace</span><br><span class="line">                          Emit a JSON file containing information about what modules were loaded</span><br><span class="line">                          </span><br><span class="line">  -emit-module-interface-path &lt;path&gt;</span><br><span class="line">                          Output module interface file to &lt;path&gt;</span><br><span class="line">                          </span><br><span class="line">  -emit-module-interface  Output module interface file</span><br><span class="line">  </span><br><span class="line">  -emit-module-path &lt;path&gt;</span><br><span class="line">                          Emit an importable module to &lt;path&gt;</span><br><span class="line">                          </span><br><span class="line">  -emit-module            Emit an importable module</span><br><span class="line">  </span><br><span class="line">  -emit-objc-header-path &lt;path&gt;</span><br><span class="line">                          Emit an Objective-C header file to &lt;path&gt;</span><br><span class="line">                          </span><br><span class="line">  -emit-objc-header       Emit an Objective-C header file</span><br><span class="line">  </span><br><span class="line">  -emit-tbd-path &lt;path&gt;   Emit the TBD file to &lt;path&gt;</span><br><span class="line">  </span><br><span class="line">  -emit-tbd               Emit a TBD file</span><br><span class="line">  </span><br><span class="line">  -enable-library-evolution</span><br><span class="line">                          Build the module to allow binary-compatible library evolution</span><br><span class="line">                          </span><br><span class="line">  -enforce-exclusivity=&lt;enforcement&gt;</span><br><span class="line">                          Enforce law of exclusivity</span><br><span class="line">                          </span><br><span class="line">  -fixit-all              Apply all fixits from diagnostics without any filtering</span><br><span class="line">  </span><br><span class="line">  -framework &lt;value&gt;      Specifies a framework which should be linked against</span><br><span class="line">  </span><br><span class="line">  -Fsystem &lt;value&gt;        Add directory to system framework search path</span><br><span class="line">  </span><br><span class="line">  -F &lt;value&gt;              Add directory to framework search path</span><br><span class="line">  </span><br><span class="line">  -gdwarf-types           Emit full DWARF type info.</span><br><span class="line">  </span><br><span class="line">  -gline-tables-only      Emit minimal debug info for backtraces only</span><br><span class="line">  </span><br><span class="line">  -gnone                  Don&apos;t emit debug info</span><br><span class="line">  </span><br><span class="line">  -g                      Emit debug info. This is the preferred setting for debugging with LLDB.</span><br><span class="line">  </span><br><span class="line">  -help                   Display available options</span><br><span class="line">  </span><br><span class="line">  -import-underlying-module</span><br><span class="line">                          Implicitly imports the Objective-C half of a module</span><br><span class="line">                          </span><br><span class="line">  -index-file-path &lt;path&gt; Produce index data for file &lt;path&gt;</span><br><span class="line">  </span><br><span class="line">  -index-ignore-system-modules</span><br><span class="line">                          Avoid indexing system modules</span><br><span class="line">                          </span><br><span class="line">  -index-store-path &lt;path&gt;</span><br><span class="line">                          Store indexing data to &lt;path&gt;</span><br><span class="line">                          </span><br><span class="line">  -I &lt;value&gt;              Add directory to the import search path</span><br><span class="line">  </span><br><span class="line">  -j &lt;n&gt;                  Number of commands to execute in parallel</span><br><span class="line">  </span><br><span class="line">  -L &lt;value&gt;              Add directory to library link search path</span><br><span class="line">  </span><br><span class="line">  -l&lt;value&gt;               Specifies a library which should be linked against</span><br><span class="line">  </span><br><span class="line">  -migrate-keep-objc-visibility</span><br><span class="line">                          When migrating, add &apos;@objc&apos; to declarations that would&apos;ve been implicitly visible in Swift 3</span><br><span class="line">                          </span><br><span class="line">  -migrator-update-sdk    Does nothing. Temporary compatibility flag for Xcode.</span><br><span class="line">  </span><br><span class="line">  -migrator-update-swift  Does nothing. Temporary compatibility flag for Xcode.</span><br><span class="line">  </span><br><span class="line">  -module-cache-path &lt;value&gt;</span><br><span class="line">                          Specifies the Clang module cache path</span><br><span class="line">                          </span><br><span class="line">  -module-link-name &lt;value&gt;</span><br><span class="line">                          Library to link against when using this module</span><br><span class="line">                          </span><br><span class="line">  -module-name &lt;value&gt;    Name of the module to build</span><br><span class="line">  </span><br><span class="line">  -nostdimport            Don&apos;t search the standard library import path for modules</span><br><span class="line">  </span><br><span class="line">  -num-threads &lt;n&gt;        Enable multi-threading and specify number of threads</span><br><span class="line">  </span><br><span class="line">  -Onone                  Compile without any optimization</span><br><span class="line">  </span><br><span class="line">  -Osize                  Compile with optimizations and target small code size</span><br><span class="line">  </span><br><span class="line">  -Ounchecked             Compile with optimizations and remove runtime safety checks</span><br><span class="line">  </span><br><span class="line">  -output-file-map &lt;path&gt; A file which specifies the location of outputs</span><br><span class="line">  </span><br><span class="line">  -O                      Compile with optimizations</span><br><span class="line">  </span><br><span class="line">  -o &lt;file&gt;               Write output to &lt;file&gt;</span><br><span class="line">  </span><br><span class="line">  -parse-as-library       Parse the input file(s) as libraries, not scripts</span><br><span class="line">  </span><br><span class="line">  -parse-sil              Parse the input file as SIL code, not Swift source</span><br><span class="line">  </span><br><span class="line">  -parseable-output       Emit textual output in a parseable format</span><br><span class="line">  </span><br><span class="line">  -profile-coverage-mapping</span><br><span class="line">                          Generate coverage data for use with profiled execution counts</span><br><span class="line">                          </span><br><span class="line">  -profile-generate       Generate instrumented code to collect execution counts</span><br><span class="line">  </span><br><span class="line">  -profile-use=&lt;profdata&gt; Supply a profdata file to enable profile-guided optimization</span><br><span class="line">  </span><br><span class="line">  -remove-runtime-asserts Remove runtime safety checks.</span><br><span class="line">  </span><br><span class="line">  -require-explicit-availability-target &lt;target&gt;</span><br><span class="line">                          Suggest fix-its adding @available(&lt;target&gt;, *) to public declarations without availability</span><br><span class="line">                          </span><br><span class="line">  -require-explicit-availability</span><br><span class="line">                          Require explicit availability on public declarations</span><br><span class="line">                          </span><br><span class="line">  -Rpass-missed=&lt;value&gt;   Report missed transformations by optimization passes whose name matches the given POSIX regular expression</span><br><span class="line">  </span><br><span class="line">  -Rpass=&lt;value&gt;          Report performed transformations by optimization passes whose name matches the given POSIX regular expression</span><br><span class="line">  </span><br><span class="line">  -runtime-compatibility-version &lt;value&gt;</span><br><span class="line">                          Link compatibility library for Swift runtime version, or &apos;none&apos;</span><br><span class="line">                          </span><br><span class="line">  -sanitize-coverage=&lt;type&gt;</span><br><span class="line">                          Specify the type of coverage instrumentation for Sanitizers and additional options separated by commas</span><br><span class="line">                          </span><br><span class="line">  -sanitize=&lt;check&gt;       Turn on runtime checks for erroneous behavior.</span><br><span class="line">  </span><br><span class="line">  -save-optimization-record-path &lt;value&gt;</span><br><span class="line">                          Specify the file name of any generated YAML optimization record</span><br><span class="line">                          </span><br><span class="line">  -save-optimization-record</span><br><span class="line">                          Generate a YAML optimization record file</span><br><span class="line">                          </span><br><span class="line">  -save-temps             Save intermediate compilation results</span><br><span class="line">  </span><br><span class="line">  -sdk &lt;sdk&gt;              Compile against &lt;sdk&gt;</span><br><span class="line">  </span><br><span class="line">  -serialize-diagnostics  Serialize diagnostics in a binary format</span><br><span class="line">  </span><br><span class="line">  -static-executable      Statically link the executable</span><br><span class="line">  </span><br><span class="line">  -static-stdlib          Statically link the Swift standard library</span><br><span class="line">  </span><br><span class="line">  -static                 Make this module statically linkable and make the output of -emit-library a static library.</span><br><span class="line">  </span><br><span class="line">  -suppress-warnings      Suppress all warnings</span><br><span class="line">  </span><br><span class="line">  -swift-version &lt;vers&gt;   Interpret input according to a specific Swift language version number</span><br><span class="line">  </span><br><span class="line">  -target-cpu &lt;value&gt;     Generate code for a particular CPU variant</span><br><span class="line">  </span><br><span class="line">  -target-variant &lt;value&gt; Generate code that may run on a particular variant of the  deployment target</span><br><span class="line">  </span><br><span class="line">  -target &lt;value&gt;         Generate code for the given target</span><br><span class="line">  </span><br><span class="line">  -tools-directory &lt;directory&gt;</span><br><span class="line">                          Look for external executables (ld, clang, binutils) in &lt;directory&gt;</span><br><span class="line">                          </span><br><span class="line">  -track-system-dependencies</span><br><span class="line">                          Track system dependencies while emitting Make-style dependencies</span><br><span class="line">                          </span><br><span class="line">  -use-ld=&lt;value&gt;         Specifies the linker to be used</span><br><span class="line">  </span><br><span class="line">  -verify-debug-info      Verify the binary representation of debug output.</span><br><span class="line">  </span><br><span class="line">  -version                Print version information and exit</span><br><span class="line">  </span><br><span class="line">  -vfsoverlay &lt;value&gt;     Add directory to VFS overlay file</span><br><span class="line">  </span><br><span class="line">  -v                      Show commands to run and use verbose output</span><br><span class="line">  </span><br><span class="line">  -warn-implicit-overrides</span><br><span class="line">                          Warn about implicit overrides of protocol members</span><br><span class="line">                          </span><br><span class="line">  -warn-swift3-objc-inference-complete</span><br><span class="line">                          Warn about deprecated @objc inference in Swift 3 for every declaration that will no longer be inferred as @objc in Swift 4</span><br><span class="line">                          </span><br><span class="line">  -warn-swift3-objc-inference-minimal</span><br><span class="line">                          Warn about deprecated @objc inference in Swift 3 based on direct uses of the Objective-C entrypoint</span><br><span class="line">                          </span><br><span class="line">  -warnings-as-errors     Treat warnings as errors</span><br><span class="line">  </span><br><span class="line">  -whole-module-optimization</span><br><span class="line">                          Optimize input files together instead of individually</span><br><span class="line">                          </span><br><span class="line">  -working-directory &lt;path&gt;</span><br><span class="line">                          Resolve file paths relative to the specified directory</span><br><span class="line">                          </span><br><span class="line">  -Xcc &lt;arg&gt;              Pass &lt;arg&gt; to the C/C++/Objective-C compiler</span><br><span class="line">  </span><br><span class="line">  -Xlinker &lt;value&gt;        Specifies an option which should be passed to the linker</span><br></pre></td></tr></table></figure></p><h5 id="s三-swiftc使用示例"><a href="#s三-swiftc使用示例" class="headerlink" title="ß三 swiftc使用示例"></a>ß三 swiftc使用示例</h5><figure class="highlight plain"><figcaption><span>Foundation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class ZLog</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    static func d&lt;T&gt;(_ value: T)</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">        let prefix = &quot;log: &quot;</span><br><span class="line">        </span><br><span class="line">        print(prefix, terminator: &quot;&quot;)</span><br><span class="line">        </span><br><span class="line">        print(value)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1 查看文件导入的库</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macbookdeMacBook-<span class="keyword">Pro</span>:<span class="keyword">Log</span> <span class="keyword">mac</span>$ swiftc  -emit-imported-modules ZLog.swift</span><br><span class="line"></span><br><span class="line">Foundation</span><br></pre></td></tr></table></figure><p>2 生成语法树</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">macbookdeMacBook-Pro<span class="keyword">:Log</span> mac$ swiftc -dump-parse ZLog.swift</span><br><span class="line">(source_file <span class="string">"ZLog.swift"</span></span><br><span class="line">  (import_decl range=[ZLog.swift:9:1 - line:9:8] <span class="string">'Foundation'</span>)</span><br><span class="line">  (class_decl range=[ZLog.swift:10:1 - line:18:1] <span class="string">"ZLog"</span></span><br><span class="line">    (func_decl range=[ZLog.swift:12:5 - line:17:5] <span class="string">"d(_:)"</span> &lt;T&gt; type</span><br><span class="line">      (parameter <span class="string">"self"</span>)</span><br><span class="line">      (parameter_list</span><br><span class="line">        (parameter <span class="string">"value"</span>) range=[ZLog.swift:12:21 - line:12:32])</span><br><span class="line">      (brace_stmt range=[ZLog.swift:13:5 - line:17:5]</span><br><span class="line">        (pattern_binding_decl range=[ZLog.swift:14:9 - line:14:22]</span><br><span class="line">          (pattern_named <span class="string">'prefix'</span>)</span><br><span class="line">          (string_literal_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">encoding</span>=utf8 <span class="attribute">value</span>=<span class="string">"log: "</span> <span class="attribute">builtin_initializer</span>=**NULL** <span class="attribute">initializer</span>=**NULL**))</span><br><span class="line">        (var_decl range=[ZLog.swift:14:13 - line:14:13] <span class="string">"prefix"</span> <span class="attribute">type</span>=<span class="string">'&lt;null type&gt;'</span> let <span class="attribute">readImpl</span>=stored immutable)</span><br><span class="line">        (call_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">arg_labels</span>=_:terminator:</span><br><span class="line">          (unresolved_decl_ref_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">name</span>=print <span class="attribute">function_ref</span>=unapplied)</span><br><span class="line">          (tuple_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">names</span>=<span class="string">''</span>,terminator</span><br><span class="line">            (declref_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">decl</span>=ZLog.(file).ZLog.d(_:).prefix@ZLog.swift:14:13 <span class="attribute">function_ref</span>=unapplied)</span><br><span class="line">            (string_literal_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">encoding</span>=utf8 <span class="attribute">value</span>=<span class="string">""</span> <span class="attribute">builtin_initializer</span>=**NULL** <span class="attribute">initializer</span>=**NULL**)))</span><br><span class="line">        (call_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">arg_labels</span>=_:</span><br><span class="line">          (unresolved_decl_ref_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">name</span>=print <span class="attribute">function_ref</span>=unapplied)</span><br><span class="line">          (paren_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span></span><br><span class="line">            (declref_expr <span class="attribute">type</span>=<span class="string">'&lt;null&gt;'</span> <span class="attribute">decl</span>=ZLog.(file).ZLog.d(_:).value@ZLog.swift:12:24 <span class="attribute">function_ref</span>=unapplied)))))))</span><br><span class="line">macbookdeMacBook-Pro<span class="keyword">:Log</span> mac$ swiftc -dump-ast ZLog.swift</span><br><span class="line">(source_file <span class="string">"ZLog.swift"</span></span><br><span class="line">  (import_decl range=[ZLog.swift:9:1 - line:9:8] <span class="string">'Foundation'</span>)</span><br><span class="line">  (class_decl range=[ZLog.swift:10:1 - line:18:1] <span class="string">"ZLog"</span><span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'ZLog.Type'</span> <span class="attribute">access</span>=internal non-resilient</span><br><span class="line">    (func_decl range=[ZLog.swift:12:5 - line:17:5] <span class="string">"d(_:)"</span> &lt;T&gt;<span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'&lt;T&gt; (ZLog.Type) -&gt; (T) -&gt; ()'</span> <span class="attribute">access</span>=internal final captures=(&lt;generic&gt; ) type</span><br><span class="line">      (parameter <span class="string">"self"</span><span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'ZLog.Type'</span>)</span><br><span class="line">      (parameter_list</span><br><span class="line">        (parameter <span class="string">"value"</span><span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'T'</span>) range=[ZLog.swift:12:21 - line:12:32])</span><br><span class="line">      (brace_stmt range=[ZLog.swift:13:5 - line:17:5]</span><br><span class="line">        (pattern_binding_decl range=[ZLog.swift:14:9 - line:14:22]</span><br><span class="line">          (pattern_named <span class="attribute">type</span>=<span class="string">'String'</span> <span class="string">'prefix'</span>)</span><br><span class="line">          (string_literal_expr <span class="attribute">type</span>=<span class="string">'String'</span> <span class="attribute">location</span>=ZLog.swift:14:22 range=[ZLog.swift:14:22 - line:14:22] <span class="attribute">encoding</span>=utf8 <span class="attribute">value</span>=<span class="string">"log: "</span> <span class="attribute">builtin_initializer</span>=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) <span class="attribute">initializer</span>=**NULL**))</span><br><span class="line">        (var_decl range=[ZLog.swift:14:13 - line:14:13] <span class="string">"prefix"</span> <span class="attribute">type</span>=<span class="string">'String'</span><span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'String'</span> <span class="attribute">access</span>=private let <span class="attribute">readImpl</span>=stored immutable)</span><br><span class="line">        (call_expr <span class="attribute">type</span>=<span class="string">'()'</span> <span class="attribute">location</span>=ZLog.swift:15:9 range=[ZLog.swift:15:9 - line:15:37] nothrow <span class="attribute">arg_labels</span>=_:terminator:</span><br><span class="line">          (declref_expr <span class="attribute">type</span>=<span class="string">'(Any..., String, String) -&gt; ()'</span> <span class="attribute">location</span>=ZLog.swift:15:9 range=[ZLog.swift:15:9 - line:15:9] <span class="attribute">decl</span>=Swift.(file).print(_:separator:terminator:) <span class="attribute">function_ref</span>=single)</span><br><span class="line">          (argument_shuffle_expr implicit <span class="attribute">type</span>=<span class="string">'(Any..., separator: String, terminator: String)'</span> <span class="attribute">location</span>=ZLog.swift:15:14 range=[ZLog.swift:15:14 - line:15:37] tuple_to_tuple elements=[-2, -1, 1] variadic_sources=[0] <span class="attribute">default_args_owner</span>=Swift.(file).print(_:separator:terminator:)</span><br><span class="line">            (tuple_expr <span class="attribute">type</span>=<span class="string">'(Any, terminator: String)'</span> <span class="attribute">location</span>=ZLog.swift:15:14 range=[ZLog.swift:15:14 - line:15:37] <span class="attribute">names</span>=<span class="string">''</span>,terminator</span><br><span class="line">              (erasure_expr implicit <span class="attribute">type</span>=<span class="string">'Any'</span> <span class="attribute">location</span>=ZLog.swift:15:15 range=[ZLog.swift:15:15 - line:15:15]</span><br><span class="line">                (declref_expr <span class="attribute">type</span>=<span class="string">'String'</span> <span class="attribute">location</span>=ZLog.swift:15:15 range=[ZLog.swift:15:15 - line:15:15] <span class="attribute">decl</span>=ZLog.(file).ZLog.d(_:).prefix@ZLog.swift:14:13 <span class="attribute">function_ref</span>=unapplied))</span><br><span class="line">              (string_literal_expr <span class="attribute">type</span>=<span class="string">'String'</span> <span class="attribute">location</span>=ZLog.swift:15:35 range=[ZLog.swift:15:35 - line:15:35] <span class="attribute">encoding</span>=utf8 <span class="attribute">value</span>=<span class="string">""</span> <span class="attribute">builtin_initializer</span>=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) <span class="attribute">initializer</span>=**NULL**))))</span><br><span class="line">        (call_expr <span class="attribute">type</span>=<span class="string">'()'</span> <span class="attribute">location</span>=ZLog.swift:16:9 range=[ZLog.swift:16:9 - line:16:20] nothrow <span class="attribute">arg_labels</span>=_:</span><br><span class="line">          (declref_expr <span class="attribute">type</span>=<span class="string">'(Any..., String, String) -&gt; ()'</span> <span class="attribute">location</span>=ZLog.swift:16:9 range=[ZLog.swift:16:9 - line:16:9] <span class="attribute">decl</span>=Swift.(file).print(_:separator:terminator:) <span class="attribute">function_ref</span>=single)</span><br><span class="line">          (argument_shuffle_expr implicit <span class="attribute">type</span>=<span class="string">'(Any..., separator: String, terminator: String)'</span> <span class="attribute">location</span>=ZLog.swift:16:15 range=[ZLog.swift:16:14 - line:16:20] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] <span class="attribute">default_args_owner</span>=Swift.(file).print(_:separator:terminator:)</span><br><span class="line">            (paren_expr <span class="attribute">type</span>=<span class="string">'(Any)'</span> <span class="attribute">location</span>=ZLog.swift:16:15 range=[ZLog.swift:16:14 - line:16:20]</span><br><span class="line">              (erasure_expr implicit <span class="attribute">type</span>=<span class="string">'Any'</span> <span class="attribute">location</span>=ZLog.swift:16:15 range=[ZLog.swift:16:15 - line:16:15]</span><br><span class="line">                (declref_expr <span class="attribute">type</span>=<span class="string">'T'</span> <span class="attribute">location</span>=ZLog.swift:16:15 range=[ZLog.swift:16:15 - line:16:15] <span class="attribute">decl</span>=ZLog.(file).ZLog.d(_:).value@ZLog.swift:12:24 <span class="attribute">function_ref</span>=unapplied)))))))</span><br><span class="line">    (constructor_decl implicit range=[ZLog.swift:10:7 - line:10:7] <span class="string">"init()"</span><span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'(ZLog.Type) -&gt; () -&gt; ZLog'</span> <span class="attribute">access</span>=internal designated</span><br><span class="line">      (parameter <span class="string">"self"</span><span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'ZLog'</span>)</span><br><span class="line">      (parameter_list)</span><br><span class="line">      (brace_stmt implicit</span><br><span class="line">        (return_stmt implicit)))</span><br><span class="line">    (destructor_decl implicit range=[ZLog.swift:10:7 - line:10:7] <span class="string">"deinit"</span><span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'(ZLog) -&gt; () -&gt; ()'</span> <span class="attribute">access</span>=internal @objc</span><br><span class="line">      (parameter <span class="string">"self"</span><span class="built_in"> interface </span><span class="attribute">type</span>=<span class="string">'ZLog'</span>)</span><br><span class="line">      (parameter_list)</span><br><span class="line">      (brace_stmt implicit range=[ZLog.swift:10:7 - line:10:7]))))</span><br></pre></td></tr></table></figure><p>以上就是简单的示例介绍,关于语法树实际应用还有下面的一点介绍:</p><p><a href="https://github.com/apple/swift-syntax" target="_blank" rel="noopener">SwiftSyntax</a>是基于libSyntax构建的Swift库，利用它可以分析，生成和转换Swift代码。现在已经有一些基于它开源的库，比如SwiftRewriter针对代码进行自动格式化(其中包括基于代码规范进行简单的代码优化),<a href="https://github.com/peripheryapp/periphery" target="_blank" rel="noopener">periphery</a>，检测未使用的Swift代码，比如未使用的Protocol和类，以及他们的方法和方法参数等等</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Swift是Apple在2014年6月WWDC发布的全新编程语言，中文名和LOGO是“雨燕” Swift之父Chris Lattner pClang编译器作者、LLVM项目的主要发起人 从Apple离职后，先后跳槽到Tesla、Google p目前在Google Brain从事AI研究&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;历时5年发展，从Swift1.x发展到了Swift5.x版本，经历了多次重大改变，&lt;strong&gt;ABI&lt;/strong&gt;终于稳定 &lt;strong&gt;API(Application Programming Interface)&lt;/strong&gt;:应用程序编程接口&lt;/p&gt;
&lt;p&gt;源代码和库之间的接口&lt;br&gt;ABI(Application Binary Interface):应用程序二进制接口&lt;br&gt; 应用程序与操作系统之间的底层接口&lt;br&gt;涉及的内容有: &lt;strong&gt;目标文件格式、数据类型的大小\布局\对齐、函数调用约定等等 &lt;/strong&gt;  随着ABI的稳定，Swift语法基本不会再有太大的变动,截止至2019年6月，目前最新版本:Swift5.1&lt;br&gt;Swift完全开源: &lt;a href=&quot;https://github.com/apple/swift&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/apple/swift&lt;/a&gt;，主要采用C++编写&lt;/p&gt;
&lt;h5 id=&quot;一-swift-编译流程&quot;&gt;&lt;a href=&quot;#一-swift-编译流程&quot; class=&quot;headerlink&quot; title=&quot;一  swift 编译流程&quot;&gt;&lt;/a&gt;一  swift 编译流程&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;../assets/blogImg/binyiliucheng1.png&quot; alt=&quot;编译流程&quot;&gt;&lt;br&gt;首先我们要知道编译器分为前端和后端：&lt;br&gt;前端：词法分析&lt;br&gt;后端：生成对应平台的二进制代码&lt;/p&gt;
&lt;p&gt;Swift与OC和C的编译流程区别：C和OC编译器的前端是Clang，也就是以前的OC代码通过Clang这个编译器的前端进行处理，转交给LLVM这个编译器的后端，最后生成ARM的二进制代码。而Swift的编译器的前端是swiftc，通过swiftc进行词法分析和语法树处理，然后交给LLVM的后端编译器，最后生成ARM格式的二进制代码&lt;br&gt;&lt;img src=&quot;../assets/blogImg/bianyiliucheng2.png&quot; alt=&quot;编译流程&quot;&gt;&lt;br&gt;Swift代码–&amp;gt;通过swiftc生成Swift AST(Swift语法树)–&amp;gt;Raw Swift IL(Swift特有的中间代码)–&amp;gt;Canonical Swift IL(更简洁的Swift代码)–&amp;gt;转交给后端生成LLVM代码–&amp;gt;Assembly(汇编代码)–&amp;gt;Executable(二进制代码)&lt;br&gt;&lt;a href=&quot;https://swift.org/swift-compiler/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;每个阶段具体介绍&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://example.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序小票打印功能（以及中文乱码的解决）</title>
    <link href="http://example.com/2018/11/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%8F%E7%A5%A8%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD%EF%BC%88%E4%BB%A5%E5%8F%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <id>http://example.com/2018/11/10/微信小程序小票打印功能（以及中文乱码的解决）/</id>
    <published>2018-11-10T08:07:10.000Z</published>
    <updated>2020-12-05T06:41:26.861Z</updated>
    
    <content type="html"><![CDATA[<p>因为业务需求，需要实现微信小程序连接热敏打印机打印小票。首先我要先知道微信小程序有没有蓝牙操作相关的API，然后就是如何蓝牙连接打印机，发送打印指令了。</p><p>通过查看<a href="[https://developers.weixin.qq.com/miniprogram/dev/api/wx.writeBLECharacteristicValue.html](https://developers.weixin.qq.com/miniprogram/dev/api/wx.writeBLECharacteristicValue.html">小程序文档</a><br>)，我看到微信小程序是支持蓝牙操作的<br><img src="https://upload-images.jianshu.io/upload_images/1972799-8f242641e7154fc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小程序文档"><br>但是我看到它有两个，低功耗蓝牙，蓝牙。蓝牙我们知道，低功耗蓝牙是什么东西，网上查了下，解释如下：<br>以前可能有蓝牙1.0、蓝牙2.0、蓝牙3.0、蓝牙4.0之类的以数字结尾的蓝牙版本号，而实际上，在最新的标准中，已经不再使用数字版本号作为蓝牙版本的区分了，取而代之的是经典蓝牙与低功耗蓝牙（BLE）这两种区别<br>低功耗蓝牙（<strong>Bluetooth Low Energy</strong>，或称<strong>Bluetooth LE</strong>、<strong>BLE</strong>，旧商标<strong>Bluetooth Smart</strong>）也称<strong>低功耗蓝牙</strong>，是<a href="https://baike.baidu.com/item/%E8%93%9D%E7%89%99%E6%8A%80%E6%9C%AF%E8%81%94%E7%9B%9F" target="_blank" rel="noopener">蓝牙技术联盟</a>设计和销售的一种个人局域网技术，旨在用于医疗保健、<a href="https://baike.baidu.com/item/%E8%BF%90%E5%8A%A8%E5%81%A5%E8%BA%AB" target="_blank" rel="noopener">运动健身</a>、信标、安防、家庭娱乐等领域的新兴应用。相较经典蓝牙，低功耗蓝牙旨在保持同等通信范围的同时显著降低功耗和成本.<br><a id="more"></a></p><p>我要打印肯定要与打印机进行数据通信的，通过文档我看到，只有低功耗蓝牙里面有一个写和读的方法，那么微信就限定我只能通过低功耗蓝牙相关api进行与打印机相关交互，同时也限定了我的打印机也要支持低功耗蓝牙连接，幸运的是我的打印机是支持的。<br>接下来看怎么写代码了，官方给了我们一个蓝牙操作的demo,那我就直接在demo上改了。<br><img src="https://upload-images.jianshu.io/upload_images/1972799-a1f443fba9a0bd6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>点上面就能打开示例代码了。<br><img src="https://upload-images.jianshu.io/upload_images/1972799-ceac79822281c8f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo显示界面"><br>上面是demo界面，点击开始扫描就能收到周围的蓝牙了，我的打印机蓝牙也在搜索结果的列表里，我试了下，能够连接到我的打印机。<br>接下来我打印一段文字试试。<br>在index.js里面我改写了这个方法,我打印了一个hello world.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">writeBLECharacteristicValue() &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">let</span> dataBuffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">let</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(dataBuffer)</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      dataView.setUint8(i, str.charAt(i).charCodeAt())</span><br><span class="line">    &#125;</span><br><span class="line">    wx.writeBLECharacteristicValue(&#123;</span><br><span class="line">      deviceId: <span class="keyword">this</span>._deviceId,</span><br><span class="line">      serviceId: <span class="keyword">this</span>._serviceId,</span><br><span class="line">      characteristicId: <span class="keyword">this</span>._characteristicId,</span><br><span class="line">      value: dataBuffer,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发送的数据：'</span> + that.writeDatas)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'message发送成功'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"data:"</span> + res)</span><br><span class="line">      &#125;,</span><br><span class="line">      complete: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"data:"</span> + res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：<br><img src="https://upload-images.jianshu.io/upload_images/1972799-b28638c9769b4958.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打印结果"><br>看到了打印成功，接下来我试了下中文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">writeBLECharacteristicValue() &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"你好 世界"</span>;</span><br><span class="line">    <span class="keyword">let</span> dataBuffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">let</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(dataBuffer)</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      dataView.setUint8(i, str.charAt(i).charCodeAt())</span><br><span class="line">    &#125;</span><br><span class="line">    wx.writeBLECharacteristicValue(&#123;</span><br><span class="line">      deviceId: <span class="keyword">this</span>._deviceId,</span><br><span class="line">      serviceId: <span class="keyword">this</span>._serviceId,</span><br><span class="line">      characteristicId: <span class="keyword">this</span>._characteristicId,</span><br><span class="line">      value: dataBuffer,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'message发送成功'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"data:"</span> + res)</span><br><span class="line">      &#125;,</span><br><span class="line">      complete: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"data:"</span> + res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：<img src="https://upload-images.jianshu.io/upload_images/1972799-120a5c76bb13c017.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这打的是什么鬼，乱码了。初步推断可能是编码问题，网上也收到了相关问题的一些解答。<br><a href="https://www.aiyingli.com/54066.html" title="小程序丨【已解决】蓝牙打印机打印中文乱码" target="_blank" rel="noopener">小程序丨【已解决】蓝牙打印机打印中文乱码</a><br><img src="https://upload-images.jianshu.io/upload_images/1972799-0711eb73f8ef17c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>说是我的中文编码不对，应该转成gbk，然后再转成16进制，最后发送给打印机，说是这么说，但是代码怎么写，这片文章没说。我记得js是没有转gbk的方法的，只能看看别人怎么搞得，还真找到一个人写的。<br><a href="[https://blog.csdn.net/qq_36479244/article/details/86528336](https://blog.csdn.net/qq_36479244/article/details/86528336">小程序蓝牙打印</a><br>)<br><img src="https://upload-images.jianshu.io/upload_images/1972799-b2189b79a39d99ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>赶紧放到我的代码里试了一下，运行后发现了一个问题：<br><img src="https://upload-images.jianshu.io/upload_images/1972799-2dc8aed600de945d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个gbk转换的代码怎么来的，通篇就这个一句话，并没有讲怎么来的，我推测他可能引入了一个库gbk相关的，于是接着搜索,还真有相关的库<a href="http://www.vuln.cn/2901" target="_blank" rel="noopener">http://www.vuln.cn/2901</a><br><img src="https://upload-images.jianshu.io/upload_images/1972799-e85030b5c57201f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载下来"><br>下载后，打开这个库<br><img src="https://upload-images.jianshu.io/upload_images/1972799-027b06fcfeab1f7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="库文件内容"><br>这个该怎么放到小程序里面用呢，在下载页面我们看到了它的用法介绍<br><img src="https://upload-images.jianshu.io/upload_images/1972799-463e4ff21aa0d454.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个写法小程序里不能用啊，不支持这种使用方式啊。小程序只支持下面这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send0X0A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer)</span><br><span class="line">  dataView.setUint8(<span class="number">0</span>, <span class="number">0x0a</span>)</span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">定义方法的地方模块导出</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  hexStringToArrayBuffer: hexStringToArrayBuffer,</span><br><span class="line">  hexStringToBuff: hexStringToBuff,</span><br><span class="line">  send0X0A: send0X0A</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用的地方要引用一下</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'../../utils/util.js'</span>);</span><br></pre></td></tr></table></figure><p>没办法，只能修改库，一顿操作猛如虎，搞成了下面这样的<br><img src="https://upload-images.jianshu.io/upload_images/1972799-169dda8c2e55bfdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这里我只导出了一个编码的方法，调用的地方是这样使用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gbk = <span class="built_in">require</span>(<span class="string">'./gbk.js'</span>);</span><br><span class="line"><span class="keyword">const</span> hexStringToBuff = <span class="function"><span class="params">str</span> =&gt;</span> &#123; <span class="comment">//str='中国：WXHSH'</span></span><br><span class="line">  <span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>((sumStrLength(str)) * <span class="number">4</span>)</span><br><span class="line">  <span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer)</span><br><span class="line">  <span class="keyword">var</span> data = str.toString();</span><br><span class="line">  <span class="keyword">var</span> p = <span class="number">0</span>; <span class="comment">//ArrayBuffer 偏移量</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCN(data[i])) &#123; <span class="comment">//是中文</span></span><br><span class="line">      <span class="comment">//调用GBK 转码</span></span><br><span class="line">      <span class="keyword">var</span> t = gbk.encode(data[i]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">var</span> code = t[j * <span class="number">2</span>] + t[j * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">parseInt</span>(code, <span class="number">16</span>)</span><br><span class="line">        dataView.setUint8(p++, temp)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = data.charCodeAt(i);</span><br><span class="line">      dataView.setUint8(p++, temp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：图我就不截了，直接说结果，结果就是啥也没打印出来，这是怎么回事呢，调试下看看。<br><img src="https://upload-images.jianshu.io/upload_images/1972799-0c80bceacdd0ef54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>发现问题了，一个中文是占两个字节的%C4%C3,按照上面那个哥们的写法我只分割了%C，4%，这是什么鬼，应该是%C4，%C3，才对，两个各代表一个字节码编号。于是改了下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hexStringToBuff = <span class="function"><span class="params">str</span> =&gt;</span> &#123; <span class="comment">//str='中国：WXHSH'</span></span><br><span class="line">  <span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>((sumStrLength(str)) * <span class="number">4</span>)</span><br><span class="line">  <span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer)</span><br><span class="line">  <span class="keyword">var</span> data = str.toString();</span><br><span class="line">  <span class="keyword">var</span> p = <span class="number">0</span>; <span class="comment">//ArrayBuffer 偏移量</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCN(data[i])) &#123; <span class="comment">//是中文</span></span><br><span class="line">      <span class="comment">//调用GBK 转码</span></span><br><span class="line">      <span class="keyword">var</span> t = gbk.encode(data[i]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="comment">//var code = t[j * 2] + t[j * 2 + 1];</span></span><br><span class="line">        <span class="keyword">var</span> code = t[j * <span class="number">3</span> + <span class="number">1</span>] + t[j * <span class="number">3</span> + <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">parseInt</span>(code, <span class="number">16</span>)</span><br><span class="line">        dataView.setUint8(p++, temp)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = data.charCodeAt(i);</span><br><span class="line">      dataView.setUint8(p++, temp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次调试运行下看看：<br><img src="https://upload-images.jianshu.io/upload_images/1972799-f1c263f04e0bb0bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>嗯这下 算分割对了，但是打印机还是没反应，在看代码发现temp = NaN,这是怎么回事呢，于是网上搜索gbk转16进制，总共发现这两个可用的方法</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toUnicode</span><span class="params">(s)</span> &#123;</span></span><br><span class="line">  var str = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; s.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">    str += <span class="string">"\\u"</span> + s.charCodeAt(<span class="built_in">i</span>).toString(<span class="number">16</span>) + <span class="string">"\t"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strToHexCharCode</span><span class="params">(str)</span> &#123;</span></span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  var hexCharCode = [];</span><br><span class="line">  hexCharCode.push(<span class="string">"0x"</span>);</span><br><span class="line">  <span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; str.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">    hexCharCode.push((str.charCodeAt(<span class="built_in">i</span>)).toString(<span class="number">16</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hexCharCode.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用其中一个看一下<br><img src="https://upload-images.jianshu.io/upload_images/1972799-48dc533afe8cc0c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>哎呀，这回好像temp有值了，还是16进制的，赶紧通过断点，看看打印机反应，乖乖有反应了，不截图了，直接说结果吧，乱码 乱码 乱码，这就奇了怪了，都转好了，怎么还打印不出来呢。网上一顿搜也没什么结果， 静下心来想一想，之前我们App是有打印功能的，那App传输的数据是什么样的呢，对比下我传的有什么不一样么？<br><img src="https://upload-images.jianshu.io/upload_images/1972799-588684a2678a60f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个是android程序，它是通过getBytes()获取文本字节流。运行程序，查看打印结果<br><img src="https://upload-images.jianshu.io/upload_images/1972799-79c1ebb57043feb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我发现 android 转出来的都是负的整数，不像我传的0x…… ,看来还是我的数据转换的不对，再看一眼调试页面。<br><img src="https://upload-images.jianshu.io/upload_images/1972799-dbfc15303844c94c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>C4 E3,貌似是十六进制数据，%号什么鬼，它不可能转成整型，temp 一直是NaN,得 我去掉%号试试。<br><img src="https://upload-images.jianshu.io/upload_images/1972799-e594c0d0ac413c6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>呀嘿，temp有值了，跟Android的数据差不多，都是整数。过掉断点看看。<img src="https://upload-images.jianshu.io/upload_images/1972799-70d8936e382c08f0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>哈哈，出来了，这一刻的心情你懂的。</p><p>到此 小程序蓝牙打印算是流程搞通了，网上资料有时候不太全，有时还有错误，这就需要我们大胆猜测勇敢验证，最后福利来了，我把完整demo贡献上。</p><p><a href="https://github.com/lerpo/bluethooth.git" target="_blank" rel="noopener">https://github.com/lerpo/bluethooth.git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为业务需求，需要实现微信小程序连接热敏打印机打印小票。首先我要先知道微信小程序有没有蓝牙操作相关的API，然后就是如何蓝牙连接打印机，发送打印指令了。&lt;/p&gt;
&lt;p&gt;通过查看&lt;a href=&quot;[https://developers.weixin.qq.com/miniprogram/dev/api/wx.writeBLECharacteristicValue.html](https://developers.weixin.qq.com/miniprogram/dev/api/wx.writeBLECharacteristicValue.html&quot;&gt;小程序文档&lt;/a&gt;&lt;br&gt;)，我看到微信小程序是支持蓝牙操作的&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1972799-8f242641e7154fc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;小程序文档&quot;&gt;&lt;br&gt;但是我看到它有两个，低功耗蓝牙，蓝牙。蓝牙我们知道，低功耗蓝牙是什么东西，网上查了下，解释如下：&lt;br&gt;以前可能有蓝牙1.0、蓝牙2.0、蓝牙3.0、蓝牙4.0之类的以数字结尾的蓝牙版本号，而实际上，在最新的标准中，已经不再使用数字版本号作为蓝牙版本的区分了，取而代之的是经典蓝牙与低功耗蓝牙（BLE）这两种区别&lt;br&gt;低功耗蓝牙（&lt;strong&gt;Bluetooth Low Energy&lt;/strong&gt;，或称&lt;strong&gt;Bluetooth LE&lt;/strong&gt;、&lt;strong&gt;BLE&lt;/strong&gt;，旧商标&lt;strong&gt;Bluetooth Smart&lt;/strong&gt;）也称&lt;strong&gt;低功耗蓝牙&lt;/strong&gt;，是&lt;a href=&quot;https://baike.baidu.com/item/%E8%93%9D%E7%89%99%E6%8A%80%E6%9C%AF%E8%81%94%E7%9B%9F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;蓝牙技术联盟&lt;/a&gt;设计和销售的一种个人局域网技术，旨在用于医疗保健、&lt;a href=&quot;https://baike.baidu.com/item/%E8%BF%90%E5%8A%A8%E5%81%A5%E8%BA%AB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;运动健身&lt;/a&gt;、信标、安防、家庭娱乐等领域的新兴应用。相较经典蓝牙，低功耗蓝牙旨在保持同等通信范围的同时显著降低功耗和成本.&lt;br&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>我是如何快速上手微信小程序开发的</title>
    <link href="http://example.com/2017/08/23/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84/"/>
    <id>http://example.com/2017/08/23/我是如何快速上手微信小程序开发的/</id>
    <published>2017-08-23T10:00:00.000Z</published>
    <updated>2020-12-05T06:41:26.861Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一-如何创建一个微信小程序"><a href="#一-如何创建一个微信小程序" class="headerlink" title="一 如何创建一个微信小程序"></a>一 如何创建一个微信小程序</h6><h6 id="二-如何搭建小程序页面"><a href="#二-如何搭建小程序页面" class="headerlink" title="二 如何搭建小程序页面"></a>二 如何搭建小程序页面</h6><h6 id="三-小程序如何获取数据，处理逻辑"><a href="#三-小程序如何获取数据，处理逻辑" class="headerlink" title="三 小程序如何获取数据，处理逻辑"></a>三 小程序如何获取数据，处理逻辑</h6><h6 id="四-如何发布小程序应用"><a href="#四-如何发布小程序应用" class="headerlink" title="四 如何发布小程序应用"></a>四 如何发布小程序应用</h6><blockquote><p>无论是前端开发，还是后端开发，时间长了，你总会能总结出它的一些规律的，对于前端开发主要就两条，页面展现，逻辑处理。如果是全流程开发的话，那就是，如何创建项目，页面如何实现，数据获取和逻辑处理如何实现，如何打包上线。移动端或者前端，基本开发流程就这个四个步骤。所以在在前端方面去学习新一门开发技术，只要你解决了这四个问题，那一切就OK了，下面我就讲一下，我在学习微信小程序开发，如何用这四步法快速上手开发的<br><a id="more"></a></p></blockquote><h6 id="一-如何创建一个微信小程序-1"><a href="#一-如何创建一个微信小程序-1" class="headerlink" title="一 如何创建一个微信小程序"></a>一 如何创建一个微信小程序</h6><p>学习一门新技术先看下它的开发文档<a href="https://developers.weixin.qq.com/miniprogram/introduction/" target="_blank" rel="noopener">小程序介绍</a></p><h6 id="1-1-首先要先注册一个账号，具体步骤请看下图的相关章节"><a href="#1-1-首先要先注册一个账号，具体步骤请看下图的相关章节" class="headerlink" title="1.1 首先要先注册一个账号，具体步骤请看下图的相关章节"></a>1.1 首先要先注册一个账号，具体步骤请看下图的相关章节</h6><p><img src="https://upload-images.jianshu.io/upload_images/1972799-6daa24dde5f4372f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="账号注册"></p><h6 id="1-2-小程序信息完善和配置，具体步骤请看下图的相关章节"><a href="#1-2-小程序信息完善和配置，具体步骤请看下图的相关章节" class="headerlink" title="1.2 小程序信息完善和配置，具体步骤请看下图的相关章节"></a>1.2 小程序信息完善和配置，具体步骤请看下图的相关章节</h6><p><img src="https://upload-images.jianshu.io/upload_images/1972799-5562fb8d31319243.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小程序信息配置"></p><h6 id="1-3-上面的工作做完后，接下来才开始创建一个小程序项目"><a href="#1-3-上面的工作做完后，接下来才开始创建一个小程序项目" class="headerlink" title="1.3 上面的工作做完后，接下来才开始创建一个小程序项目"></a>1.3 上面的工作做完后，接下来才开始创建一个小程序项目</h6><p>请看<a href="https://developers.weixin.qq.com/miniprogram/dev/" target="_blank" rel="noopener">小程序开发步骤</a><br><img src="https://upload-images.jianshu.io/upload_images/1972799-2c9cbf8f57703192.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小程序项目的创建"></p><p>到此第一个问题我们就算完成了，接下来解决小程序界面如何搭建。</p><h6 id="二-如何搭建小程序页面-1"><a href="#二-如何搭建小程序页面-1" class="headerlink" title="二 如何搭建小程序页面"></a>二 如何搭建小程序页面</h6><p><img src="https://upload-images.jianshu.io/upload_images/1972799-89ba614765a648f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小程序界面实现"></p><blockquote><p>框架的视图层由 WXML 与 WXSS 编写，由组件来进行展示。<br>将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。<br>WXML(WeiXin Markup language) 用于描述页面的结构。<br>WXS(WeiXin Script) 是小程序的一套脚本语言，结合 WXML，可以构建出页面的结构。<br>WXSS(WeiXin Style Sheet) 用于描述页面的样式。</p></blockquote><p>小程序的页面是由wxml 和wxss这两个文件来实现的，wxml结构如何写请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/component/" target="_blank" rel="noopener">微信小程序组件</a><br>wxss是负责样式控制的，基本类似于css,支持flex布局，所以要想上手构建微信小程序的界面，最好要熟悉html ,css.<br>   微信提供的界面组件很多，没必要一下子全学会，会用一两个就行，其他的遇到需要的时候现查先做，这样又节约学习时间，又能够加深理解。到此第二个问题我们解决了，下面看第三个问题，数据逻辑如何处理。</p><h6 id="三-小程序如何获取数据，处理逻辑-1"><a href="#三-小程序如何获取数据，处理逻辑-1" class="headerlink" title="三 小程序如何获取数据，处理逻辑"></a>三 小程序如何获取数据，处理逻辑</h6><h6 id="3-1-逻辑处理"><a href="#3-1-逻辑处理" class="headerlink" title="3.1 逻辑处理"></a>3.1 逻辑处理</h6><p><img src="https://upload-images.jianshu.io/upload_images/1972799-a2f23fba53624f9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据定义"></p><p><img src="https://upload-images.jianshu.io/upload_images/1972799-f9438d14cc3efbe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据展现"></p><blockquote><p>逻辑处理是通过js文件来操作的<br>一个服务仅仅只有界面展示是不够的，还需要和用户做交互：响应用户的点击、获取用户的位置等等。在小程序里边，我们就通过编写 <code>JS</code> 脚本文件来处理用户的操作。<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123; msg &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"clickMe"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><p>点击 <code>button</code> 按钮的时候，我们希望把界面上 <code>msg</code> 显示成 <code>&quot;Hello World&quot;</code>，于是我们在 <code>button</code> 上声明一个属性: <code>bindtap</code> ，在 JS 文件里边声明了 <code>clickMe</code> 方法来响应这次点击操作：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Page</span>(&#123;</span><br><span class="line">  <span class="attribute">clickMe</span>: <span class="built_in">function</span>() &#123;</span><br><span class="line">    this.<span class="built_in">setData</span>(&#123; msg: <span class="string">"Hello World"</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>响应用户的操作就是这么简单，更详细的事件可以参考文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">WXML - 事件</a> 。<br>此外你还可以在 JS 中调用小程序提供的丰富的 API，利用这些 API 可以很方便的调起微信提供的能力，例如获取用户信息、本地存储、微信支付等。在前边的 QuickStart 例子中，在 <code>pages/index/index.js</code> 就调用了 <code>wx.getUserInfo</code> 获取微信用户的头像和昵称，最后通过 <code>setData</code> 把获取到的信息显示到界面上。更多 API 可以参考文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html" target="_blank" rel="noopener">小程序的API</a> 。</p><h6 id="3-1-数据获取"><a href="#3-1-数据获取" class="headerlink" title="3.1 数据获取"></a>3.1 数据获取</h6><p>现在几乎每个应用都需要从后端获取数据，那么小程序如何获取呢，当然是通过网路操作了。我们封装了小程序的网络操作<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">const app = getApp()</span><br><span class="line"></span><br><span class="line">const request = (url, <span class="keyword">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise((<span class="built_in">resolve</span>, reject) =&gt; &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      ur<span class="variable">l:</span> `$&#123;app.globalData.host&#125;$&#123;url&#125;`,</span><br><span class="line">      method: <span class="keyword">options</span>.method,</span><br><span class="line">      dat<span class="variable">a:</span> <span class="keyword">options</span>.method === <span class="string">'GET'</span> ? <span class="keyword">options</span>.data : JSON.stringify(<span class="keyword">options</span>.data),</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=UTF-8'</span></span><br><span class="line">        // <span class="string">'x-token'</span>: <span class="string">'x-token'</span>  // 看自己是否需要</span><br><span class="line">      &#125;,</span><br><span class="line">      success(request) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.data.error_code === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">resolve</span>(request.data)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(request.data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(error) &#123;</span><br><span class="line">        reject(error.data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const gets = (url, <span class="keyword">options</span> = &#123;&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> request(url, &#123; method: <span class="string">'GET'</span>, dat<span class="variable">a:</span> <span class="keyword">options</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const post = (url, <span class="keyword">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> request(url, &#123; method: <span class="string">'POST'</span>, dat<span class="variable">a:</span> <span class="keyword">options</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="keyword">put</span> = (url, <span class="keyword">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> request(url, &#123; method: <span class="string">'PUT'</span>, dat<span class="variable">a:</span> <span class="keyword">options</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不能声明DELETE（关键字）</span><br><span class="line">const <span class="built_in">remove</span> = (url, <span class="keyword">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> request(url, &#123; method: <span class="string">'DELETE'</span>, dat<span class="variable">a:</span> <span class="keyword">options</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  gets,</span><br><span class="line">  post,</span><br><span class="line">  <span class="keyword">put</span>,</span><br><span class="line">  <span class="built_in">remove</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如何使用请看下图<br><img src="https://upload-images.jianshu.io/upload_images/1972799-30540785d9cb3435.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据获取"><br>数据展现如下图<br><img src="https://upload-images.jianshu.io/upload_images/1972799-753c8f135de2aeeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据展现"><br>到此，第三个问题我们就解决的了下面看第四个问题。</p><h6 id="四-如何发布小程序应用-1"><a href="#四-如何发布小程序应用-1" class="headerlink" title="四 如何发布小程序应用"></a>四 如何发布小程序应用</h6><p><a href="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/role.html" target="_blank" rel="noopener">小程序发布文档说明</a><br><img src="https://upload-images.jianshu.io/upload_images/1972799-c3e2ee59cf23ceb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小程序发布步骤"><br>到此四个问题都解决了。</p><h6 id="总结：本文内容是很简单的，借用了大部分官方文档，其实本文目的不是教你学小程序开发，而是分享一下在学习一项新事物我的方法和思路，互联网技术变化是很快的，我觉得一个人的能力，不仅仅是你技术有多好，你要明白技术是用来干什么的，技术是用来解决现实生活中的问题的，一个好的程序员，不是技术能力，而是解决问题的能力，解决问题不可能只用一种技术，这就要求你的学习能力要强，针对不同的问题，使用不同的技术，哪怕使用的技术你不熟悉，但它是解决问题最好的方法，那就要求你有快速学习并解决问题的能力。"><a href="#总结：本文内容是很简单的，借用了大部分官方文档，其实本文目的不是教你学小程序开发，而是分享一下在学习一项新事物我的方法和思路，互联网技术变化是很快的，我觉得一个人的能力，不仅仅是你技术有多好，你要明白技术是用来干什么的，技术是用来解决现实生活中的问题的，一个好的程序员，不是技术能力，而是解决问题的能力，解决问题不可能只用一种技术，这就要求你的学习能力要强，针对不同的问题，使用不同的技术，哪怕使用的技术你不熟悉，但它是解决问题最好的方法，那就要求你有快速学习并解决问题的能力。" class="headerlink" title="总结：本文内容是很简单的，借用了大部分官方文档，其实本文目的不是教你学小程序开发，而是分享一下在学习一项新事物我的方法和思路，互联网技术变化是很快的，我觉得一个人的能力，不仅仅是你技术有多好，你要明白技术是用来干什么的，技术是用来解决现实生活中的问题的，一个好的程序员，不是技术能力，而是解决问题的能力，解决问题不可能只用一种技术，这就要求你的学习能力要强，针对不同的问题，使用不同的技术，哪怕使用的技术你不熟悉，但它是解决问题最好的方法，那就要求你有快速学习并解决问题的能力。"></a>总结：本文内容是很简单的，借用了大部分官方文档，其实本文目的不是教你学小程序开发，而是分享一下在学习一项新事物我的方法和思路，互联网技术变化是很快的，我觉得一个人的能力，不仅仅是你技术有多好，你要明白技术是用来干什么的，技术是用来解决现实生活中的问题的，一个好的程序员，不是技术能力，而是解决问题的能力，解决问题不可能只用一种技术，这就要求你的学习能力要强，针对不同的问题，使用不同的技术，哪怕使用的技术你不熟悉，但它是解决问题最好的方法，那就要求你有快速学习并解决问题的能力。</h6><h6 id="学习一项新技术，我们要先抓住主线，把流程搞通了，以后再在工作中慢慢的熟悉和丰富对它细节的一些认知，所以学一项东西前多问自己几个问题，我学什么，我为什么学，我怎么学，等。先思考后学习，一定会让你事半功倍。"><a href="#学习一项新技术，我们要先抓住主线，把流程搞通了，以后再在工作中慢慢的熟悉和丰富对它细节的一些认知，所以学一项东西前多问自己几个问题，我学什么，我为什么学，我怎么学，等。先思考后学习，一定会让你事半功倍。" class="headerlink" title="学习一项新技术，我们要先抓住主线，把流程搞通了，以后再在工作中慢慢的熟悉和丰富对它细节的一些认知，所以学一项东西前多问自己几个问题，我学什么，我为什么学，我怎么学，等。先思考后学习，一定会让你事半功倍。"></a>学习一项新技术，我们要先抓住主线，把流程搞通了，以后再在工作中慢慢的熟悉和丰富对它细节的一些认知，所以学一项东西前多问自己几个问题，我学什么，我为什么学，我怎么学，等。先思考后学习，一定会让你事半功倍。</h6><h6 id="对于怎么学习微信小程序开发，我问了自己上面的四个问题，每个问题，我只需要了解大体内容，四个问题都解决了，然后整个流程也就通了，以后也就是慢慢的对每个问题内容的细节慢慢的熟悉和了解了，其实花了不到一下午的时间，我就搞出了一个简单的demo出来了，了解的内容基本已经覆盖微信小程序日常开发80-的内容了。以上就是我的一点学习心得。"><a href="#对于怎么学习微信小程序开发，我问了自己上面的四个问题，每个问题，我只需要了解大体内容，四个问题都解决了，然后整个流程也就通了，以后也就是慢慢的对每个问题内容的细节慢慢的熟悉和了解了，其实花了不到一下午的时间，我就搞出了一个简单的demo出来了，了解的内容基本已经覆盖微信小程序日常开发80-的内容了。以上就是我的一点学习心得。" class="headerlink" title="对于怎么学习微信小程序开发，我问了自己上面的四个问题，每个问题，我只需要了解大体内容，四个问题都解决了，然后整个流程也就通了，以后也就是慢慢的对每个问题内容的细节慢慢的熟悉和了解了，其实花了不到一下午的时间，我就搞出了一个简单的demo出来了，了解的内容基本已经覆盖微信小程序日常开发80%的内容了。以上就是我的一点学习心得。"></a>对于怎么学习微信小程序开发，我问了自己上面的四个问题，每个问题，我只需要了解大体内容，四个问题都解决了，然后整个流程也就通了，以后也就是慢慢的对每个问题内容的细节慢慢的熟悉和了解了，其实花了不到一下午的时间，我就搞出了一个简单的demo出来了，了解的内容基本已经覆盖微信小程序日常开发80%的内容了。以上就是我的一点学习心得。</h6><p>最后<a href="https://github.com/lerpo/xcx.git" target="_blank" rel="noopener">小程序Demo</a><br>Demo截图<br><img src="https://upload-images.jianshu.io/upload_images/1972799-89500b4ddb5ba70d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页"></p><p><img src="https://upload-images.jianshu.io/upload_images/1972799-b6607559f3327b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我的"><br><img src="https://upload-images.jianshu.io/upload_images/1972799-4f2e7c93fbb4921a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击我的任意条目，数据是从第三方聚合平台提供的api获取的"><br><img src="https://upload-images.jianshu.io/upload_images/1972799-235e43358c5baf1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击首页定位图标"></p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;一-如何创建一个微信小程序&quot;&gt;&lt;a href=&quot;#一-如何创建一个微信小程序&quot; class=&quot;headerlink&quot; title=&quot;一 如何创建一个微信小程序&quot;&gt;&lt;/a&gt;一 如何创建一个微信小程序&lt;/h6&gt;&lt;h6 id=&quot;二-如何搭建小程序页面&quot;&gt;&lt;a href=&quot;#二-如何搭建小程序页面&quot; class=&quot;headerlink&quot; title=&quot;二 如何搭建小程序页面&quot;&gt;&lt;/a&gt;二 如何搭建小程序页面&lt;/h6&gt;&lt;h6 id=&quot;三-小程序如何获取数据，处理逻辑&quot;&gt;&lt;a href=&quot;#三-小程序如何获取数据，处理逻辑&quot; class=&quot;headerlink&quot; title=&quot;三 小程序如何获取数据，处理逻辑&quot;&gt;&lt;/a&gt;三 小程序如何获取数据，处理逻辑&lt;/h6&gt;&lt;h6 id=&quot;四-如何发布小程序应用&quot;&gt;&lt;a href=&quot;#四-如何发布小程序应用&quot; class=&quot;headerlink&quot; title=&quot;四 如何发布小程序应用&quot;&gt;&lt;/a&gt;四 如何发布小程序应用&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;无论是前端开发，还是后端开发，时间长了，你总会能总结出它的一些规律的，对于前端开发主要就两条，页面展现，逻辑处理。如果是全流程开发的话，那就是，如何创建项目，页面如何实现，数据获取和逻辑处理如何实现，如何打包上线。移动端或者前端，基本开发流程就这个四个步骤。所以在在前端方面去学习新一门开发技术，只要你解决了这四个问题，那一切就OK了，下面我就讲一下，我在学习微信小程序开发，如何用这四步法快速上手开发的&lt;br&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
